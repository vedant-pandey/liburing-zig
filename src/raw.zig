/// Raw liburing bindings generated by translate-c
/// Generated using zig 0.14.0
/// These implementations could be incorrect as zig translate-c is not feature complete
pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const struct_iovec = extern struct {
    iov_base: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    iov_len: usize = @import("std").mem.zeroes(usize),
};
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const u_char = __u_char;
pub const u_short = __u_short;
pub const u_int = __u_int;
pub const u_long = __u_long;
pub const quad_t = __quad_t;
pub const u_quad_t = __u_quad_t;
pub const fsid_t = __fsid_t;
pub const loff_t = __loff_t;
pub const ino_t = __ino_t;
pub const dev_t = __dev_t;
pub const gid_t = __gid_t;
pub const mode_t = __mode_t;
pub const nlink_t = __nlink_t;
pub const uid_t = __uid_t;
pub const off_t = __off_t;
pub const pid_t = __pid_t;
pub const id_t = __id_t;
pub const daddr_t = __daddr_t;
pub const caddr_t = __caddr_t;
pub const key_t = __key_t;
pub const clock_t = __clock_t;
pub const clockid_t = __clockid_t;
pub const time_t = __time_t;
pub const timer_t = __timer_t;
pub const ulong = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_int8_t = __uint8_t;
pub const u_int16_t = __uint16_t;
pub const u_int32_t = __uint32_t;
pub const u_int64_t = __uint64_t;
pub const register_t = c_long;
pub fn __bswap_16(arg___bsx: __uint16_t) callconv(.c) __uint16_t {
    var __bsx = arg___bsx;
    _ = &__bsx;
    return @as(__uint16_t, @bitCast(@as(c_short, @truncate(((@as(c_int, @bitCast(@as(c_uint, __bsx))) >> @intCast(8)) & @as(c_int, 255)) | ((@as(c_int, @bitCast(@as(c_uint, __bsx))) & @as(c_int, 255)) << @intCast(8))))));
}
pub fn __bswap_32(arg___bsx: __uint32_t) callconv(.c) __uint32_t {
    var __bsx = arg___bsx;
    _ = &__bsx;
    return ((((__bsx & @as(c_uint, 4278190080)) >> @intCast(24)) | ((__bsx & @as(c_uint, 16711680)) >> @intCast(8))) | ((__bsx & @as(c_uint, 65280)) << @intCast(8))) | ((__bsx & @as(c_uint, 255)) << @intCast(24));
}
pub fn __bswap_64(arg___bsx: __uint64_t) callconv(.c) __uint64_t {
    var __bsx = arg___bsx;
    _ = &__bsx;
    return @as(__uint64_t, @bitCast(@as(c_ulong, @truncate(((((((((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(56)) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 71776119061217280)) >> @intCast(40))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 280375465082880)) >> @intCast(24))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 1095216660480)) >> @intCast(8))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 4278190080)) << @intCast(8))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 16711680)) << @intCast(24))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 65280)) << @intCast(40))) | ((@as(c_ulonglong, @bitCast(@as(c_ulonglong, __bsx))) & @as(c_ulonglong, 255)) << @intCast(56))))));
}
pub fn __uint16_identity(arg___x: __uint16_t) callconv(.c) __uint16_t {
    var __x = arg___x;
    _ = &__x;
    return __x;
}
pub fn __uint32_identity(arg___x: __uint32_t) callconv(.c) __uint32_t {
    var __x = arg___x;
    _ = &__x;
    return __x;
}
pub fn __uint64_identity(arg___x: __uint64_t) callconv(.c) __uint64_t {
    var __x = arg___x;
    _ = &__x;
    return __x;
}
pub const __sigset_t = extern struct {
    __val: [16]c_ulong = @import("std").mem.zeroes([16]c_ulong),
};
pub const sigset_t = __sigset_t;
pub const struct_timeval = extern struct {
    tv_sec: __time_t = @import("std").mem.zeroes(__time_t),
    tv_usec: __suseconds_t = @import("std").mem.zeroes(__suseconds_t),
};
pub const struct_timespec = extern struct {
    tv_sec: __time_t = @import("std").mem.zeroes(__time_t),
    tv_nsec: __syscall_slong_t = @import("std").mem.zeroes(__syscall_slong_t),
};
pub const suseconds_t = __suseconds_t;
pub const __fd_mask = c_long;
pub const fd_set = extern struct {
    __fds_bits: [16]__fd_mask = @import("std").mem.zeroes([16]__fd_mask),
};
pub const fd_mask = __fd_mask;
pub extern fn select(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]struct_timeval) c_int;
pub extern fn pselect(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]const struct_timespec, noalias __sigmask: [*c]const __sigset_t) c_int;
pub const blksize_t = __blksize_t;
pub const blkcnt_t = __blkcnt_t;
pub const fsblkcnt_t = __fsblkcnt_t;
pub const fsfilcnt_t = __fsfilcnt_t;
const struct_unnamed_1 = extern struct {
    __low: c_uint = @import("std").mem.zeroes(c_uint),
    __high: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const __atomic_wide_counter = extern union {
    __value64: c_ulonglong,
    __value32: struct_unnamed_1,
};
pub const struct___pthread_internal_list = extern struct {
    __prev: [*c]struct___pthread_internal_list = @import("std").mem.zeroes([*c]struct___pthread_internal_list),
    __next: [*c]struct___pthread_internal_list = @import("std").mem.zeroes([*c]struct___pthread_internal_list),
};
pub const __pthread_list_t = struct___pthread_internal_list;
pub const struct___pthread_internal_slist = extern struct {
    __next: [*c]struct___pthread_internal_slist = @import("std").mem.zeroes([*c]struct___pthread_internal_slist),
};
pub const __pthread_slist_t = struct___pthread_internal_slist;
pub const struct___pthread_mutex_s = extern struct {
    __lock: c_int = @import("std").mem.zeroes(c_int),
    __count: c_uint = @import("std").mem.zeroes(c_uint),
    __owner: c_int = @import("std").mem.zeroes(c_int),
    __nusers: c_uint = @import("std").mem.zeroes(c_uint),
    __kind: c_int = @import("std").mem.zeroes(c_int),
    __spins: c_short = @import("std").mem.zeroes(c_short),
    __elision: c_short = @import("std").mem.zeroes(c_short),
    __list: __pthread_list_t = @import("std").mem.zeroes(__pthread_list_t),
};
pub const struct___pthread_rwlock_arch_t = extern struct {
    __readers: c_uint = @import("std").mem.zeroes(c_uint),
    __writers: c_uint = @import("std").mem.zeroes(c_uint),
    __wrphase_futex: c_uint = @import("std").mem.zeroes(c_uint),
    __writers_futex: c_uint = @import("std").mem.zeroes(c_uint),
    __pad3: c_uint = @import("std").mem.zeroes(c_uint),
    __pad4: c_uint = @import("std").mem.zeroes(c_uint),
    __cur_writer: c_int = @import("std").mem.zeroes(c_int),
    __shared: c_int = @import("std").mem.zeroes(c_int),
    __rwelision: i8 = @import("std").mem.zeroes(i8),
    __pad1: [7]u8 = @import("std").mem.zeroes([7]u8),
    __pad2: c_ulong = @import("std").mem.zeroes(c_ulong),
    __flags: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct___pthread_cond_s = extern struct {
    __wseq: __atomic_wide_counter = @import("std").mem.zeroes(__atomic_wide_counter),
    __g1_start: __atomic_wide_counter = @import("std").mem.zeroes(__atomic_wide_counter),
    __g_refs: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
    __g_size: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
    __g1_orig_size: c_uint = @import("std").mem.zeroes(c_uint),
    __wrefs: c_uint = @import("std").mem.zeroes(c_uint),
    __g_signals: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
};
pub const __tss_t = c_uint;
pub const __thrd_t = c_ulong;
pub const __once_flag = extern struct {
    __data: c_int = @import("std").mem.zeroes(c_int),
};
pub const pthread_t = c_ulong;
pub const pthread_mutexattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_condattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_key_t = c_uint;
pub const pthread_once_t = c_int;
pub const union_pthread_attr_t = extern union {
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_attr_t = union_pthread_attr_t;
pub const pthread_mutex_t = extern union {
    __data: struct___pthread_mutex_s,
    __size: [40]u8,
    __align: c_long,
};
pub const pthread_cond_t = extern union {
    __data: struct___pthread_cond_s,
    __size: [48]u8,
    __align: c_longlong,
};
pub const pthread_rwlock_t = extern union {
    __data: struct___pthread_rwlock_arch_t,
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_rwlockattr_t = extern union {
    __size: [8]u8,
    __align: c_long,
};
pub const pthread_spinlock_t = c_int;
pub const pthread_barrier_t = extern union {
    __size: [32]u8,
    __align: c_long,
};
pub const pthread_barrierattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const socklen_t = __socklen_t;
pub const SOCK_STREAM: c_int = 1;
pub const SOCK_DGRAM: c_int = 2;
pub const SOCK_RAW: c_int = 3;
pub const SOCK_RDM: c_int = 4;
pub const SOCK_SEQPACKET: c_int = 5;
pub const SOCK_DCCP: c_int = 6;
pub const SOCK_PACKET: c_int = 10;
pub const SOCK_CLOEXEC: c_int = 524288;
pub const SOCK_NONBLOCK: c_int = 2048;
pub const enum___socket_type = c_uint;
pub const sa_family_t = c_ushort;
pub const struct_sockaddr = extern struct {
    sa_family: sa_family_t = @import("std").mem.zeroes(sa_family_t),
    sa_data: [14]u8 = @import("std").mem.zeroes([14]u8),
};
pub const struct_sockaddr_storage = extern struct {
    ss_family: sa_family_t = @import("std").mem.zeroes(sa_family_t),
    __ss_padding: [118]u8 = @import("std").mem.zeroes([118]u8),
    __ss_align: c_ulong = @import("std").mem.zeroes(c_ulong),
};
pub const MSG_OOB: c_int = 1;
pub const MSG_PEEK: c_int = 2;
pub const MSG_DONTROUTE: c_int = 4;
pub const MSG_CTRUNC: c_int = 8;
pub const MSG_PROXY: c_int = 16;
pub const MSG_TRUNC: c_int = 32;
pub const MSG_DONTWAIT: c_int = 64;
pub const MSG_EOR: c_int = 128;
pub const MSG_WAITALL: c_int = 256;
pub const MSG_FIN: c_int = 512;
pub const MSG_SYN: c_int = 1024;
pub const MSG_CONFIRM: c_int = 2048;
pub const MSG_RST: c_int = 4096;
pub const MSG_ERRQUEUE: c_int = 8192;
pub const MSG_NOSIGNAL: c_int = 16384;
pub const MSG_MORE: c_int = 32768;
pub const MSG_WAITFORONE: c_int = 65536;
pub const MSG_BATCH: c_int = 262144;
pub const MSG_ZEROCOPY: c_int = 67108864;
pub const MSG_FASTOPEN: c_int = 536870912;
pub const MSG_CMSG_CLOEXEC: c_int = 1073741824;
const enum_unnamed_2 = c_uint;
pub const struct_msghdr = extern struct {
    msg_name: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    msg_namelen: socklen_t = @import("std").mem.zeroes(socklen_t),
    msg_iov: [*c]struct_iovec = @import("std").mem.zeroes([*c]struct_iovec),
    msg_iovlen: usize = @import("std").mem.zeroes(usize),
    msg_control: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    msg_controllen: usize = @import("std").mem.zeroes(usize),
    msg_flags: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_cmsghdr = extern struct {
    cmsg_len: usize align(8) = @import("std").mem.zeroes(usize),
    cmsg_level: c_int = @import("std").mem.zeroes(c_int),
    cmsg_type: c_int = @import("std").mem.zeroes(c_int),
    pub fn __cmsg_data(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 16)));
    }
};
pub extern fn __cmsg_nxthdr(__mhdr: [*c]struct_msghdr, __cmsg: [*c]struct_cmsghdr) [*c]struct_cmsghdr;
pub const SCM_RIGHTS: c_int = 1;
const enum_unnamed_3 = c_uint;
pub const __kernel_fd_set = extern struct {
    fds_bits: [16]c_ulong = @import("std").mem.zeroes([16]c_ulong),
};
pub const __kernel_sighandler_t = ?*const fn (c_int) callconv(.c) void;
pub const __kernel_key_t = c_int;
pub const __kernel_mqd_t = c_int;
pub const __kernel_old_uid_t = c_ushort;
pub const __kernel_old_gid_t = c_ushort;
pub const __kernel_old_dev_t = c_ulong;
pub const __kernel_long_t = c_long;
pub const __kernel_ulong_t = c_ulong;
pub const __kernel_ino_t = __kernel_ulong_t;
pub const __kernel_mode_t = c_uint;
pub const __kernel_pid_t = c_int;
pub const __kernel_ipc_pid_t = c_int;
pub const __kernel_uid_t = c_uint;
pub const __kernel_gid_t = c_uint;
pub const __kernel_suseconds_t = __kernel_long_t;
pub const __kernel_daddr_t = c_int;
pub const __kernel_uid32_t = c_uint;
pub const __kernel_gid32_t = c_uint;
pub const __kernel_size_t = __kernel_ulong_t;
pub const __kernel_ssize_t = __kernel_long_t;
pub const __kernel_ptrdiff_t = __kernel_long_t;
pub const __kernel_fsid_t = extern struct {
    val: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub const __kernel_off_t = __kernel_long_t;
pub const __kernel_loff_t = c_longlong;
pub const __kernel_old_time_t = __kernel_long_t;
pub const __kernel_time_t = __kernel_long_t;
pub const __kernel_time64_t = c_longlong;
pub const __kernel_clock_t = __kernel_long_t;
pub const __kernel_timer_t = c_int;
pub const __kernel_clockid_t = c_int;
pub const __kernel_caddr_t = [*c]u8;
pub const __kernel_uid16_t = c_ushort;
pub const __kernel_gid16_t = c_ushort;
pub const struct_linger = extern struct {
    l_onoff: c_int = @import("std").mem.zeroes(c_int),
    l_linger: c_int = @import("std").mem.zeroes(c_int),
};
pub const struct_osockaddr = extern struct {
    sa_family: c_ushort = @import("std").mem.zeroes(c_ushort),
    sa_data: [14]u8 = @import("std").mem.zeroes([14]u8),
};
pub const SHUT_RD: c_int = 0;
pub const SHUT_WR: c_int = 1;
pub const SHUT_RDWR: c_int = 2;
const enum_unnamed_4 = c_uint;
pub extern fn socket(__domain: c_int, __type: c_int, __protocol: c_int) c_int;
pub extern fn socketpair(__domain: c_int, __type: c_int, __protocol: c_int, __fds: [*c]c_int) c_int;
pub extern fn bind(__fd: c_int, __addr: [*c]const struct_sockaddr, __len: socklen_t) c_int;
pub extern fn getsockname(__fd: c_int, noalias __addr: [*c]struct_sockaddr, noalias __len: [*c]socklen_t) c_int;
pub extern fn connect(__fd: c_int, __addr: [*c]const struct_sockaddr, __len: socklen_t) c_int;
pub extern fn getpeername(__fd: c_int, noalias __addr: [*c]struct_sockaddr, noalias __len: [*c]socklen_t) c_int;
pub extern fn send(__fd: c_int, __buf: ?*const anyopaque, __n: usize, __flags: c_int) isize;
pub extern fn recv(__fd: c_int, __buf: ?*anyopaque, __n: usize, __flags: c_int) isize;
pub extern fn sendto(__fd: c_int, __buf: ?*const anyopaque, __n: usize, __flags: c_int, __addr: [*c]const struct_sockaddr, __addr_len: socklen_t) isize;
pub extern fn recvfrom(__fd: c_int, noalias __buf: ?*anyopaque, __n: usize, __flags: c_int, noalias __addr: [*c]struct_sockaddr, noalias __addr_len: [*c]socklen_t) isize;
pub extern fn sendmsg(__fd: c_int, __message: [*c]const struct_msghdr, __flags: c_int) isize;
pub extern fn recvmsg(__fd: c_int, __message: [*c]struct_msghdr, __flags: c_int) isize;
pub extern fn getsockopt(__fd: c_int, __level: c_int, __optname: c_int, noalias __optval: ?*anyopaque, noalias __optlen: [*c]socklen_t) c_int;
pub extern fn setsockopt(__fd: c_int, __level: c_int, __optname: c_int, __optval: ?*const anyopaque, __optlen: socklen_t) c_int;
pub extern fn listen(__fd: c_int, __n: c_int) c_int;
pub extern fn accept(__fd: c_int, noalias __addr: [*c]struct_sockaddr, noalias __addr_len: [*c]socklen_t) c_int;
pub extern fn shutdown(__fd: c_int, __how: c_int) c_int;
pub extern fn sockatmark(__fd: c_int) c_int;
pub extern fn isfdtype(__fd: c_int, __fdtype: c_int) c_int;
pub const struct_stat = extern struct {
    st_dev: __dev_t = @import("std").mem.zeroes(__dev_t),
    st_ino: __ino_t = @import("std").mem.zeroes(__ino_t),
    st_nlink: __nlink_t = @import("std").mem.zeroes(__nlink_t),
    st_mode: __mode_t = @import("std").mem.zeroes(__mode_t),
    st_uid: __uid_t = @import("std").mem.zeroes(__uid_t),
    st_gid: __gid_t = @import("std").mem.zeroes(__gid_t),
    __pad0: c_int = @import("std").mem.zeroes(c_int),
    st_rdev: __dev_t = @import("std").mem.zeroes(__dev_t),
    st_size: __off_t = @import("std").mem.zeroes(__off_t),
    st_blksize: __blksize_t = @import("std").mem.zeroes(__blksize_t),
    st_blocks: __blkcnt_t = @import("std").mem.zeroes(__blkcnt_t),
    st_atim: struct_timespec = @import("std").mem.zeroes(struct_timespec),
    st_mtim: struct_timespec = @import("std").mem.zeroes(struct_timespec),
    st_ctim: struct_timespec = @import("std").mem.zeroes(struct_timespec),
    __glibc_reserved: [3]__syscall_slong_t = @import("std").mem.zeroes([3]__syscall_slong_t),
};
pub extern fn stat(noalias __file: [*c]const u8, noalias __buf: [*c]struct_stat) c_int;
pub extern fn fstat(__fd: c_int, __buf: [*c]struct_stat) c_int;
pub extern fn fstatat(__fd: c_int, noalias __file: [*c]const u8, noalias __buf: [*c]struct_stat, __flag: c_int) c_int;
pub extern fn lstat(noalias __file: [*c]const u8, noalias __buf: [*c]struct_stat) c_int;
pub extern fn chmod(__file: [*c]const u8, __mode: __mode_t) c_int;
pub extern fn lchmod(__file: [*c]const u8, __mode: __mode_t) c_int;
pub extern fn fchmod(__fd: c_int, __mode: __mode_t) c_int;
pub extern fn fchmodat(__fd: c_int, __file: [*c]const u8, __mode: __mode_t, __flag: c_int) c_int;
pub extern fn umask(__mask: __mode_t) __mode_t;
pub extern fn mkdir(__path: [*c]const u8, __mode: __mode_t) c_int;
pub extern fn mkdirat(__fd: c_int, __path: [*c]const u8, __mode: __mode_t) c_int;
pub extern fn mknod(__path: [*c]const u8, __mode: __mode_t, __dev: __dev_t) c_int;
pub extern fn mknodat(__fd: c_int, __path: [*c]const u8, __mode: __mode_t, __dev: __dev_t) c_int;
pub extern fn mkfifo(__path: [*c]const u8, __mode: __mode_t) c_int;
pub extern fn mkfifoat(__fd: c_int, __path: [*c]const u8, __mode: __mode_t) c_int;
pub extern fn utimensat(__fd: c_int, __path: [*c]const u8, __times: [*c]const struct_timespec, __flags: c_int) c_int;
pub extern fn futimens(__fd: c_int, __times: [*c]const struct_timespec) c_int;
pub extern fn readv(__fd: c_int, __iovec: [*c]const struct_iovec, __count: c_int) isize;
pub extern fn writev(__fd: c_int, __iovec: [*c]const struct_iovec, __count: c_int) isize;
pub extern fn preadv(__fd: c_int, __iovec: [*c]const struct_iovec, __count: c_int, __offset: __off_t) isize;
pub extern fn pwritev(__fd: c_int, __iovec: [*c]const struct_iovec, __count: c_int, __offset: __off_t) isize;
pub extern fn __errno_location() [*c]c_int;
pub const sig_atomic_t = __sig_atomic_t;
pub const union_sigval = extern union {
    sival_int: c_int,
    sival_ptr: ?*anyopaque,
};
pub const __sigval_t = union_sigval;
const struct_unnamed_6 = extern struct {
    si_pid: __pid_t = @import("std").mem.zeroes(__pid_t),
    si_uid: __uid_t = @import("std").mem.zeroes(__uid_t),
};
const struct_unnamed_7 = extern struct {
    si_tid: c_int = @import("std").mem.zeroes(c_int),
    si_overrun: c_int = @import("std").mem.zeroes(c_int),
    si_sigval: __sigval_t = @import("std").mem.zeroes(__sigval_t),
};
const struct_unnamed_8 = extern struct {
    si_pid: __pid_t = @import("std").mem.zeroes(__pid_t),
    si_uid: __uid_t = @import("std").mem.zeroes(__uid_t),
    si_sigval: __sigval_t = @import("std").mem.zeroes(__sigval_t),
};
const struct_unnamed_9 = extern struct {
    si_pid: __pid_t = @import("std").mem.zeroes(__pid_t),
    si_uid: __uid_t = @import("std").mem.zeroes(__uid_t),
    si_status: c_int = @import("std").mem.zeroes(c_int),
    si_utime: __clock_t = @import("std").mem.zeroes(__clock_t),
    si_stime: __clock_t = @import("std").mem.zeroes(__clock_t),
};
const struct_unnamed_12 = extern struct {
    _lower: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    _upper: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
const union_unnamed_11 = extern union {
    _addr_bnd: struct_unnamed_12,
    _pkey: __uint32_t,
};
const struct_unnamed_10 = extern struct {
    si_addr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    si_addr_lsb: c_short = @import("std").mem.zeroes(c_short),
    _bounds: union_unnamed_11 = @import("std").mem.zeroes(union_unnamed_11),
};
const struct_unnamed_13 = extern struct {
    si_band: c_long = @import("std").mem.zeroes(c_long),
    si_fd: c_int = @import("std").mem.zeroes(c_int),
};
const struct_unnamed_14 = extern struct {
    _call_addr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    _syscall: c_int = @import("std").mem.zeroes(c_int),
    _arch: c_uint = @import("std").mem.zeroes(c_uint),
};
const union_unnamed_5 = extern union {
    _pad: [28]c_int,
    _kill: struct_unnamed_6,
    _timer: struct_unnamed_7,
    _rt: struct_unnamed_8,
    _sigchld: struct_unnamed_9,
    _sigfault: struct_unnamed_10,
    _sigpoll: struct_unnamed_13,
    _sigsys: struct_unnamed_14,
};
pub const siginfo_t = extern struct {
    si_signo: c_int = @import("std").mem.zeroes(c_int),
    si_errno: c_int = @import("std").mem.zeroes(c_int),
    si_code: c_int = @import("std").mem.zeroes(c_int),
    __pad0: c_int = @import("std").mem.zeroes(c_int),
    _sifields: union_unnamed_5 = @import("std").mem.zeroes(union_unnamed_5),
};
pub const SI_ASYNCNL: c_int = -60;
pub const SI_DETHREAD: c_int = -7;
pub const SI_TKILL: c_int = -6;
pub const SI_SIGIO: c_int = -5;
pub const SI_ASYNCIO: c_int = -4;
pub const SI_MESGQ: c_int = -3;
pub const SI_TIMER: c_int = -2;
pub const SI_QUEUE: c_int = -1;
pub const SI_USER: c_int = 0;
pub const SI_KERNEL: c_int = 128;
const enum_unnamed_15 = c_int;
pub const ILL_ILLOPC: c_int = 1;
pub const ILL_ILLOPN: c_int = 2;
pub const ILL_ILLADR: c_int = 3;
pub const ILL_ILLTRP: c_int = 4;
pub const ILL_PRVOPC: c_int = 5;
pub const ILL_PRVREG: c_int = 6;
pub const ILL_COPROC: c_int = 7;
pub const ILL_BADSTK: c_int = 8;
pub const ILL_BADIADDR: c_int = 9;
const enum_unnamed_16 = c_uint;
pub const FPE_INTDIV: c_int = 1;
pub const FPE_INTOVF: c_int = 2;
pub const FPE_FLTDIV: c_int = 3;
pub const FPE_FLTOVF: c_int = 4;
pub const FPE_FLTUND: c_int = 5;
pub const FPE_FLTRES: c_int = 6;
pub const FPE_FLTINV: c_int = 7;
pub const FPE_FLTSUB: c_int = 8;
pub const FPE_FLTUNK: c_int = 14;
pub const FPE_CONDTRAP: c_int = 15;
const enum_unnamed_17 = c_uint;
pub const SEGV_MAPERR: c_int = 1;
pub const SEGV_ACCERR: c_int = 2;
pub const SEGV_BNDERR: c_int = 3;
pub const SEGV_PKUERR: c_int = 4;
pub const SEGV_ACCADI: c_int = 5;
pub const SEGV_ADIDERR: c_int = 6;
pub const SEGV_ADIPERR: c_int = 7;
pub const SEGV_MTEAERR: c_int = 8;
pub const SEGV_MTESERR: c_int = 9;
pub const SEGV_CPERR: c_int = 10;
const enum_unnamed_18 = c_uint;
pub const BUS_ADRALN: c_int = 1;
pub const BUS_ADRERR: c_int = 2;
pub const BUS_OBJERR: c_int = 3;
pub const BUS_MCEERR_AR: c_int = 4;
pub const BUS_MCEERR_AO: c_int = 5;
const enum_unnamed_19 = c_uint;
pub const CLD_EXITED: c_int = 1;
pub const CLD_KILLED: c_int = 2;
pub const CLD_DUMPED: c_int = 3;
pub const CLD_TRAPPED: c_int = 4;
pub const CLD_STOPPED: c_int = 5;
pub const CLD_CONTINUED: c_int = 6;
const enum_unnamed_20 = c_uint;
pub const POLL_IN: c_int = 1;
pub const POLL_OUT: c_int = 2;
pub const POLL_MSG: c_int = 3;
pub const POLL_ERR: c_int = 4;
pub const POLL_PRI: c_int = 5;
pub const POLL_HUP: c_int = 6;
const enum_unnamed_21 = c_uint;
pub const sigval_t = __sigval_t;
const struct_unnamed_23 = extern struct {
    _function: ?*const fn (__sigval_t) callconv(.c) void = @import("std").mem.zeroes(?*const fn (__sigval_t) callconv(.c) void),
    _attribute: [*c]pthread_attr_t = @import("std").mem.zeroes([*c]pthread_attr_t),
};
const union_unnamed_22 = extern union {
    _pad: [12]c_int,
    _tid: __pid_t,
    _sigev_thread: struct_unnamed_23,
};
pub const struct_sigevent = extern struct {
    sigev_value: __sigval_t = @import("std").mem.zeroes(__sigval_t),
    sigev_signo: c_int = @import("std").mem.zeroes(c_int),
    sigev_notify: c_int = @import("std").mem.zeroes(c_int),
    _sigev_un: union_unnamed_22 = @import("std").mem.zeroes(union_unnamed_22),
};
pub const sigevent_t = struct_sigevent;
pub const SIGEV_SIGNAL: c_int = 0;
pub const SIGEV_NONE: c_int = 1;
pub const SIGEV_THREAD: c_int = 2;
pub const SIGEV_THREAD_ID: c_int = 4;
const enum_unnamed_24 = c_uint;
pub const __sighandler_t = ?*const fn (c_int) callconv(.c) void;
pub extern fn __sysv_signal(__sig: c_int, __handler: __sighandler_t) __sighandler_t;
pub extern fn signal(__sig: c_int, __handler: __sighandler_t) __sighandler_t;
pub extern fn kill(__pid: __pid_t, __sig: c_int) c_int;
pub extern fn killpg(__pgrp: __pid_t, __sig: c_int) c_int;
pub extern fn raise(__sig: c_int) c_int;
pub extern fn ssignal(__sig: c_int, __handler: __sighandler_t) __sighandler_t;
pub extern fn gsignal(__sig: c_int) c_int;
pub extern fn psignal(__sig: c_int, __s: [*c]const u8) void;
pub extern fn psiginfo(__pinfo: [*c]const siginfo_t, __s: [*c]const u8) void;
pub extern fn sigblock(__mask: c_int) c_int;
pub extern fn sigsetmask(__mask: c_int) c_int;
pub extern fn siggetmask() c_int;
pub const sig_t = __sighandler_t;
pub extern fn sigemptyset(__set: [*c]sigset_t) c_int;
pub extern fn sigfillset(__set: [*c]sigset_t) c_int;
pub extern fn sigaddset(__set: [*c]sigset_t, __signo: c_int) c_int;
pub extern fn sigdelset(__set: [*c]sigset_t, __signo: c_int) c_int;
pub extern fn sigismember(__set: [*c]const sigset_t, __signo: c_int) c_int;
const union_unnamed_25 = extern union {
    sa_handler: __sighandler_t,
    sa_sigaction: ?*const fn (c_int, [*c]siginfo_t, ?*anyopaque) callconv(.c) void,
};
pub const struct_sigaction = extern struct {
    __sigaction_handler: union_unnamed_25 = @import("std").mem.zeroes(union_unnamed_25),
    sa_mask: __sigset_t = @import("std").mem.zeroes(__sigset_t),
    sa_flags: c_int = @import("std").mem.zeroes(c_int),
    sa_restorer: ?*const fn () callconv(.c) void = @import("std").mem.zeroes(?*const fn () callconv(.c) void),
};
pub extern fn sigprocmask(__how: c_int, noalias __set: [*c]const sigset_t, noalias __oset: [*c]sigset_t) c_int;
pub extern fn sigsuspend(__set: [*c]const sigset_t) c_int;
pub extern fn sigaction(__sig: c_int, noalias __act: [*c]const struct_sigaction, noalias __oact: [*c]struct_sigaction) c_int;
pub extern fn sigpending(__set: [*c]sigset_t) c_int;
pub extern fn sigwait(noalias __set: [*c]const sigset_t, noalias __sig: [*c]c_int) c_int;
pub extern fn sigwaitinfo(noalias __set: [*c]const sigset_t, noalias __info: [*c]siginfo_t) c_int;
pub extern fn sigtimedwait(noalias __set: [*c]const sigset_t, noalias __info: [*c]siginfo_t, noalias __timeout: [*c]const struct_timespec) c_int;
pub extern fn sigqueue(__pid: __pid_t, __sig: c_int, __val: union_sigval) c_int;
pub const struct__fpx_sw_bytes = extern struct {
    magic1: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    extended_size: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    xstate_bv: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    xstate_size: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    __glibc_reserved1: [7]__uint32_t = @import("std").mem.zeroes([7]__uint32_t),
};
pub const struct__fpreg = extern struct {
    significand: [4]c_ushort = @import("std").mem.zeroes([4]c_ushort),
    exponent: c_ushort = @import("std").mem.zeroes(c_ushort),
};
pub const struct__fpxreg = extern struct {
    significand: [4]c_ushort = @import("std").mem.zeroes([4]c_ushort),
    exponent: c_ushort = @import("std").mem.zeroes(c_ushort),
    __glibc_reserved1: [3]c_ushort = @import("std").mem.zeroes([3]c_ushort),
};
pub const struct__xmmreg = extern struct {
    element: [4]__uint32_t = @import("std").mem.zeroes([4]__uint32_t),
};
pub const struct__fpstate = extern struct {
    cwd: __uint16_t = @import("std").mem.zeroes(__uint16_t),
    swd: __uint16_t = @import("std").mem.zeroes(__uint16_t),
    ftw: __uint16_t = @import("std").mem.zeroes(__uint16_t),
    fop: __uint16_t = @import("std").mem.zeroes(__uint16_t),
    rip: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rdp: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    mxcsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    mxcr_mask: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    _st: [8]struct__fpxreg = @import("std").mem.zeroes([8]struct__fpxreg),
    _xmm: [16]struct__xmmreg = @import("std").mem.zeroes([16]struct__xmmreg),
    __glibc_reserved1: [24]__uint32_t = @import("std").mem.zeroes([24]__uint32_t),
};
const union_unnamed_26 = extern union {
    fpstate: [*c]struct__fpstate,
    __fpstate_word: __uint64_t,
};
pub const struct_sigcontext = extern struct {
    r8: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    r9: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    r10: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    r11: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    r12: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    r13: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    r14: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    r15: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rdi: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rsi: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rbp: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rbx: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rdx: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rax: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rcx: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rsp: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rip: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    eflags: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    cs: c_ushort = @import("std").mem.zeroes(c_ushort),
    gs: c_ushort = @import("std").mem.zeroes(c_ushort),
    fs: c_ushort = @import("std").mem.zeroes(c_ushort),
    __pad0: c_ushort = @import("std").mem.zeroes(c_ushort),
    err: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    trapno: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    oldmask: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    cr2: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    unnamed_0: union_unnamed_26 = @import("std").mem.zeroes(union_unnamed_26),
    __reserved1: [8]__uint64_t = @import("std").mem.zeroes([8]__uint64_t),
};
pub const struct__xsave_hdr = extern struct {
    xstate_bv: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    __glibc_reserved1: [2]__uint64_t = @import("std").mem.zeroes([2]__uint64_t),
    __glibc_reserved2: [5]__uint64_t = @import("std").mem.zeroes([5]__uint64_t),
};
pub const struct__ymmh_state = extern struct {
    ymmh_space: [64]__uint32_t = @import("std").mem.zeroes([64]__uint32_t),
};
pub const struct__xstate = extern struct {
    fpstate: struct__fpstate = @import("std").mem.zeroes(struct__fpstate),
    xstate_hdr: struct__xsave_hdr = @import("std").mem.zeroes(struct__xsave_hdr),
    ymmh: struct__ymmh_state = @import("std").mem.zeroes(struct__ymmh_state),
};
pub extern fn sigreturn(__scp: [*c]struct_sigcontext) c_int;
pub const stack_t = extern struct {
    ss_sp: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ss_flags: c_int = @import("std").mem.zeroes(c_int),
    ss_size: usize = @import("std").mem.zeroes(usize),
};
pub const greg_t = c_longlong;
pub const gregset_t = [23]greg_t;
pub const struct__libc_fpxreg = extern struct {
    significand: [4]c_ushort = @import("std").mem.zeroes([4]c_ushort),
    exponent: c_ushort = @import("std").mem.zeroes(c_ushort),
    __glibc_reserved1: [3]c_ushort = @import("std").mem.zeroes([3]c_ushort),
};
pub const struct__libc_xmmreg = extern struct {
    element: [4]__uint32_t = @import("std").mem.zeroes([4]__uint32_t),
};
pub const struct__libc_fpstate = extern struct {
    cwd: __uint16_t = @import("std").mem.zeroes(__uint16_t),
    swd: __uint16_t = @import("std").mem.zeroes(__uint16_t),
    ftw: __uint16_t = @import("std").mem.zeroes(__uint16_t),
    fop: __uint16_t = @import("std").mem.zeroes(__uint16_t),
    rip: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    rdp: __uint64_t = @import("std").mem.zeroes(__uint64_t),
    mxcsr: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    mxcr_mask: __uint32_t = @import("std").mem.zeroes(__uint32_t),
    _st: [8]struct__libc_fpxreg = @import("std").mem.zeroes([8]struct__libc_fpxreg),
    _xmm: [16]struct__libc_xmmreg = @import("std").mem.zeroes([16]struct__libc_xmmreg),
    __glibc_reserved1: [24]__uint32_t = @import("std").mem.zeroes([24]__uint32_t),
};
pub const fpregset_t = [*c]struct__libc_fpstate;
pub const mcontext_t = extern struct {
    gregs: gregset_t = @import("std").mem.zeroes(gregset_t),
    fpregs: fpregset_t = @import("std").mem.zeroes(fpregset_t),
    __reserved1: [8]c_ulonglong = @import("std").mem.zeroes([8]c_ulonglong),
};
pub const struct_ucontext_t = extern struct {
    uc_flags: c_ulong = @import("std").mem.zeroes(c_ulong),
    uc_link: [*c]struct_ucontext_t = @import("std").mem.zeroes([*c]struct_ucontext_t),
    uc_stack: stack_t = @import("std").mem.zeroes(stack_t),
    uc_mcontext: mcontext_t = @import("std").mem.zeroes(mcontext_t),
    uc_sigmask: sigset_t = @import("std").mem.zeroes(sigset_t),
    __fpregs_mem: struct__libc_fpstate = @import("std").mem.zeroes(struct__libc_fpstate),
    __ssp: [4]c_ulonglong = @import("std").mem.zeroes([4]c_ulonglong),
};
pub const ucontext_t = struct_ucontext_t;
pub extern fn siginterrupt(__sig: c_int, __interrupt: c_int) c_int;
pub const SS_ONSTACK: c_int = 1;
pub const SS_DISABLE: c_int = 2;
const enum_unnamed_27 = c_uint;
pub extern fn sigaltstack(noalias __ss: [*c]const stack_t, noalias __oss: [*c]stack_t) c_int;
pub const struct_sigstack = extern struct {
    ss_sp: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ss_onstack: c_int = @import("std").mem.zeroes(c_int),
};
pub extern fn sigstack(__ss: [*c]struct_sigstack, __oss: [*c]struct_sigstack) c_int;
pub extern fn pthread_sigmask(__how: c_int, noalias __newmask: [*c]const __sigset_t, noalias __oldmask: [*c]__sigset_t) c_int;
pub extern fn pthread_kill(__threadid: pthread_t, __signo: c_int) c_int;
pub extern fn __libc_current_sigrtmin() c_int;
pub extern fn __libc_current_sigrtmax() c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const __gwchar_t = c_int;
pub const imaxdiv_t = extern struct {
    quot: c_long = @import("std").mem.zeroes(c_long),
    rem: c_long = @import("std").mem.zeroes(c_long),
};
pub extern fn imaxabs(__n: intmax_t) intmax_t;
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) intmax_t;
pub extern fn strtoumax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int) intmax_t;
pub extern fn wcstoumax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int) uintmax_t;
pub const struct_tm = extern struct {
    tm_sec: c_int = @import("std").mem.zeroes(c_int),
    tm_min: c_int = @import("std").mem.zeroes(c_int),
    tm_hour: c_int = @import("std").mem.zeroes(c_int),
    tm_mday: c_int = @import("std").mem.zeroes(c_int),
    tm_mon: c_int = @import("std").mem.zeroes(c_int),
    tm_year: c_int = @import("std").mem.zeroes(c_int),
    tm_wday: c_int = @import("std").mem.zeroes(c_int),
    tm_yday: c_int = @import("std").mem.zeroes(c_int),
    tm_isdst: c_int = @import("std").mem.zeroes(c_int),
    tm_gmtoff: c_long = @import("std").mem.zeroes(c_long),
    tm_zone: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const struct_itimerspec = extern struct {
    it_interval: struct_timespec = @import("std").mem.zeroes(struct_timespec),
    it_value: struct_timespec = @import("std").mem.zeroes(struct_timespec),
};
pub const struct___locale_data_28 = opaque {};
pub const struct___locale_struct = extern struct {
    __locales: [13]?*struct___locale_data_28 = @import("std").mem.zeroes([13]?*struct___locale_data_28),
    __ctype_b: [*c]const c_ushort = @import("std").mem.zeroes([*c]const c_ushort),
    __ctype_tolower: [*c]const c_int = @import("std").mem.zeroes([*c]const c_int),
    __ctype_toupper: [*c]const c_int = @import("std").mem.zeroes([*c]const c_int),
    __names: [13][*c]const u8 = @import("std").mem.zeroes([13][*c]const u8),
};
pub const __locale_t = [*c]struct___locale_struct;
pub const locale_t = __locale_t;
pub extern fn clock() clock_t;
pub extern fn time(__timer: [*c]time_t) time_t;
pub extern fn difftime(__time1: time_t, __time0: time_t) f64;
pub extern fn mktime(__tp: [*c]struct_tm) time_t;
pub extern fn strftime(noalias __s: [*c]u8, __maxsize: usize, noalias __format: [*c]const u8, noalias __tp: [*c]const struct_tm) usize;
pub extern fn strftime_l(noalias __s: [*c]u8, __maxsize: usize, noalias __format: [*c]const u8, noalias __tp: [*c]const struct_tm, __loc: locale_t) usize;
pub extern fn gmtime(__timer: [*c]const time_t) [*c]struct_tm;
pub extern fn localtime(__timer: [*c]const time_t) [*c]struct_tm;
pub extern fn gmtime_r(noalias __timer: [*c]const time_t, noalias __tp: [*c]struct_tm) [*c]struct_tm;
pub extern fn localtime_r(noalias __timer: [*c]const time_t, noalias __tp: [*c]struct_tm) [*c]struct_tm;
pub extern fn asctime(__tp: [*c]const struct_tm) [*c]u8;
pub extern fn ctime(__timer: [*c]const time_t) [*c]u8;
pub extern fn asctime_r(noalias __tp: [*c]const struct_tm, noalias __buf: [*c]u8) [*c]u8;
pub extern fn ctime_r(noalias __timer: [*c]const time_t, noalias __buf: [*c]u8) [*c]u8;
pub extern var __tzname: [2][*c]u8;
pub extern var __daylight: c_int;
pub extern var __timezone: c_long;
pub extern var tzname: [2][*c]u8;
pub extern fn tzset() void;
pub extern var daylight: c_int;
pub extern var timezone: c_long;
pub extern fn timegm(__tp: [*c]struct_tm) time_t;
pub extern fn timelocal(__tp: [*c]struct_tm) time_t;
pub extern fn dysize(__year: c_int) c_int;
pub extern fn nanosleep(__requested_time: [*c]const struct_timespec, __remaining: [*c]struct_timespec) c_int;
pub extern fn clock_getres(__clock_id: clockid_t, __res: [*c]struct_timespec) c_int;
pub extern fn clock_gettime(__clock_id: clockid_t, __tp: [*c]struct_timespec) c_int;
pub extern fn clock_settime(__clock_id: clockid_t, __tp: [*c]const struct_timespec) c_int;
pub extern fn clock_nanosleep(__clock_id: clockid_t, __flags: c_int, __req: [*c]const struct_timespec, __rem: [*c]struct_timespec) c_int;
pub extern fn clock_getcpuclockid(__pid: pid_t, __clock_id: [*c]clockid_t) c_int;
pub extern fn timer_create(__clock_id: clockid_t, noalias __evp: [*c]struct_sigevent, noalias __timerid: [*c]timer_t) c_int;
pub extern fn timer_delete(__timerid: timer_t) c_int;
pub extern fn timer_settime(__timerid: timer_t, __flags: c_int, noalias __value: [*c]const struct_itimerspec, noalias __ovalue: [*c]struct_itimerspec) c_int;
pub extern fn timer_gettime(__timerid: timer_t, __value: [*c]struct_itimerspec) c_int;
pub extern fn timer_getoverrun(__timerid: timer_t) c_int;
pub extern fn timespec_get(__ts: [*c]struct_timespec, __base: c_int) c_int;
pub const struct_flock = extern struct {
    l_type: c_short = @import("std").mem.zeroes(c_short),
    l_whence: c_short = @import("std").mem.zeroes(c_short),
    l_start: __off_t = @import("std").mem.zeroes(__off_t),
    l_len: __off_t = @import("std").mem.zeroes(__off_t),
    l_pid: __pid_t = @import("std").mem.zeroes(__pid_t),
};
pub extern fn fcntl(__fd: c_int, __cmd: c_int, ...) c_int;
pub extern fn open(__file: [*c]const u8, __oflag: c_int, ...) c_int;
pub extern fn openat(__fd: c_int, __file: [*c]const u8, __oflag: c_int, ...) c_int;
pub extern fn creat(__file: [*c]const u8, __mode: mode_t) c_int;
pub extern fn lockf(__fd: c_int, __cmd: c_int, __len: off_t) c_int;
pub extern fn posix_fadvise(__fd: c_int, __offset: off_t, __len: off_t, __advise: c_int) c_int;
pub extern fn posix_fallocate(__fd: c_int, __offset: off_t, __len: off_t) c_int;
pub const struct_sched_param = extern struct {
    sched_priority: c_int = @import("std").mem.zeroes(c_int),
};
pub const __cpu_mask = c_ulong;
pub const cpu_set_t = extern struct {
    __bits: [16]__cpu_mask = @import("std").mem.zeroes([16]__cpu_mask),
};
pub extern fn __sched_cpucount(__setsize: usize, __setp: [*c]const cpu_set_t) c_int;
pub extern fn __sched_cpualloc(__count: usize) [*c]cpu_set_t;
pub extern fn __sched_cpufree(__set: [*c]cpu_set_t) void;
pub extern fn sched_setparam(__pid: __pid_t, __param: [*c]const struct_sched_param) c_int;
pub extern fn sched_getparam(__pid: __pid_t, __param: [*c]struct_sched_param) c_int;
pub extern fn sched_setscheduler(__pid: __pid_t, __policy: c_int, __param: [*c]const struct_sched_param) c_int;
pub extern fn sched_getscheduler(__pid: __pid_t) c_int;
pub extern fn sched_yield() c_int;
pub extern fn sched_get_priority_max(__algorithm: c_int) c_int;
pub extern fn sched_get_priority_min(__algorithm: c_int) c_int;
pub extern fn sched_rr_get_interval(__pid: __pid_t, __t: [*c]struct_timespec) c_int;
pub const __s8 = i8;
pub const __u8 = u8;
pub const __s16 = c_short;
pub const __u16 = c_ushort;
pub const __s32 = c_int;
pub const __u32 = c_uint;
pub const __s64 = c_longlong;
pub const __u64 = c_ulonglong;
pub const __s128 = i128;
pub const __u128 = u128;
pub const __le16 = __u16;
pub const __be16 = __u16;
pub const __le32 = __u32;
pub const __be32 = __u32;
pub const __le64 = __u64;
pub const __be64 = __u64;
pub const __sum16 = __u16;
pub const __wsum = __u32;
pub const __poll_t = c_uint;
// /usr/include/x86_64-linux-gnu/asm/swab.h:10:2: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /usr/include/x86_64-linux-gnu/asm/swab.h:8:26: warning: unable to translate function, demoted to extern
pub extern fn __arch_swab32(arg_val: __u32) callconv(.c) __u32;
// /usr/include/x86_64-linux-gnu/asm/swab.h:31:2: warning: TODO implement translation of stmt class GCCAsmStmtClass

// /usr/include/x86_64-linux-gnu/asm/swab.h:15:26: warning: unable to translate function, demoted to extern
pub extern fn __arch_swab64(arg_val: __u64) callconv(.c) __u64;
pub fn __fswab16(arg_val: __u16) callconv(.c) __u16 {
    var val = arg_val;
    _ = &val;
    return @as(__u16, @bitCast(@as(c_short, @truncate(((@as(c_int, @bitCast(@as(c_uint, val))) & @as(c_int, @bitCast(@as(c_uint, @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 255))))))))) << @intCast(8)) | ((@as(c_int, @bitCast(@as(c_uint, val))) & @as(c_int, @bitCast(@as(c_uint, @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 65280))))))))) >> @intCast(8))))));
}
pub fn __fswab32(arg_val: __u32) callconv(.c) __u32 {
    var val = arg_val;
    _ = &val;
    return __arch_swab32(val);
}
pub fn __fswab64(arg_val: __u64) callconv(.c) __u64 {
    var val = arg_val;
    _ = &val;
    return __arch_swab64(val);
}
pub fn __fswahw32(arg_val: __u32) callconv(.c) __u32 {
    var val = arg_val;
    _ = &val;
    return ((val & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 65535)))))) << @intCast(16)) | ((val & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 4294901760)))))) >> @intCast(16));
}
pub fn __fswahb32(arg_val: __u32) callconv(.c) __u32 {
    var val = arg_val;
    _ = &val;
    return ((val & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 16711935)))))) << @intCast(8)) | ((val & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 4278255360)))))) >> @intCast(8));
}
pub inline fn __swab(y: c_ulong) c_ulong {
    _ = &y;
    return @as(c_ulong, @bitCast(@as(c_ulong, @truncate(if (__builtin_constant_p(y) != 0) ((((((((@as(__u64, @bitCast(@as(c_ulonglong, y))) & @as(__u64, @bitCast(@as(c_ulonglong, 255)))) << @intCast(56)) | ((@as(__u64, @bitCast(@as(c_ulonglong, y))) & @as(__u64, @bitCast(@as(c_ulonglong, 65280)))) << @intCast(40))) | ((@as(__u64, @bitCast(@as(c_ulonglong, y))) & @as(__u64, @bitCast(@as(c_ulonglong, 16711680)))) << @intCast(24))) | ((@as(__u64, @bitCast(@as(c_ulonglong, y))) & @as(__u64, @bitCast(@as(c_ulonglong, 4278190080)))) << @intCast(8))) | ((@as(__u64, @bitCast(@as(c_ulonglong, y))) & @as(__u64, @bitCast(@as(c_ulonglong, 1095216660480)))) >> @intCast(8))) | ((@as(__u64, @bitCast(@as(c_ulonglong, y))) & @as(__u64, @bitCast(@as(c_ulonglong, 280375465082880)))) >> @intCast(24))) | ((@as(__u64, @bitCast(@as(c_ulonglong, y))) & @as(__u64, @bitCast(@as(c_ulonglong, 71776119061217280)))) >> @intCast(40))) | ((@as(__u64, @bitCast(@as(c_ulonglong, y))) & @as(__u64, @bitCast(@as(c_ulonglong, 18374686479671623680)))) >> @intCast(56)) else __fswab64(@as(__u64, @bitCast(@as(c_ulonglong, y))))))));
}
pub inline fn __swab16p(arg_p: [*c]const __u16) __u16 {
    var p = arg_p;
    _ = &p;
    return @as(__u16, @bitCast(@as(c_short, @truncate(if (__builtin_constant_p(p.*) != 0) @as(c_int, @bitCast(@as(c_uint, @as(__u16, @bitCast(@as(c_short, @truncate(((@as(c_int, @bitCast(@as(c_uint, p.*))) & @as(c_int, @bitCast(@as(c_uint, @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 255))))))))) << @intCast(8)) | ((@as(c_int, @bitCast(@as(c_uint, p.*))) & @as(c_int, @bitCast(@as(c_uint, @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 65280))))))))) >> @intCast(8))))))))) else @as(c_int, @bitCast(@as(c_uint, __fswab16(p.*))))))));
}
pub inline fn __swab32p(arg_p: [*c]const __u32) __u32 {
    var p = arg_p;
    _ = &p;
    return if (__builtin_constant_p(p.*) != 0) ((((p.* & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 255)))))) << @intCast(24)) | ((p.* & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 65280)))))) << @intCast(8))) | ((p.* & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 16711680)))))) >> @intCast(8))) | ((p.* & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 4278190080)))))) >> @intCast(24)) else __fswab32(p.*);
}
pub inline fn __swab64p(arg_p: [*c]const __u64) __u64 {
    var p = arg_p;
    _ = &p;
    return if (__builtin_constant_p(p.*) != 0) ((((((((p.* & @as(__u64, @bitCast(@as(c_ulonglong, 255)))) << @intCast(56)) | ((p.* & @as(__u64, @bitCast(@as(c_ulonglong, 65280)))) << @intCast(40))) | ((p.* & @as(__u64, @bitCast(@as(c_ulonglong, 16711680)))) << @intCast(24))) | ((p.* & @as(__u64, @bitCast(@as(c_ulonglong, 4278190080)))) << @intCast(8))) | ((p.* & @as(__u64, @bitCast(@as(c_ulonglong, 1095216660480)))) >> @intCast(8))) | ((p.* & @as(__u64, @bitCast(@as(c_ulonglong, 280375465082880)))) >> @intCast(24))) | ((p.* & @as(__u64, @bitCast(@as(c_ulonglong, 71776119061217280)))) >> @intCast(40))) | ((p.* & @as(__u64, @bitCast(@as(c_ulonglong, 18374686479671623680)))) >> @intCast(56)) else __fswab64(p.*);
}
pub fn __swahw32p(arg_p: [*c]const __u32) callconv(.c) __u32 {
    var p = arg_p;
    _ = &p;
    return if (__builtin_constant_p(p.*) != 0) ((p.* & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 65535)))))) << @intCast(16)) | ((p.* & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 4294901760)))))) >> @intCast(16)) else __fswahw32(p.*);
}
pub fn __swahb32p(arg_p: [*c]const __u32) callconv(.c) __u32 {
    var p = arg_p;
    _ = &p;
    return if (__builtin_constant_p(p.*) != 0) ((p.* & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 16711935)))))) << @intCast(8)) | ((p.* & @as(__u32, @bitCast(@as(c_uint, @truncate(@as(c_ulong, 4278255360)))))) >> @intCast(8)) else __fswahb32(p.*);
}
pub fn __swab16s(arg_p: [*c]__u16) callconv(.c) void {
    var p = arg_p;
    _ = &p;
    p.* = __swab16p(p);
}
pub inline fn __swab32s(arg_p: [*c]__u32) void {
    var p = arg_p;
    _ = &p;
    p.* = __swab32p(p);
}
pub inline fn __swab64s(arg_p: [*c]__u64) void {
    var p = arg_p;
    _ = &p;
    p.* = __swab64p(p);
}
pub fn __swahw32s(arg_p: [*c]__u32) callconv(.c) void {
    var p = arg_p;
    _ = &p;
    p.* = __swahw32p(p);
}
pub fn __swahb32s(arg_p: [*c]__u32) callconv(.c) void {
    var p = arg_p;
    _ = &p;
    p.* = __swahb32p(p);
}
pub const P_ALL: c_int = 0;
pub const P_PID: c_int = 1;
pub const P_PGID: c_int = 2;
pub const P_PIDFD: c_int = 3;
pub const idtype_t = c_uint;
pub extern fn wait(__stat_loc: [*c]c_int) __pid_t;
pub extern fn waitpid(__pid: __pid_t, __stat_loc: [*c]c_int, __options: c_int) __pid_t;
pub extern fn waitid(__idtype: idtype_t, __id: __id_t, __infop: [*c]siginfo_t, __options: c_int) c_int;
pub const struct_rusage = opaque {};
pub extern fn wait3(__stat_loc: [*c]c_int, __options: c_int, __usage: ?*struct_rusage) __pid_t;
pub extern fn wait4(__pid: __pid_t, __stat_loc: [*c]c_int, __options: c_int, __usage: ?*struct_rusage) __pid_t;
pub const struct___kernel_timespec = extern struct {
    tv_sec: __kernel_time64_t = @import("std").mem.zeroes(__kernel_time64_t),
    tv_nsec: c_longlong = @import("std").mem.zeroes(c_longlong),
};
pub const struct___kernel_itimerspec = extern struct {
    it_interval: struct___kernel_timespec = @import("std").mem.zeroes(struct___kernel_timespec),
    it_value: struct___kernel_timespec = @import("std").mem.zeroes(struct___kernel_timespec),
};
pub const struct___kernel_old_timeval = extern struct {
    tv_sec: __kernel_long_t = @import("std").mem.zeroes(__kernel_long_t),
    tv_usec: __kernel_long_t = @import("std").mem.zeroes(__kernel_long_t),
};
pub const struct___kernel_old_timespec = extern struct {
    tv_sec: __kernel_old_time_t = @import("std").mem.zeroes(__kernel_old_time_t),
    tv_nsec: c_long = @import("std").mem.zeroes(c_long),
};
pub const struct___kernel_old_itimerval = extern struct {
    it_interval: struct___kernel_old_timeval = @import("std").mem.zeroes(struct___kernel_old_timeval),
    it_value: struct___kernel_old_timeval = @import("std").mem.zeroes(struct___kernel_old_timeval),
};
pub const struct___kernel_sock_timeval = extern struct {
    tv_sec: __s64 = @import("std").mem.zeroes(__s64),
    tv_usec: __s64 = @import("std").mem.zeroes(__s64),
};
pub const struct_open_how = extern struct {
    flags: __u64 = @import("std").mem.zeroes(__u64),
    mode: __u64 = @import("std").mem.zeroes(__u64),
    resolve: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_fscrypt_policy_v1 = extern struct {
    version: __u8 = @import("std").mem.zeroes(__u8),
    contents_encryption_mode: __u8 = @import("std").mem.zeroes(__u8),
    filenames_encryption_mode: __u8 = @import("std").mem.zeroes(__u8),
    flags: __u8 = @import("std").mem.zeroes(__u8),
    master_key_descriptor: [8]__u8 = @import("std").mem.zeroes([8]__u8),
};
pub const struct_fscrypt_key = extern struct {
    mode: __u32 = @import("std").mem.zeroes(__u32),
    raw: [64]__u8 = @import("std").mem.zeroes([64]__u8),
    size: __u32 = @import("std").mem.zeroes(__u32),
};
pub const struct_fscrypt_policy_v2 = extern struct {
    version: __u8 = @import("std").mem.zeroes(__u8),
    contents_encryption_mode: __u8 = @import("std").mem.zeroes(__u8),
    filenames_encryption_mode: __u8 = @import("std").mem.zeroes(__u8),
    flags: __u8 = @import("std").mem.zeroes(__u8),
    log2_data_unit_size: __u8 = @import("std").mem.zeroes(__u8),
    __reserved: [3]__u8 = @import("std").mem.zeroes([3]__u8),
    master_key_identifier: [16]__u8 = @import("std").mem.zeroes([16]__u8),
};
const union_unnamed_29 = extern union {
    version: __u8,
    v1: struct_fscrypt_policy_v1,
    v2: struct_fscrypt_policy_v2,
};
pub const struct_fscrypt_get_policy_ex_arg = extern struct {
    policy_size: __u64 = @import("std").mem.zeroes(__u64),
    policy: union_unnamed_29 = @import("std").mem.zeroes(union_unnamed_29),
};
const union_unnamed_30 = extern union {
    __reserved: [32]__u8,
    descriptor: [8]__u8,
    identifier: [16]__u8,
};
pub const struct_fscrypt_key_specifier = extern struct {
    type: __u32 = @import("std").mem.zeroes(__u32),
    __reserved: __u32 = @import("std").mem.zeroes(__u32),
    u: union_unnamed_30 = @import("std").mem.zeroes(union_unnamed_30),
};
pub const struct_fscrypt_provisioning_key_payload = extern struct {
    type: __u32 align(4) = @import("std").mem.zeroes(__u32),
    __reserved: __u32 = @import("std").mem.zeroes(__u32),
    pub fn raw(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 8)));
    }
};
pub const struct_fscrypt_add_key_arg = extern struct {
    key_spec: struct_fscrypt_key_specifier align(4) = @import("std").mem.zeroes(struct_fscrypt_key_specifier),
    raw_size: __u32 = @import("std").mem.zeroes(__u32),
    key_id: __u32 = @import("std").mem.zeroes(__u32),
    __reserved: [8]__u32 = @import("std").mem.zeroes([8]__u32),
    pub fn raw(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 80)));
    }
};
pub const struct_fscrypt_remove_key_arg = extern struct {
    key_spec: struct_fscrypt_key_specifier = @import("std").mem.zeroes(struct_fscrypt_key_specifier),
    removal_status_flags: __u32 = @import("std").mem.zeroes(__u32),
    __reserved: [5]__u32 = @import("std").mem.zeroes([5]__u32),
};
pub const struct_fscrypt_get_key_status_arg = extern struct {
    key_spec: struct_fscrypt_key_specifier = @import("std").mem.zeroes(struct_fscrypt_key_specifier),
    __reserved: [6]__u32 = @import("std").mem.zeroes([6]__u32),
    status: __u32 = @import("std").mem.zeroes(__u32),
    status_flags: __u32 = @import("std").mem.zeroes(__u32),
    user_count: __u32 = @import("std").mem.zeroes(__u32),
    __out_reserved: [13]__u32 = @import("std").mem.zeroes([13]__u32),
};
pub const FSCONFIG_SET_FLAG: c_int = 0;
pub const FSCONFIG_SET_STRING: c_int = 1;
pub const FSCONFIG_SET_BINARY: c_int = 2;
pub const FSCONFIG_SET_PATH: c_int = 3;
pub const FSCONFIG_SET_PATH_EMPTY: c_int = 4;
pub const FSCONFIG_SET_FD: c_int = 5;
pub const FSCONFIG_CMD_CREATE: c_int = 6;
pub const FSCONFIG_CMD_RECONFIGURE: c_int = 7;
pub const FSCONFIG_CMD_CREATE_EXCL: c_int = 8;
pub const enum_fsconfig_command = c_uint;
pub const struct_mount_attr = extern struct {
    attr_set: __u64 = @import("std").mem.zeroes(__u64),
    attr_clr: __u64 = @import("std").mem.zeroes(__u64),
    propagation: __u64 = @import("std").mem.zeroes(__u64),
    userns_fd: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_statmount = extern struct {
    size: __u32 align(8) = @import("std").mem.zeroes(__u32),
    __spare1: __u32 = @import("std").mem.zeroes(__u32),
    mask: __u64 = @import("std").mem.zeroes(__u64),
    sb_dev_major: __u32 = @import("std").mem.zeroes(__u32),
    sb_dev_minor: __u32 = @import("std").mem.zeroes(__u32),
    sb_magic: __u64 = @import("std").mem.zeroes(__u64),
    sb_flags: __u32 = @import("std").mem.zeroes(__u32),
    fs_type: __u32 = @import("std").mem.zeroes(__u32),
    mnt_id: __u64 = @import("std").mem.zeroes(__u64),
    mnt_parent_id: __u64 = @import("std").mem.zeroes(__u64),
    mnt_id_old: __u32 = @import("std").mem.zeroes(__u32),
    mnt_parent_id_old: __u32 = @import("std").mem.zeroes(__u32),
    mnt_attr: __u64 = @import("std").mem.zeroes(__u64),
    mnt_propagation: __u64 = @import("std").mem.zeroes(__u64),
    mnt_peer_group: __u64 = @import("std").mem.zeroes(__u64),
    mnt_master: __u64 = @import("std").mem.zeroes(__u64),
    propagate_from: __u64 = @import("std").mem.zeroes(__u64),
    mnt_root: __u32 = @import("std").mem.zeroes(__u32),
    mnt_point: __u32 = @import("std").mem.zeroes(__u32),
    __spare2: [50]__u64 = @import("std").mem.zeroes([50]__u64),
    pub fn str(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 512)));
    }
};
pub const struct_mnt_id_req = extern struct {
    size: __u32 = @import("std").mem.zeroes(__u32),
    spare: __u32 = @import("std").mem.zeroes(__u32),
    mnt_id: __u64 = @import("std").mem.zeroes(__u64),
    param: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_file_clone_range = extern struct {
    src_fd: __s64 = @import("std").mem.zeroes(__s64),
    src_offset: __u64 = @import("std").mem.zeroes(__u64),
    src_length: __u64 = @import("std").mem.zeroes(__u64),
    dest_offset: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_fstrim_range = extern struct {
    start: __u64 = @import("std").mem.zeroes(__u64),
    len: __u64 = @import("std").mem.zeroes(__u64),
    minlen: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_file_dedupe_range_info = extern struct {
    dest_fd: __s64 = @import("std").mem.zeroes(__s64),
    dest_offset: __u64 = @import("std").mem.zeroes(__u64),
    bytes_deduped: __u64 = @import("std").mem.zeroes(__u64),
    status: __s32 = @import("std").mem.zeroes(__s32),
    reserved: __u32 = @import("std").mem.zeroes(__u32),
};
pub const struct_file_dedupe_range = extern struct {
    src_offset: __u64 align(8) = @import("std").mem.zeroes(__u64),
    src_length: __u64 = @import("std").mem.zeroes(__u64),
    dest_count: __u16 = @import("std").mem.zeroes(__u16),
    reserved1: __u16 = @import("std").mem.zeroes(__u16),
    reserved2: __u32 = @import("std").mem.zeroes(__u32),
    pub fn info(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), struct_file_dedupe_range_info) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), struct_file_dedupe_range_info);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 24)));
    }
};
pub const struct_files_stat_struct = extern struct {
    nr_files: c_ulong = @import("std").mem.zeroes(c_ulong),
    nr_free_files: c_ulong = @import("std").mem.zeroes(c_ulong),
    max_files: c_ulong = @import("std").mem.zeroes(c_ulong),
};
pub const struct_inodes_stat_t = extern struct {
    nr_inodes: c_long = @import("std").mem.zeroes(c_long),
    nr_unused: c_long = @import("std").mem.zeroes(c_long),
    dummy: [5]c_long = @import("std").mem.zeroes([5]c_long),
};
pub const struct_fsxattr = extern struct {
    fsx_xflags: __u32 = @import("std").mem.zeroes(__u32),
    fsx_extsize: __u32 = @import("std").mem.zeroes(__u32),
    fsx_nextents: __u32 = @import("std").mem.zeroes(__u32),
    fsx_projid: __u32 = @import("std").mem.zeroes(__u32),
    fsx_cowextsize: __u32 = @import("std").mem.zeroes(__u32),
    fsx_pad: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const __kernel_rwf_t = c_int;
pub const struct_page_region = extern struct {
    start: __u64 = @import("std").mem.zeroes(__u64),
    end: __u64 = @import("std").mem.zeroes(__u64),
    categories: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_pm_scan_arg = extern struct {
    size: __u64 = @import("std").mem.zeroes(__u64),
    flags: __u64 = @import("std").mem.zeroes(__u64),
    start: __u64 = @import("std").mem.zeroes(__u64),
    end: __u64 = @import("std").mem.zeroes(__u64),
    walk_end: __u64 = @import("std").mem.zeroes(__u64),
    vec: __u64 = @import("std").mem.zeroes(__u64),
    vec_len: __u64 = @import("std").mem.zeroes(__u64),
    max_pages: __u64 = @import("std").mem.zeroes(__u64),
    category_inverted: __u64 = @import("std").mem.zeroes(__u64),
    category_mask: __u64 = @import("std").mem.zeroes(__u64),
    category_anyof_mask: __u64 = @import("std").mem.zeroes(__u64),
    return_mask: __u64 = @import("std").mem.zeroes(__u64),
};
const struct_unnamed_32 = extern struct {
    cmd_op: __u32 = @import("std").mem.zeroes(__u32),
    __pad1: __u32 = @import("std").mem.zeroes(__u32),
};
const union_unnamed_31 = extern union {
    off: __u64,
    addr2: __u64,
    unnamed_0: struct_unnamed_32,
};
const struct_unnamed_34 = extern struct {
    level: __u32 = @import("std").mem.zeroes(__u32),
    optname: __u32 = @import("std").mem.zeroes(__u32),
};
const union_unnamed_33 = extern union {
    addr: __u64,
    splice_off_in: __u64,
    unnamed_0: struct_unnamed_34,
};
const union_unnamed_35 = extern union {
    rw_flags: __kernel_rwf_t,
    fsync_flags: __u32,
    poll_events: __u16,
    poll32_events: __u32,
    sync_range_flags: __u32,
    msg_flags: __u32,
    timeout_flags: __u32,
    accept_flags: __u32,
    cancel_flags: __u32,
    open_flags: __u32,
    statx_flags: __u32,
    fadvise_advice: __u32,
    splice_flags: __u32,
    rename_flags: __u32,
    unlink_flags: __u32,
    hardlink_flags: __u32,
    xattr_flags: __u32,
    msg_ring_flags: __u32,
    uring_cmd_flags: __u32,
    waitid_flags: __u32,
    futex_flags: __u32,
    install_fd_flags: __u32,
    nop_flags: __u32,
};
const union_unnamed_36 = extern union {
    buf_index: __u16 align(1),
    buf_group: __u16 align(1),
};
const struct_unnamed_38 = extern struct {
    addr_len: __u16 = @import("std").mem.zeroes(__u16),
    __pad3: [1]__u16 = @import("std").mem.zeroes([1]__u16),
};
const union_unnamed_37 = extern union {
    splice_fd_in: __s32,
    file_index: __u32,
    zcrx_ifq_idx: __u32,
    optlen: __u32,
    unnamed_0: struct_unnamed_38,
};
const struct_unnamed_40 = extern struct {
    addr3: __u64 = @import("std").mem.zeroes(__u64),
    __pad2: [1]__u64 = @import("std").mem.zeroes([1]__u64),
};
const union_unnamed_39 = extern union {
    unnamed_0: struct_unnamed_40 align(8),
    optval: __u64,
    pub fn cmd(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 0)));
    }
};
pub const struct_io_uring_sqe = extern struct {
    opcode: __u8 = @import("std").mem.zeroes(__u8),
    flags: __u8 = @import("std").mem.zeroes(__u8),
    ioprio: __u16 = @import("std").mem.zeroes(__u16),
    fd: __s32 = @import("std").mem.zeroes(__s32),
    unnamed_0: union_unnamed_31 = @import("std").mem.zeroes(union_unnamed_31),
    unnamed_1: union_unnamed_33 = @import("std").mem.zeroes(union_unnamed_33),
    len: __u32 = @import("std").mem.zeroes(__u32),
    unnamed_2: union_unnamed_35 = @import("std").mem.zeroes(union_unnamed_35),
    user_data: __u64 = @import("std").mem.zeroes(__u64),
    unnamed_3: union_unnamed_36 = @import("std").mem.zeroes(union_unnamed_36),
    personality: __u16 = @import("std").mem.zeroes(__u16),
    unnamed_4: union_unnamed_37 = @import("std").mem.zeroes(union_unnamed_37),
    unnamed_5: union_unnamed_39 = @import("std").mem.zeroes(union_unnamed_39),
};
pub const IOSQE_FIXED_FILE_BIT: c_int = 0;
pub const IOSQE_IO_DRAIN_BIT: c_int = 1;
pub const IOSQE_IO_LINK_BIT: c_int = 2;
pub const IOSQE_IO_HARDLINK_BIT: c_int = 3;
pub const IOSQE_ASYNC_BIT: c_int = 4;
pub const IOSQE_BUFFER_SELECT_BIT: c_int = 5;
pub const IOSQE_CQE_SKIP_SUCCESS_BIT: c_int = 6;
pub const enum_io_uring_sqe_flags_bit = c_uint;
pub const IORING_OP_NOP: c_int = 0;
pub const IORING_OP_READV: c_int = 1;
pub const IORING_OP_WRITEV: c_int = 2;
pub const IORING_OP_FSYNC: c_int = 3;
pub const IORING_OP_READ_FIXED: c_int = 4;
pub const IORING_OP_WRITE_FIXED: c_int = 5;
pub const IORING_OP_POLL_ADD: c_int = 6;
pub const IORING_OP_POLL_REMOVE: c_int = 7;
pub const IORING_OP_SYNC_FILE_RANGE: c_int = 8;
pub const IORING_OP_SENDMSG: c_int = 9;
pub const IORING_OP_RECVMSG: c_int = 10;
pub const IORING_OP_TIMEOUT: c_int = 11;
pub const IORING_OP_TIMEOUT_REMOVE: c_int = 12;
pub const IORING_OP_ACCEPT: c_int = 13;
pub const IORING_OP_ASYNC_CANCEL: c_int = 14;
pub const IORING_OP_LINK_TIMEOUT: c_int = 15;
pub const IORING_OP_CONNECT: c_int = 16;
pub const IORING_OP_FALLOCATE: c_int = 17;
pub const IORING_OP_OPENAT: c_int = 18;
pub const IORING_OP_CLOSE: c_int = 19;
pub const IORING_OP_FILES_UPDATE: c_int = 20;
pub const IORING_OP_STATX: c_int = 21;
pub const IORING_OP_READ: c_int = 22;
pub const IORING_OP_WRITE: c_int = 23;
pub const IORING_OP_FADVISE: c_int = 24;
pub const IORING_OP_MADVISE: c_int = 25;
pub const IORING_OP_SEND: c_int = 26;
pub const IORING_OP_RECV: c_int = 27;
pub const IORING_OP_OPENAT2: c_int = 28;
pub const IORING_OP_EPOLL_CTL: c_int = 29;
pub const IORING_OP_SPLICE: c_int = 30;
pub const IORING_OP_PROVIDE_BUFFERS: c_int = 31;
pub const IORING_OP_REMOVE_BUFFERS: c_int = 32;
pub const IORING_OP_TEE: c_int = 33;
pub const IORING_OP_SHUTDOWN: c_int = 34;
pub const IORING_OP_RENAMEAT: c_int = 35;
pub const IORING_OP_UNLINKAT: c_int = 36;
pub const IORING_OP_MKDIRAT: c_int = 37;
pub const IORING_OP_SYMLINKAT: c_int = 38;
pub const IORING_OP_LINKAT: c_int = 39;
pub const IORING_OP_MSG_RING: c_int = 40;
pub const IORING_OP_FSETXATTR: c_int = 41;
pub const IORING_OP_SETXATTR: c_int = 42;
pub const IORING_OP_FGETXATTR: c_int = 43;
pub const IORING_OP_GETXATTR: c_int = 44;
pub const IORING_OP_SOCKET: c_int = 45;
pub const IORING_OP_URING_CMD: c_int = 46;
pub const IORING_OP_SEND_ZC: c_int = 47;
pub const IORING_OP_SENDMSG_ZC: c_int = 48;
pub const IORING_OP_READ_MULTISHOT: c_int = 49;
pub const IORING_OP_WAITID: c_int = 50;
pub const IORING_OP_FUTEX_WAIT: c_int = 51;
pub const IORING_OP_FUTEX_WAKE: c_int = 52;
pub const IORING_OP_FUTEX_WAITV: c_int = 53;
pub const IORING_OP_FIXED_FD_INSTALL: c_int = 54;
pub const IORING_OP_FTRUNCATE: c_int = 55;
pub const IORING_OP_BIND: c_int = 56;
pub const IORING_OP_LISTEN: c_int = 57;
pub const IORING_OP_RECV_ZC: c_int = 58;
pub const IORING_OP_EPOLL_WAIT: c_int = 59;
pub const IORING_OP_READV_FIXED: c_int = 60;
pub const IORING_OP_WRITEV_FIXED: c_int = 61;
pub const IORING_OP_LAST: c_int = 62;
pub const enum_io_uring_op = c_uint;
pub const IORING_MSG_DATA: c_int = 0;
pub const IORING_MSG_SEND_FD: c_int = 1;
pub const enum_io_uring_msg_ring_flags = c_uint;
pub const struct_io_uring_cqe = extern struct {
    user_data: __u64 align(8) = @import("std").mem.zeroes(__u64),
    res: __s32 = @import("std").mem.zeroes(__s32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    pub fn big_cqe(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), c_ulonglong) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), c_ulonglong);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 16)));
    }
};
pub const struct_io_sqring_offsets = extern struct {
    head: __u32 = @import("std").mem.zeroes(__u32),
    tail: __u32 = @import("std").mem.zeroes(__u32),
    ring_mask: __u32 = @import("std").mem.zeroes(__u32),
    ring_entries: __u32 = @import("std").mem.zeroes(__u32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    dropped: __u32 = @import("std").mem.zeroes(__u32),
    array: __u32 = @import("std").mem.zeroes(__u32),
    resv1: __u32 = @import("std").mem.zeroes(__u32),
    user_addr: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_io_cqring_offsets = extern struct {
    head: __u32 = @import("std").mem.zeroes(__u32),
    tail: __u32 = @import("std").mem.zeroes(__u32),
    ring_mask: __u32 = @import("std").mem.zeroes(__u32),
    ring_entries: __u32 = @import("std").mem.zeroes(__u32),
    overflow: __u32 = @import("std").mem.zeroes(__u32),
    cqes: __u32 = @import("std").mem.zeroes(__u32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    resv1: __u32 = @import("std").mem.zeroes(__u32),
    user_addr: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_io_uring_params = extern struct {
    sq_entries: __u32 = @import("std").mem.zeroes(__u32),
    cq_entries: __u32 = @import("std").mem.zeroes(__u32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    sq_thread_cpu: __u32 = @import("std").mem.zeroes(__u32),
    sq_thread_idle: __u32 = @import("std").mem.zeroes(__u32),
    features: __u32 = @import("std").mem.zeroes(__u32),
    wq_fd: __u32 = @import("std").mem.zeroes(__u32),
    resv: [3]__u32 = @import("std").mem.zeroes([3]__u32),
    sq_off: struct_io_sqring_offsets = @import("std").mem.zeroes(struct_io_sqring_offsets),
    cq_off: struct_io_cqring_offsets = @import("std").mem.zeroes(struct_io_cqring_offsets),
};
pub const IORING_REGISTER_BUFFERS: c_int = 0;
pub const IORING_UNREGISTER_BUFFERS: c_int = 1;
pub const IORING_REGISTER_FILES: c_int = 2;
pub const IORING_UNREGISTER_FILES: c_int = 3;
pub const IORING_REGISTER_EVENTFD: c_int = 4;
pub const IORING_UNREGISTER_EVENTFD: c_int = 5;
pub const IORING_REGISTER_FILES_UPDATE: c_int = 6;
pub const IORING_REGISTER_EVENTFD_ASYNC: c_int = 7;
pub const IORING_REGISTER_PROBE: c_int = 8;
pub const IORING_REGISTER_PERSONALITY: c_int = 9;
pub const IORING_UNREGISTER_PERSONALITY: c_int = 10;
pub const IORING_REGISTER_RESTRICTIONS: c_int = 11;
pub const IORING_REGISTER_ENABLE_RINGS: c_int = 12;
pub const IORING_REGISTER_FILES2: c_int = 13;
pub const IORING_REGISTER_FILES_UPDATE2: c_int = 14;
pub const IORING_REGISTER_BUFFERS2: c_int = 15;
pub const IORING_REGISTER_BUFFERS_UPDATE: c_int = 16;
pub const IORING_REGISTER_IOWQ_AFF: c_int = 17;
pub const IORING_UNREGISTER_IOWQ_AFF: c_int = 18;
pub const IORING_REGISTER_IOWQ_MAX_WORKERS: c_int = 19;
pub const IORING_REGISTER_RING_FDS: c_int = 20;
pub const IORING_UNREGISTER_RING_FDS: c_int = 21;
pub const IORING_REGISTER_PBUF_RING: c_int = 22;
pub const IORING_UNREGISTER_PBUF_RING: c_int = 23;
pub const IORING_REGISTER_SYNC_CANCEL: c_int = 24;
pub const IORING_REGISTER_FILE_ALLOC_RANGE: c_int = 25;
pub const IORING_REGISTER_PBUF_STATUS: c_int = 26;
pub const IORING_REGISTER_NAPI: c_int = 27;
pub const IORING_UNREGISTER_NAPI: c_int = 28;
pub const IORING_REGISTER_CLOCK: c_int = 29;
pub const IORING_REGISTER_CLONE_BUFFERS: c_int = 30;
pub const IORING_REGISTER_SEND_MSG_RING: c_int = 31;
pub const IORING_REGISTER_ZCRX_IFQ: c_int = 32;
pub const IORING_REGISTER_RESIZE_RINGS: c_int = 33;
pub const IORING_REGISTER_MEM_REGION: c_int = 34;
pub const IORING_REGISTER_LAST: c_int = 35;
pub const IORING_REGISTER_USE_REGISTERED_RING: c_uint = 2147483648;
pub const enum_io_uring_register_op = c_uint;
pub const IO_WQ_BOUND: c_int = 0;
pub const IO_WQ_UNBOUND: c_int = 1;
pub const enum_io_wq_type = c_uint;
pub const struct_io_uring_files_update = extern struct {
    offset: __u32 = @import("std").mem.zeroes(__u32),
    resv: __u32 = @import("std").mem.zeroes(__u32),
    fds: __u64 align(8) = @import("std").mem.zeroes(__u64),
};
pub const IORING_MEM_REGION_TYPE_USER: c_int = 1;
const enum_unnamed_41 = c_uint;
pub const struct_io_uring_region_desc = extern struct {
    user_addr: __u64 = @import("std").mem.zeroes(__u64),
    size: __u64 = @import("std").mem.zeroes(__u64),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    id: __u32 = @import("std").mem.zeroes(__u32),
    mmap_offset: __u64 = @import("std").mem.zeroes(__u64),
    __resv: [4]__u64 = @import("std").mem.zeroes([4]__u64),
};
pub const IORING_MEM_REGION_REG_WAIT_ARG: c_int = 1;
const enum_unnamed_42 = c_uint;
pub const struct_io_uring_mem_region_reg = extern struct {
    region_uptr: __u64 = @import("std").mem.zeroes(__u64),
    flags: __u64 = @import("std").mem.zeroes(__u64),
    __resv: [2]__u64 = @import("std").mem.zeroes([2]__u64),
};
pub const struct_io_uring_rsrc_register = extern struct {
    nr: __u32 = @import("std").mem.zeroes(__u32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    resv2: __u64 = @import("std").mem.zeroes(__u64),
    data: __u64 align(8) = @import("std").mem.zeroes(__u64),
    tags: __u64 align(8) = @import("std").mem.zeroes(__u64),
};
pub const struct_io_uring_rsrc_update = extern struct {
    offset: __u32 = @import("std").mem.zeroes(__u32),
    resv: __u32 = @import("std").mem.zeroes(__u32),
    data: __u64 align(8) = @import("std").mem.zeroes(__u64),
};
pub const struct_io_uring_rsrc_update2 = extern struct {
    offset: __u32 = @import("std").mem.zeroes(__u32),
    resv: __u32 = @import("std").mem.zeroes(__u32),
    data: __u64 align(8) = @import("std").mem.zeroes(__u64),
    tags: __u64 align(8) = @import("std").mem.zeroes(__u64),
    nr: __u32 = @import("std").mem.zeroes(__u32),
    resv2: __u32 = @import("std").mem.zeroes(__u32),
};
pub const struct_io_uring_probe_op = extern struct {
    op: __u8 = @import("std").mem.zeroes(__u8),
    resv: __u8 = @import("std").mem.zeroes(__u8),
    flags: __u16 = @import("std").mem.zeroes(__u16),
    resv2: __u32 = @import("std").mem.zeroes(__u32),
};
pub const struct_io_uring_probe = extern struct {
    last_op: __u8 align(4) = @import("std").mem.zeroes(__u8),
    ops_len: __u8 = @import("std").mem.zeroes(__u8),
    resv: __u16 = @import("std").mem.zeroes(__u16),
    resv2: [3]__u32 = @import("std").mem.zeroes([3]__u32),
    pub fn ops(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), struct_io_uring_probe_op) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), struct_io_uring_probe_op);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 16)));
    }
};
const union_unnamed_43 = extern union {
    register_op: __u8,
    sqe_op: __u8,
    sqe_flags: __u8,
};
pub const struct_io_uring_restriction = extern struct {
    opcode: __u16 = @import("std").mem.zeroes(__u16),
    unnamed_0: union_unnamed_43 = @import("std").mem.zeroes(union_unnamed_43),
    resv: __u8 = @import("std").mem.zeroes(__u8),
    resv2: [3]__u32 = @import("std").mem.zeroes([3]__u32),
};
pub const struct_io_uring_clock_register = extern struct {
    clockid: __u32 = @import("std").mem.zeroes(__u32),
    __resv: [3]__u32 = @import("std").mem.zeroes([3]__u32),
};
pub const IORING_REGISTER_SRC_REGISTERED: c_int = 1;
pub const IORING_REGISTER_DST_REPLACE: c_int = 2;
const enum_unnamed_44 = c_uint;
pub const struct_io_uring_clone_buffers = extern struct {
    src_fd: __u32 = @import("std").mem.zeroes(__u32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    src_off: __u32 = @import("std").mem.zeroes(__u32),
    dst_off: __u32 = @import("std").mem.zeroes(__u32),
    nr: __u32 = @import("std").mem.zeroes(__u32),
    pad: [3]__u32 = @import("std").mem.zeroes([3]__u32),
};
pub const struct_io_uring_buf = extern struct {
    addr: __u64 = @import("std").mem.zeroes(__u64),
    len: __u32 = @import("std").mem.zeroes(__u32),
    bid: __u16 = @import("std").mem.zeroes(__u16),
    resv: __u16 = @import("std").mem.zeroes(__u16),
};
const struct_unnamed_46 = extern struct {
    resv1: __u64 = @import("std").mem.zeroes(__u64),
    resv2: __u32 = @import("std").mem.zeroes(__u32),
    resv3: __u16 = @import("std").mem.zeroes(__u16),
    tail: __u16 = @import("std").mem.zeroes(__u16),
};
const union_unnamed_45 = extern union {
    unnamed_0: struct_unnamed_46 align(8),
    pub fn bufs(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), struct_io_uring_buf) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), struct_io_uring_buf);
        return @as(ReturnType, @ptrCast(@alignCast(@as(Intermediate, @ptrCast(self)) + 0)));
    }
};
pub const struct_io_uring_buf_ring = extern struct {
    unnamed_0: union_unnamed_45 = @import("std").mem.zeroes(union_unnamed_45),
};
pub const IOU_PBUF_RING_MMAP: c_int = 1;
pub const IOU_PBUF_RING_INC: c_int = 2;
pub const enum_io_uring_register_pbuf_ring_flags = c_uint;
pub const struct_io_uring_buf_reg = extern struct {
    ring_addr: __u64 = @import("std").mem.zeroes(__u64),
    ring_entries: __u32 = @import("std").mem.zeroes(__u32),
    bgid: __u16 = @import("std").mem.zeroes(__u16),
    flags: __u16 = @import("std").mem.zeroes(__u16),
    resv: [3]__u64 = @import("std").mem.zeroes([3]__u64),
};
pub const struct_io_uring_buf_status = extern struct {
    buf_group: __u32 = @import("std").mem.zeroes(__u32),
    head: __u32 = @import("std").mem.zeroes(__u32),
    resv: [8]__u32 = @import("std").mem.zeroes([8]__u32),
};
pub const struct_io_uring_napi = extern struct {
    busy_poll_to: __u32 = @import("std").mem.zeroes(__u32),
    prefer_busy_poll: __u8 = @import("std").mem.zeroes(__u8),
    pad: [3]__u8 = @import("std").mem.zeroes([3]__u8),
    resv: __u64 = @import("std").mem.zeroes(__u64),
};
pub const IORING_RESTRICTION_REGISTER_OP: c_int = 0;
pub const IORING_RESTRICTION_SQE_OP: c_int = 1;
pub const IORING_RESTRICTION_SQE_FLAGS_ALLOWED: c_int = 2;
pub const IORING_RESTRICTION_SQE_FLAGS_REQUIRED: c_int = 3;
pub const IORING_RESTRICTION_LAST: c_int = 4;
pub const enum_io_uring_register_restriction_op = c_uint;
pub const IORING_REG_WAIT_TS: c_int = 1;
const enum_unnamed_47 = c_uint;
pub const struct_io_uring_cqwait_reg_arg = extern struct {
    flags: __u32 = @import("std").mem.zeroes(__u32),
    struct_size: __u32 = @import("std").mem.zeroes(__u32),
    nr_entries: __u32 = @import("std").mem.zeroes(__u32),
    pad: __u32 = @import("std").mem.zeroes(__u32),
    user_addr: __u64 = @import("std").mem.zeroes(__u64),
    pad2: [3]__u64 = @import("std").mem.zeroes([3]__u64),
};
pub const struct_io_uring_reg_wait = extern struct {
    ts: struct___kernel_timespec = @import("std").mem.zeroes(struct___kernel_timespec),
    min_wait_usec: __u32 = @import("std").mem.zeroes(__u32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    sigmask: __u64 = @import("std").mem.zeroes(__u64),
    sigmask_sz: __u32 = @import("std").mem.zeroes(__u32),
    pad: [3]__u32 = @import("std").mem.zeroes([3]__u32),
    pad2: [2]__u64 = @import("std").mem.zeroes([2]__u64),
};
pub const struct_io_uring_getevents_arg = extern struct {
    sigmask: __u64 = @import("std").mem.zeroes(__u64),
    sigmask_sz: __u32 = @import("std").mem.zeroes(__u32),
    min_wait_usec: __u32 = @import("std").mem.zeroes(__u32),
    ts: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_io_uring_sync_cancel_reg = extern struct {
    addr: __u64 = @import("std").mem.zeroes(__u64),
    fd: __s32 = @import("std").mem.zeroes(__s32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    timeout: struct___kernel_timespec = @import("std").mem.zeroes(struct___kernel_timespec),
    opcode: __u8 = @import("std").mem.zeroes(__u8),
    pad: [7]__u8 = @import("std").mem.zeroes([7]__u8),
    pad2: [3]__u64 = @import("std").mem.zeroes([3]__u64),
};
pub const struct_io_uring_file_index_range = extern struct {
    off: __u32 = @import("std").mem.zeroes(__u32),
    len: __u32 = @import("std").mem.zeroes(__u32),
    resv: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_io_uring_recvmsg_out = extern struct {
    namelen: __u32 = @import("std").mem.zeroes(__u32),
    controllen: __u32 = @import("std").mem.zeroes(__u32),
    payloadlen: __u32 = @import("std").mem.zeroes(__u32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
};
pub const SOCKET_URING_OP_SIOCINQ: c_int = 0;
pub const SOCKET_URING_OP_SIOCOUTQ: c_int = 1;
pub const SOCKET_URING_OP_GETSOCKOPT: c_int = 2;
pub const SOCKET_URING_OP_SETSOCKOPT: c_int = 3;
pub const enum_io_uring_socket_op = c_uint;
pub const struct_io_uring_zcrx_rqe = extern struct {
    off: __u64 = @import("std").mem.zeroes(__u64),
    len: __u32 = @import("std").mem.zeroes(__u32),
    __pad: __u32 = @import("std").mem.zeroes(__u32),
};
pub const struct_io_uring_zcrx_cqe = extern struct {
    off: __u64 = @import("std").mem.zeroes(__u64),
    __pad: __u64 = @import("std").mem.zeroes(__u64),
};
pub const struct_io_uring_zcrx_offsets = extern struct {
    head: __u32 = @import("std").mem.zeroes(__u32),
    tail: __u32 = @import("std").mem.zeroes(__u32),
    rqes: __u32 = @import("std").mem.zeroes(__u32),
    __resv2: __u32 = @import("std").mem.zeroes(__u32),
    __resv: [2]__u64 = @import("std").mem.zeroes([2]__u64),
};
pub const struct_io_uring_zcrx_area_reg = extern struct {
    addr: __u64 = @import("std").mem.zeroes(__u64),
    len: __u64 = @import("std").mem.zeroes(__u64),
    rq_area_token: __u64 = @import("std").mem.zeroes(__u64),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    __resv1: __u32 = @import("std").mem.zeroes(__u32),
    __resv2: [2]__u64 = @import("std").mem.zeroes([2]__u64),
};
pub const struct_io_uring_zcrx_ifq_reg = extern struct {
    if_idx: __u32 = @import("std").mem.zeroes(__u32),
    if_rxq: __u32 = @import("std").mem.zeroes(__u32),
    rq_entries: __u32 = @import("std").mem.zeroes(__u32),
    flags: __u32 = @import("std").mem.zeroes(__u32),
    area_ptr: __u64 = @import("std").mem.zeroes(__u64),
    region_ptr: __u64 = @import("std").mem.zeroes(__u64),
    offsets: struct_io_uring_zcrx_offsets = @import("std").mem.zeroes(struct_io_uring_zcrx_offsets),
    __resv: [4]__u64 = @import("std").mem.zeroes([4]__u64),
};
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub const memory_order_relaxed: c_int = 0;
pub const memory_order_consume: c_int = 1;
pub const memory_order_acquire: c_int = 2;
pub const memory_order_release: c_int = 3;
pub const memory_order_acq_rel: c_int = 4;
pub const memory_order_seq_cst: c_int = 5;
pub const enum_memory_order = c_uint;
pub const memory_order = enum_memory_order;
pub extern fn atomic_thread_fence(memory_order) void;
pub extern fn atomic_signal_fence(memory_order) void;
// /snap/zig/13822/lib/include/stdatomic.h:97:37: warning: unsupported type: 'Atomic'
pub const atomic_bool = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:97:37

// /snap/zig/13822/lib/include/stdatomic.h:99:37: warning: unsupported type: 'Atomic'
pub const atomic_char = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:99:37

// /snap/zig/13822/lib/include/stdatomic.h:100:37: warning: unsupported type: 'Atomic'
pub const atomic_schar = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:100:37

// /snap/zig/13822/lib/include/stdatomic.h:101:37: warning: unsupported type: 'Atomic'
pub const atomic_uchar = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:101:37

// /snap/zig/13822/lib/include/stdatomic.h:102:37: warning: unsupported type: 'Atomic'
pub const atomic_short = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:102:37

// /snap/zig/13822/lib/include/stdatomic.h:103:37: warning: unsupported type: 'Atomic'
pub const atomic_ushort = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:103:37

// /snap/zig/13822/lib/include/stdatomic.h:104:37: warning: unsupported type: 'Atomic'
pub const atomic_int = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:104:37

// /snap/zig/13822/lib/include/stdatomic.h:105:37: warning: unsupported type: 'Atomic'
pub const atomic_uint = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:105:37

// /snap/zig/13822/lib/include/stdatomic.h:106:37: warning: unsupported type: 'Atomic'
pub const atomic_long = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:106:37

// /snap/zig/13822/lib/include/stdatomic.h:107:37: warning: unsupported type: 'Atomic'
pub const atomic_ulong = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:107:37

// /snap/zig/13822/lib/include/stdatomic.h:108:37: warning: unsupported type: 'Atomic'
pub const atomic_llong = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:108:37

// /snap/zig/13822/lib/include/stdatomic.h:109:37: warning: unsupported type: 'Atomic'
pub const atomic_ullong = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:109:37

// /snap/zig/13822/lib/include/stdatomic.h:113:37: warning: unsupported type: 'Atomic'
pub const atomic_char16_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:113:37

// /snap/zig/13822/lib/include/stdatomic.h:114:37: warning: unsupported type: 'Atomic'
pub const atomic_char32_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:114:37

// /snap/zig/13822/lib/include/stdatomic.h:115:37: warning: unsupported type: 'Atomic'
pub const atomic_wchar_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:115:37

// /snap/zig/13822/lib/include/stdatomic.h:116:37: warning: unsupported type: 'Atomic'
pub const atomic_int_least8_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:116:37

// /snap/zig/13822/lib/include/stdatomic.h:117:37: warning: unsupported type: 'Atomic'
pub const atomic_uint_least8_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:117:37

// /snap/zig/13822/lib/include/stdatomic.h:118:37: warning: unsupported type: 'Atomic'
pub const atomic_int_least16_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:118:37

// /snap/zig/13822/lib/include/stdatomic.h:119:37: warning: unsupported type: 'Atomic'
pub const atomic_uint_least16_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:119:37

// /snap/zig/13822/lib/include/stdatomic.h:120:37: warning: unsupported type: 'Atomic'
pub const atomic_int_least32_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:120:37

// /snap/zig/13822/lib/include/stdatomic.h:121:37: warning: unsupported type: 'Atomic'
pub const atomic_uint_least32_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:121:37

// /snap/zig/13822/lib/include/stdatomic.h:122:37: warning: unsupported type: 'Atomic'
pub const atomic_int_least64_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:122:37

// /snap/zig/13822/lib/include/stdatomic.h:123:37: warning: unsupported type: 'Atomic'
pub const atomic_uint_least64_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:123:37

// /snap/zig/13822/lib/include/stdatomic.h:124:37: warning: unsupported type: 'Atomic'
pub const atomic_int_fast8_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:124:37

// /snap/zig/13822/lib/include/stdatomic.h:125:37: warning: unsupported type: 'Atomic'
pub const atomic_uint_fast8_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:125:37

// /snap/zig/13822/lib/include/stdatomic.h:126:37: warning: unsupported type: 'Atomic'
pub const atomic_int_fast16_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:126:37

// /snap/zig/13822/lib/include/stdatomic.h:127:37: warning: unsupported type: 'Atomic'
pub const atomic_uint_fast16_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:127:37

// /snap/zig/13822/lib/include/stdatomic.h:128:37: warning: unsupported type: 'Atomic'
pub const atomic_int_fast32_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:128:37

// /snap/zig/13822/lib/include/stdatomic.h:129:37: warning: unsupported type: 'Atomic'
pub const atomic_uint_fast32_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:129:37

// /snap/zig/13822/lib/include/stdatomic.h:130:37: warning: unsupported type: 'Atomic'
pub const atomic_int_fast64_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:130:37

// /snap/zig/13822/lib/include/stdatomic.h:131:37: warning: unsupported type: 'Atomic'
pub const atomic_uint_fast64_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:131:37

// /snap/zig/13822/lib/include/stdatomic.h:132:37: warning: unsupported type: 'Atomic'
pub const atomic_intptr_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:132:37

// /snap/zig/13822/lib/include/stdatomic.h:133:37: warning: unsupported type: 'Atomic'
pub const atomic_uintptr_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:133:37

// /snap/zig/13822/lib/include/stdatomic.h:134:37: warning: unsupported type: 'Atomic'
pub const atomic_size_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:134:37

// /snap/zig/13822/lib/include/stdatomic.h:135:37: warning: unsupported type: 'Atomic'
pub const atomic_ptrdiff_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:135:37

// /snap/zig/13822/lib/include/stdatomic.h:136:37: warning: unsupported type: 'Atomic'
pub const atomic_intmax_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:136:37

// /snap/zig/13822/lib/include/stdatomic.h:137:37: warning: unsupported type: 'Atomic'
pub const atomic_uintmax_t = @compileError("unable to resolve typedef child type");
// /snap/zig/13822/lib/include/stdatomic.h:137:37
pub const struct_atomic_flag = extern struct {
    _Value: atomic_bool = @import("std").mem.zeroes(atomic_bool),
};
pub const atomic_flag = struct_atomic_flag;
pub extern fn atomic_flag_test_and_set([*c]volatile atomic_flag) bool;
pub extern fn atomic_flag_test_and_set_explicit([*c]volatile atomic_flag, memory_order) bool;
pub extern fn atomic_flag_clear([*c]volatile atomic_flag) void;
pub extern fn atomic_flag_clear_explicit([*c]volatile atomic_flag, memory_order) void;
pub const struct_io_uring_sq = extern struct {
    khead: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    ktail: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    kring_mask: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    kring_entries: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    kflags: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    kdropped: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    array: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    sqes: [*c]struct_io_uring_sqe = @import("std").mem.zeroes([*c]struct_io_uring_sqe),
    sqe_head: c_uint = @import("std").mem.zeroes(c_uint),
    sqe_tail: c_uint = @import("std").mem.zeroes(c_uint),
    ring_sz: usize = @import("std").mem.zeroes(usize),
    ring_ptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ring_mask: c_uint = @import("std").mem.zeroes(c_uint),
    ring_entries: c_uint = @import("std").mem.zeroes(c_uint),
    pad: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
};
pub const struct_io_uring_cq = extern struct {
    khead: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    ktail: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    kring_mask: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    kring_entries: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    kflags: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    koverflow: [*c]c_uint = @import("std").mem.zeroes([*c]c_uint),
    cqes: [*c]struct_io_uring_cqe = @import("std").mem.zeroes([*c]struct_io_uring_cqe),
    ring_sz: usize = @import("std").mem.zeroes(usize),
    ring_ptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ring_mask: c_uint = @import("std").mem.zeroes(c_uint),
    ring_entries: c_uint = @import("std").mem.zeroes(c_uint),
    pad: [2]c_uint = @import("std").mem.zeroes([2]c_uint),
};
pub const struct_io_uring = extern struct {
    sq: struct_io_uring_sq = @import("std").mem.zeroes(struct_io_uring_sq),
    cq: struct_io_uring_cq = @import("std").mem.zeroes(struct_io_uring_cq),
    flags: c_uint = @import("std").mem.zeroes(c_uint),
    ring_fd: c_int = @import("std").mem.zeroes(c_int),
    features: c_uint = @import("std").mem.zeroes(c_uint),
    enter_ring_fd: c_int = @import("std").mem.zeroes(c_int),
    int_flags: __u8 = @import("std").mem.zeroes(__u8),
    pad: [3]__u8 = @import("std").mem.zeroes([3]__u8),
    pad2: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const struct_io_uring_zcrx_rq = extern struct {
    khead: [*c]__u32 = @import("std").mem.zeroes([*c]__u32),
    ktail: [*c]__u32 = @import("std").mem.zeroes([*c]__u32),
    rq_tail: __u32 = @import("std").mem.zeroes(__u32),
    ring_entries: c_uint = @import("std").mem.zeroes(c_uint),
    rqes: [*c]struct_io_uring_zcrx_rqe = @import("std").mem.zeroes([*c]struct_io_uring_zcrx_rqe),
    ring_ptr: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub extern fn io_uring_get_probe_ring(ring: [*c]struct_io_uring) [*c]struct_io_uring_probe;
pub extern fn io_uring_get_probe() [*c]struct_io_uring_probe;
pub extern fn io_uring_free_probe(probe: [*c]struct_io_uring_probe) void;
pub fn io_uring_opcode_supported(arg_p: [*c]const struct_io_uring_probe, arg_op: c_int) callconv(.c) c_int {
    var p = arg_p;
    _ = &p;
    var op = arg_op;
    _ = &op;
    if (op > @as(c_int, @bitCast(@as(c_uint, p.*.last_op)))) return 0;
    return @intFromBool((@as(c_uint, @bitCast(@as(c_uint, p.*.ops()[@as(c_uint, @intCast(op))].flags))) & (@as(c_uint, 1) << @intCast(0))) != @as(c_uint, @bitCast(@as(c_int, 0))));
}
pub extern fn io_uring_queue_init_mem(entries: c_uint, ring: [*c]struct_io_uring, p: [*c]struct_io_uring_params, buf: ?*anyopaque, buf_size: usize) c_int;
pub extern fn io_uring_queue_init_params(entries: c_uint, ring: [*c]struct_io_uring, p: [*c]struct_io_uring_params) c_int;
pub extern fn io_uring_queue_init(entries: c_uint, ring: [*c]struct_io_uring, flags: c_uint) c_int;
pub extern fn io_uring_queue_mmap(fd: c_int, p: [*c]struct_io_uring_params, ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_ring_dontfork(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_queue_exit(ring: [*c]struct_io_uring) void;
pub extern fn io_uring_peek_batch_cqe(ring: [*c]struct_io_uring, cqes: [*c][*c]struct_io_uring_cqe, count: c_uint) c_uint;
pub extern fn io_uring_wait_cqes(ring: [*c]struct_io_uring, cqe_ptr: [*c][*c]struct_io_uring_cqe, wait_nr: c_uint, ts: [*c]struct___kernel_timespec, sigmask: [*c]sigset_t) c_int;
pub extern fn io_uring_wait_cqes_min_timeout(ring: [*c]struct_io_uring, cqe_ptr: [*c][*c]struct_io_uring_cqe, wait_nr: c_uint, ts: [*c]struct___kernel_timespec, min_ts_usec: c_uint, sigmask: [*c]sigset_t) c_int;
pub extern fn io_uring_wait_cqe_timeout(ring: [*c]struct_io_uring, cqe_ptr: [*c][*c]struct_io_uring_cqe, ts: [*c]struct___kernel_timespec) c_int;
pub extern fn io_uring_submit(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_submit_and_wait(ring: [*c]struct_io_uring, wait_nr: c_uint) c_int;
pub extern fn io_uring_submit_and_wait_timeout(ring: [*c]struct_io_uring, cqe_ptr: [*c][*c]struct_io_uring_cqe, wait_nr: c_uint, ts: [*c]struct___kernel_timespec, sigmask: [*c]sigset_t) c_int;
pub extern fn io_uring_submit_and_wait_min_timeout(ring: [*c]struct_io_uring, cqe_ptr: [*c][*c]struct_io_uring_cqe, wait_nr: c_uint, ts: [*c]struct___kernel_timespec, min_wait: c_uint, sigmask: [*c]sigset_t) c_int;
pub extern fn io_uring_submit_and_wait_reg(ring: [*c]struct_io_uring, cqe_ptr: [*c][*c]struct_io_uring_cqe, wait_nr: c_uint, reg_index: c_int) c_int;
pub extern fn io_uring_register_wait_reg(ring: [*c]struct_io_uring, reg: [*c]struct_io_uring_reg_wait, nr: c_int) c_int;
pub extern fn io_uring_resize_rings(ring: [*c]struct_io_uring, p: [*c]struct_io_uring_params) c_int;
pub extern fn io_uring_clone_buffers_offset(dst: [*c]struct_io_uring, src: [*c]struct_io_uring, dst_off: c_uint, src_off: c_uint, nr: c_uint, flags: c_uint) c_int;
pub extern fn io_uring_clone_buffers(dst: [*c]struct_io_uring, src: [*c]struct_io_uring) c_int;
pub extern fn io_uring_register_buffers(ring: [*c]struct_io_uring, iovecs: [*c]const struct_iovec, nr_iovecs: c_uint) c_int;
pub extern fn io_uring_register_buffers_tags(ring: [*c]struct_io_uring, iovecs: [*c]const struct_iovec, tags: [*c]const __u64, nr: c_uint) c_int;
pub extern fn io_uring_register_buffers_sparse(ring: [*c]struct_io_uring, nr: c_uint) c_int;
pub extern fn io_uring_register_buffers_update_tag(ring: [*c]struct_io_uring, off: c_uint, iovecs: [*c]const struct_iovec, tags: [*c]const __u64, nr: c_uint) c_int;
pub extern fn io_uring_unregister_buffers(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_register_files(ring: [*c]struct_io_uring, files: [*c]const c_int, nr_files: c_uint) c_int;
pub extern fn io_uring_register_files_tags(ring: [*c]struct_io_uring, files: [*c]const c_int, tags: [*c]const __u64, nr: c_uint) c_int;
pub extern fn io_uring_register_files_sparse(ring: [*c]struct_io_uring, nr: c_uint) c_int;
pub extern fn io_uring_register_files_update_tag(ring: [*c]struct_io_uring, off: c_uint, files: [*c]const c_int, tags: [*c]const __u64, nr_files: c_uint) c_int;
pub extern fn io_uring_unregister_files(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_register_files_update(ring: [*c]struct_io_uring, off: c_uint, files: [*c]const c_int, nr_files: c_uint) c_int;
pub extern fn io_uring_register_eventfd(ring: [*c]struct_io_uring, fd: c_int) c_int;
pub extern fn io_uring_register_eventfd_async(ring: [*c]struct_io_uring, fd: c_int) c_int;
pub extern fn io_uring_unregister_eventfd(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_register_probe(ring: [*c]struct_io_uring, p: [*c]struct_io_uring_probe, nr: c_uint) c_int;
pub extern fn io_uring_register_personality(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_unregister_personality(ring: [*c]struct_io_uring, id: c_int) c_int;
pub extern fn io_uring_register_restrictions(ring: [*c]struct_io_uring, res: [*c]struct_io_uring_restriction, nr_res: c_uint) c_int;
pub extern fn io_uring_enable_rings(ring: [*c]struct_io_uring) c_int;
pub extern fn __io_uring_sqring_wait(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_unregister_iowq_aff(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_register_iowq_max_workers(ring: [*c]struct_io_uring, values: [*c]c_uint) c_int;
pub extern fn io_uring_register_ring_fd(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_unregister_ring_fd(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_close_ring_fd(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_register_buf_ring(ring: [*c]struct_io_uring, reg: [*c]struct_io_uring_buf_reg, flags: c_uint) c_int;
pub extern fn io_uring_unregister_buf_ring(ring: [*c]struct_io_uring, bgid: c_int) c_int;
pub extern fn io_uring_buf_ring_head(ring: [*c]struct_io_uring, buf_group: c_int, head: [*c]u16) c_int;
pub extern fn io_uring_register_sync_cancel(ring: [*c]struct_io_uring, reg: [*c]struct_io_uring_sync_cancel_reg) c_int;
pub extern fn io_uring_register_file_alloc_range(ring: [*c]struct_io_uring, off: c_uint, len: c_uint) c_int;
pub extern fn io_uring_register_napi(ring: [*c]struct_io_uring, napi: [*c]struct_io_uring_napi) c_int;
pub extern fn io_uring_unregister_napi(ring: [*c]struct_io_uring, napi: [*c]struct_io_uring_napi) c_int;
pub extern fn io_uring_register_ifq(ring: [*c]struct_io_uring, reg: [*c]struct_io_uring_zcrx_ifq_reg) c_int;
pub extern fn io_uring_register_clock(ring: [*c]struct_io_uring, arg: [*c]struct_io_uring_clock_register) c_int;
pub extern fn io_uring_get_events(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_submit_and_get_events(ring: [*c]struct_io_uring) c_int;
pub extern fn io_uring_enter(fd: c_uint, to_submit: c_uint, min_complete: c_uint, flags: c_uint, sig: [*c]sigset_t) c_int;
pub extern fn io_uring_enter2(fd: c_uint, to_submit: c_uint, min_complete: c_uint, flags: c_uint, sig: [*c]sigset_t, sz: usize) c_int;
pub extern fn io_uring_setup(entries: c_uint, p: [*c]struct_io_uring_params) c_int;
pub extern fn io_uring_register(fd: c_uint, opcode: c_uint, arg: ?*const anyopaque, nr_args: c_uint) c_int;
pub extern fn io_uring_register_region(ring: [*c]struct_io_uring, reg: [*c]struct_io_uring_mem_region_reg) c_int;
pub extern fn io_uring_setup_buf_ring(ring: [*c]struct_io_uring, nentries: c_uint, bgid: c_int, flags: c_uint, err: [*c]c_int) [*c]struct_io_uring_buf_ring;
pub extern fn io_uring_free_buf_ring(ring: [*c]struct_io_uring, br: [*c]struct_io_uring_buf_ring, nentries: c_uint, bgid: c_int) c_int;
pub extern fn __io_uring_get_cqe(ring: [*c]struct_io_uring, cqe_ptr: [*c][*c]struct_io_uring_cqe, submit: c_uint, wait_nr: c_uint, sigmask: [*c]sigset_t) c_int;
pub fn io_uring_cqe_shift_from_flags(arg_flags: c_uint) callconv(.c) c_uint {
    var flags = arg_flags;
    _ = &flags;
    return @as(c_uint, @intFromBool(!!((flags & (@as(c_uint, 1) << @intCast(11))) != 0)));
}
pub fn io_uring_cqe_shift(arg_ring: [*c]const struct_io_uring) callconv(.c) c_uint {
    var ring = arg_ring;
    _ = &ring;
    return io_uring_cqe_shift_from_flags(ring.*.flags);
}
pub const struct_io_uring_cqe_iter = extern struct {
    cqes: [*c]struct_io_uring_cqe = @import("std").mem.zeroes([*c]struct_io_uring_cqe),
    mask: c_uint = @import("std").mem.zeroes(c_uint),
    shift: c_uint = @import("std").mem.zeroes(c_uint),
    head: c_uint = @import("std").mem.zeroes(c_uint),
    tail: c_uint = @import("std").mem.zeroes(c_uint),
};
// /snap/zig/13822/lib/include/stdatomic.h:145:30: warning: TODO implement translation of stmt class AtomicExprClass

// ./src/include/liburing.h:349:1: warning: unable to translate function, demoted to extern
pub extern fn io_uring_cqe_iter_init(arg_ring: [*c]const struct_io_uring) callconv(.c) struct_io_uring_cqe_iter;
pub fn io_uring_cqe_iter_next(arg_iter: [*c]struct_io_uring_cqe_iter, arg_cqe: [*c][*c]struct_io_uring_cqe) callconv(.c) bool {
    var iter = arg_iter;
    _ = &iter;
    var cqe = arg_cqe;
    _ = &cqe;
    if (iter.*.head == iter.*.tail) return @as(c_int, 0) != 0;
    cqe.* = &iter.*.cqes[((blk: {
        const ref = &iter.*.head;
        const tmp = ref.*;
        ref.* +%= 1;
        break :blk tmp;
    }) & iter.*.mask) << @intCast(iter.*.shift)];
    return @as(c_int, 1) != 0;
}
// /snap/zig/13822/lib/include/stdatomic.h:142:31: warning: TODO implement translation of stmt class AtomicExprClass

// ./src/include/liburing.h:385:20: warning: unable to translate function, demoted to extern
pub extern fn io_uring_cq_advance(arg_ring: [*c]struct_io_uring, arg_nr: c_uint) callconv(.c) void;
pub fn io_uring_cqe_seen(arg_ring: [*c]struct_io_uring, arg_cqe: [*c]struct_io_uring_cqe) callconv(.c) void {
    var ring = arg_ring;
    _ = &ring;
    var cqe = arg_cqe;
    _ = &cqe;
    if (cqe != null) {
        io_uring_cq_advance(ring, @as(c_uint, @bitCast(@as(c_int, 1))));
    }
}
pub fn io_uring_sqe_set_data(arg_sqe: [*c]struct_io_uring_sqe, arg_data: ?*anyopaque) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var data = arg_data;
    _ = &data;
    sqe.*.user_data = @as(__u64, @bitCast(@as(c_ulonglong, @as(c_ulong, @intCast(@intFromPtr(data))))));
}
pub fn io_uring_cqe_get_data(arg_cqe: [*c]const struct_io_uring_cqe) callconv(.c) ?*anyopaque {
    var cqe = arg_cqe;
    _ = &cqe;
    return @as(?*anyopaque, @ptrFromInt(@as(usize, @bitCast(@as(c_ulong, @truncate(cqe.*.user_data))))));
}
pub fn io_uring_sqe_set_data64(arg_sqe: [*c]struct_io_uring_sqe, arg_data: __u64) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var data = arg_data;
    _ = &data;
    sqe.*.user_data = data;
}
pub fn io_uring_cqe_get_data64(arg_cqe: [*c]const struct_io_uring_cqe) callconv(.c) __u64 {
    var cqe = arg_cqe;
    _ = &cqe;
    return cqe.*.user_data;
}
pub fn io_uring_sqe_set_flags(arg_sqe: [*c]struct_io_uring_sqe, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var flags = arg_flags;
    _ = &flags;
    sqe.*.flags = @as(__u8, @bitCast(@as(u8, @truncate(flags))));
}
pub fn io_uring_sqe_set_buf_group(arg_sqe: [*c]struct_io_uring_sqe, arg_bgid: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var bgid = arg_bgid;
    _ = &bgid;
    sqe.*.unnamed_3.buf_group = @as(__u16, @bitCast(@as(c_short, @truncate(bgid))));
}
pub fn __io_uring_set_target_fixed_file(arg_sqe: [*c]struct_io_uring_sqe, arg_file_index: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var file_index = arg_file_index;
    _ = &file_index;
    sqe.*.unnamed_4.file_index = file_index +% @as(c_uint, @bitCast(@as(c_int, 1)));
}
pub fn io_uring_initialize_sqe(arg_sqe: [*c]struct_io_uring_sqe) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    sqe.*.flags = 0;
    sqe.*.ioprio = 0;
    sqe.*.unnamed_2.rw_flags = 0;
    sqe.*.unnamed_3.buf_index = 0;
    sqe.*.personality = 0;
    sqe.*.unnamed_4.file_index = 0;
    sqe.*.unnamed_5.unnamed_0.addr3 = 0;
    sqe.*.unnamed_5.unnamed_0.__pad2[@as(c_uint, @intCast(@as(c_int, 0)))] = 0;
}
pub fn io_uring_prep_rw(arg_op: c_int, arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_addr: ?*const anyopaque, arg_len: c_uint, arg_offset: __u64) callconv(.c) void {
    var op = arg_op;
    _ = &op;
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var addr = arg_addr;
    _ = &addr;
    var len = arg_len;
    _ = &len;
    var offset = arg_offset;
    _ = &offset;
    sqe.*.opcode = @as(__u8, @bitCast(@as(i8, @truncate(op))));
    sqe.*.fd = fd;
    sqe.*.unnamed_0.off = offset;
    sqe.*.unnamed_1.addr = @as(__u64, @bitCast(@as(c_ulonglong, @as(c_ulong, @intCast(@intFromPtr(addr))))));
    sqe.*.len = len;
}
pub fn io_uring_prep_splice(arg_sqe: [*c]struct_io_uring_sqe, arg_fd_in: c_int, arg_off_in: i64, arg_fd_out: c_int, arg_off_out: i64, arg_nbytes: c_uint, arg_splice_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd_in = arg_fd_in;
    _ = &fd_in;
    var off_in = arg_off_in;
    _ = &off_in;
    var fd_out = arg_fd_out;
    _ = &fd_out;
    var off_out = arg_off_out;
    _ = &off_out;
    var nbytes = arg_nbytes;
    _ = &nbytes;
    var splice_flags = arg_splice_flags;
    _ = &splice_flags;
    io_uring_prep_rw(IORING_OP_SPLICE, sqe, fd_out, null, nbytes, @as(__u64, @bitCast(@as(c_longlong, off_out))));
    sqe.*.unnamed_1.splice_off_in = @as(__u64, @bitCast(@as(c_longlong, off_in)));
    sqe.*.unnamed_4.splice_fd_in = fd_in;
    sqe.*.unnamed_2.splice_flags = splice_flags;
}
pub fn io_uring_prep_tee(arg_sqe: [*c]struct_io_uring_sqe, arg_fd_in: c_int, arg_fd_out: c_int, arg_nbytes: c_uint, arg_splice_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd_in = arg_fd_in;
    _ = &fd_in;
    var fd_out = arg_fd_out;
    _ = &fd_out;
    var nbytes = arg_nbytes;
    _ = &nbytes;
    var splice_flags = arg_splice_flags;
    _ = &splice_flags;
    io_uring_prep_rw(IORING_OP_TEE, sqe, fd_out, null, nbytes, @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_1.splice_off_in = 0;
    sqe.*.unnamed_4.splice_fd_in = fd_in;
    sqe.*.unnamed_2.splice_flags = splice_flags;
}
pub fn io_uring_prep_readv(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_iovecs: [*c]const struct_iovec, arg_nr_vecs: c_uint, arg_offset: __u64) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var iovecs = arg_iovecs;
    _ = &iovecs;
    var nr_vecs = arg_nr_vecs;
    _ = &nr_vecs;
    var offset = arg_offset;
    _ = &offset;
    io_uring_prep_rw(IORING_OP_READV, sqe, fd, @as(?*const anyopaque, @ptrCast(iovecs)), nr_vecs, offset);
}
pub fn io_uring_prep_readv2(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_iovecs: [*c]const struct_iovec, arg_nr_vecs: c_uint, arg_offset: __u64, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var iovecs = arg_iovecs;
    _ = &iovecs;
    var nr_vecs = arg_nr_vecs;
    _ = &nr_vecs;
    var offset = arg_offset;
    _ = &offset;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_readv(sqe, fd, iovecs, nr_vecs, offset);
    sqe.*.unnamed_2.rw_flags = flags;
}
pub fn io_uring_prep_read_fixed(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_buf: ?*anyopaque, arg_nbytes: c_uint, arg_offset: __u64, arg_buf_index: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var buf = arg_buf;
    _ = &buf;
    var nbytes = arg_nbytes;
    _ = &nbytes;
    var offset = arg_offset;
    _ = &offset;
    var buf_index = arg_buf_index;
    _ = &buf_index;
    io_uring_prep_rw(IORING_OP_READ_FIXED, sqe, fd, buf, nbytes, offset);
    sqe.*.unnamed_3.buf_index = @as(__u16, @bitCast(@as(c_short, @truncate(buf_index))));
}
pub fn io_uring_prep_readv_fixed(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_iovecs: [*c]const struct_iovec, arg_nr_vecs: c_uint, arg_offset: __u64, arg_flags: c_int, arg_buf_index: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var iovecs = arg_iovecs;
    _ = &iovecs;
    var nr_vecs = arg_nr_vecs;
    _ = &nr_vecs;
    var offset = arg_offset;
    _ = &offset;
    var flags = arg_flags;
    _ = &flags;
    var buf_index = arg_buf_index;
    _ = &buf_index;
    io_uring_prep_readv2(sqe, fd, iovecs, nr_vecs, offset, flags);
    sqe.*.opcode = @as(__u8, @bitCast(@as(i8, @truncate(IORING_OP_READV_FIXED))));
    sqe.*.unnamed_3.buf_index = @as(__u16, @bitCast(@as(c_short, @truncate(buf_index))));
}
pub fn io_uring_prep_writev(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_iovecs: [*c]const struct_iovec, arg_nr_vecs: c_uint, arg_offset: __u64) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var iovecs = arg_iovecs;
    _ = &iovecs;
    var nr_vecs = arg_nr_vecs;
    _ = &nr_vecs;
    var offset = arg_offset;
    _ = &offset;
    io_uring_prep_rw(IORING_OP_WRITEV, sqe, fd, @as(?*const anyopaque, @ptrCast(iovecs)), nr_vecs, offset);
}
pub fn io_uring_prep_writev2(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_iovecs: [*c]const struct_iovec, arg_nr_vecs: c_uint, arg_offset: __u64, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var iovecs = arg_iovecs;
    _ = &iovecs;
    var nr_vecs = arg_nr_vecs;
    _ = &nr_vecs;
    var offset = arg_offset;
    _ = &offset;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_writev(sqe, fd, iovecs, nr_vecs, offset);
    sqe.*.unnamed_2.rw_flags = flags;
}
pub fn io_uring_prep_write_fixed(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_buf: ?*const anyopaque, arg_nbytes: c_uint, arg_offset: __u64, arg_buf_index: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var buf = arg_buf;
    _ = &buf;
    var nbytes = arg_nbytes;
    _ = &nbytes;
    var offset = arg_offset;
    _ = &offset;
    var buf_index = arg_buf_index;
    _ = &buf_index;
    io_uring_prep_rw(IORING_OP_WRITE_FIXED, sqe, fd, buf, nbytes, offset);
    sqe.*.unnamed_3.buf_index = @as(__u16, @bitCast(@as(c_short, @truncate(buf_index))));
}
pub fn io_uring_prep_writev_fixed(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_iovecs: [*c]const struct_iovec, arg_nr_vecs: c_uint, arg_offset: __u64, arg_flags: c_int, arg_buf_index: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var iovecs = arg_iovecs;
    _ = &iovecs;
    var nr_vecs = arg_nr_vecs;
    _ = &nr_vecs;
    var offset = arg_offset;
    _ = &offset;
    var flags = arg_flags;
    _ = &flags;
    var buf_index = arg_buf_index;
    _ = &buf_index;
    io_uring_prep_writev2(sqe, fd, iovecs, nr_vecs, offset, flags);
    sqe.*.opcode = @as(__u8, @bitCast(@as(i8, @truncate(IORING_OP_WRITEV_FIXED))));
    sqe.*.unnamed_3.buf_index = @as(__u16, @bitCast(@as(c_short, @truncate(buf_index))));
}
pub fn io_uring_prep_recvmsg(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_msg: [*c]struct_msghdr, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var msg = arg_msg;
    _ = &msg;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_RECVMSG, sqe, fd, @as(?*const anyopaque, @ptrCast(msg)), @as(c_uint, @bitCast(@as(c_int, 1))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.msg_flags = flags;
}
pub fn io_uring_prep_recvmsg_multishot(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_msg: [*c]struct_msghdr, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var msg = arg_msg;
    _ = &msg;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_recvmsg(sqe, fd, msg, flags);
    sqe.*.ioprio |= @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 1) << @intCast(1)))));
}
pub fn io_uring_prep_sendmsg(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_msg: [*c]const struct_msghdr, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var msg = arg_msg;
    _ = &msg;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_SENDMSG, sqe, fd, @as(?*const anyopaque, @ptrCast(msg)), @as(c_uint, @bitCast(@as(c_int, 1))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.msg_flags = flags;
}
pub fn __io_uring_prep_poll_mask(arg_poll_mask: c_uint) callconv(.c) c_uint {
    var poll_mask = arg_poll_mask;
    _ = &poll_mask;
    return poll_mask;
}
pub fn io_uring_prep_poll_add(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_poll_mask: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var poll_mask = arg_poll_mask;
    _ = &poll_mask;
    io_uring_prep_rw(IORING_OP_POLL_ADD, sqe, fd, null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.poll32_events = __io_uring_prep_poll_mask(poll_mask);
}
pub fn io_uring_prep_poll_multishot(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_poll_mask: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var poll_mask = arg_poll_mask;
    _ = &poll_mask;
    io_uring_prep_poll_add(sqe, fd, poll_mask);
    sqe.*.len = @as(c_uint, 1) << @intCast(0);
}
pub fn io_uring_prep_poll_remove(arg_sqe: [*c]struct_io_uring_sqe, arg_user_data: __u64) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var user_data = arg_user_data;
    _ = &user_data;
    io_uring_prep_rw(IORING_OP_POLL_REMOVE, sqe, -@as(c_int, 1), null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_1.addr = user_data;
}
pub fn io_uring_prep_poll_update(arg_sqe: [*c]struct_io_uring_sqe, arg_old_user_data: __u64, arg_new_user_data: __u64, arg_poll_mask: c_uint, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var old_user_data = arg_old_user_data;
    _ = &old_user_data;
    var new_user_data = arg_new_user_data;
    _ = &new_user_data;
    var poll_mask = arg_poll_mask;
    _ = &poll_mask;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_POLL_REMOVE, sqe, -@as(c_int, 1), null, flags, new_user_data);
    sqe.*.unnamed_1.addr = old_user_data;
    sqe.*.unnamed_2.poll32_events = __io_uring_prep_poll_mask(poll_mask);
}
pub fn io_uring_prep_fsync(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_fsync_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var fsync_flags = arg_fsync_flags;
    _ = &fsync_flags;
    io_uring_prep_rw(IORING_OP_FSYNC, sqe, fd, null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.fsync_flags = fsync_flags;
}
pub fn io_uring_prep_nop(arg_sqe: [*c]struct_io_uring_sqe) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    io_uring_prep_rw(IORING_OP_NOP, sqe, -@as(c_int, 1), null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
}
pub fn io_uring_prep_timeout(arg_sqe: [*c]struct_io_uring_sqe, arg_ts: [*c]struct___kernel_timespec, arg_count: c_uint, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var ts = arg_ts;
    _ = &ts;
    var count = arg_count;
    _ = &count;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_TIMEOUT, sqe, -@as(c_int, 1), @as(?*const anyopaque, @ptrCast(ts)), @as(c_uint, @bitCast(@as(c_int, 1))), @as(__u64, @bitCast(@as(c_ulonglong, count))));
    sqe.*.unnamed_2.timeout_flags = flags;
}
pub fn io_uring_prep_timeout_remove(arg_sqe: [*c]struct_io_uring_sqe, arg_user_data: __u64, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var user_data = arg_user_data;
    _ = &user_data;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_TIMEOUT_REMOVE, sqe, -@as(c_int, 1), null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_1.addr = user_data;
    sqe.*.unnamed_2.timeout_flags = flags;
}
pub fn io_uring_prep_timeout_update(arg_sqe: [*c]struct_io_uring_sqe, arg_ts: [*c]struct___kernel_timespec, arg_user_data: __u64, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var ts = arg_ts;
    _ = &ts;
    var user_data = arg_user_data;
    _ = &user_data;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_TIMEOUT_REMOVE, sqe, -@as(c_int, 1), null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_ulonglong, @as(usize, @intCast(@intFromPtr(ts)))))));
    sqe.*.unnamed_1.addr = user_data;
    sqe.*.unnamed_2.timeout_flags = flags | (@as(c_uint, 1) << @intCast(1));
}
pub fn io_uring_prep_accept(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_addr: [*c]struct_sockaddr, arg_addrlen: [*c]socklen_t, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var addr = arg_addr;
    _ = &addr;
    var addrlen = arg_addrlen;
    _ = &addrlen;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_ACCEPT, sqe, fd, @as(?*const anyopaque, @ptrCast(addr)), @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_ulonglong, @as(c_ulong, @intCast(@intFromPtr(addrlen)))))));
    sqe.*.unnamed_2.accept_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_accept_direct(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_addr: [*c]struct_sockaddr, arg_addrlen: [*c]socklen_t, arg_flags: c_int, arg_file_index: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var addr = arg_addr;
    _ = &addr;
    var addrlen = arg_addrlen;
    _ = &addrlen;
    var flags = arg_flags;
    _ = &flags;
    var file_index = arg_file_index;
    _ = &file_index;
    io_uring_prep_accept(sqe, fd, addr, addrlen, flags);
    if (file_index == ~@as(c_uint, 0)) {
        file_index -%= 1;
    }
    __io_uring_set_target_fixed_file(sqe, file_index);
}
pub fn io_uring_prep_multishot_accept(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_addr: [*c]struct_sockaddr, arg_addrlen: [*c]socklen_t, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var addr = arg_addr;
    _ = &addr;
    var addrlen = arg_addrlen;
    _ = &addrlen;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_accept(sqe, fd, addr, addrlen, flags);
    sqe.*.ioprio |= @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 1) << @intCast(0)))));
}
pub fn io_uring_prep_multishot_accept_direct(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_addr: [*c]struct_sockaddr, arg_addrlen: [*c]socklen_t, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var addr = arg_addr;
    _ = &addr;
    var addrlen = arg_addrlen;
    _ = &addrlen;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_multishot_accept(sqe, fd, addr, addrlen, flags);
    __io_uring_set_target_fixed_file(sqe, ~@as(c_uint, 0) -% @as(c_uint, @bitCast(@as(c_int, 1))));
}
pub fn io_uring_prep_cancel64(arg_sqe: [*c]struct_io_uring_sqe, arg_user_data: __u64, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var user_data = arg_user_data;
    _ = &user_data;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_ASYNC_CANCEL, sqe, -@as(c_int, 1), null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_1.addr = user_data;
    sqe.*.unnamed_2.cancel_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_cancel(arg_sqe: [*c]struct_io_uring_sqe, arg_user_data: ?*anyopaque, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var user_data = arg_user_data;
    _ = &user_data;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_cancel64(sqe, @as(__u64, @bitCast(@as(c_ulonglong, @as(usize, @intCast(@intFromPtr(user_data)))))), flags);
}
pub fn io_uring_prep_cancel_fd(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_ASYNC_CANCEL, sqe, fd, null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.cancel_flags = @as(__u32, @bitCast(flags)) | (@as(c_uint, 1) << @intCast(1));
}
pub fn io_uring_prep_link_timeout(arg_sqe: [*c]struct_io_uring_sqe, arg_ts: [*c]struct___kernel_timespec, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var ts = arg_ts;
    _ = &ts;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_LINK_TIMEOUT, sqe, -@as(c_int, 1), @as(?*const anyopaque, @ptrCast(ts)), @as(c_uint, @bitCast(@as(c_int, 1))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.timeout_flags = flags;
}
pub fn io_uring_prep_connect(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_addr: [*c]const struct_sockaddr, arg_addrlen: socklen_t) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var addr = arg_addr;
    _ = &addr;
    var addrlen = arg_addrlen;
    _ = &addrlen;
    io_uring_prep_rw(IORING_OP_CONNECT, sqe, fd, @as(?*const anyopaque, @ptrCast(addr)), @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_ulonglong, addrlen))));
}
pub fn io_uring_prep_bind(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_addr: [*c]struct_sockaddr, arg_addrlen: socklen_t) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var addr = arg_addr;
    _ = &addr;
    var addrlen = arg_addrlen;
    _ = &addrlen;
    io_uring_prep_rw(IORING_OP_BIND, sqe, fd, @as(?*const anyopaque, @ptrCast(addr)), @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_ulonglong, addrlen))));
}
pub fn io_uring_prep_listen(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_backlog: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var backlog = arg_backlog;
    _ = &backlog;
    io_uring_prep_rw(IORING_OP_LISTEN, sqe, fd, null, @as(c_uint, @bitCast(backlog)), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
}
pub const struct_epoll_event = opaque {};
pub fn io_uring_prep_epoll_wait(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_events: ?*struct_epoll_event, arg_maxevents: c_int, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var events = arg_events;
    _ = &events;
    var maxevents = arg_maxevents;
    _ = &maxevents;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_EPOLL_WAIT, sqe, fd, @as(?*const anyopaque, @ptrCast(events)), @as(c_uint, @bitCast(maxevents)), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.rw_flags = @as(__kernel_rwf_t, @bitCast(flags));
}
pub fn io_uring_prep_files_update(arg_sqe: [*c]struct_io_uring_sqe, arg_fds: [*c]c_int, arg_nr_fds: c_uint, arg_offset: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fds = arg_fds;
    _ = &fds;
    var nr_fds = arg_nr_fds;
    _ = &nr_fds;
    var offset = arg_offset;
    _ = &offset;
    io_uring_prep_rw(IORING_OP_FILES_UPDATE, sqe, -@as(c_int, 1), @as(?*const anyopaque, @ptrCast(fds)), nr_fds, @as(__u64, @bitCast(@as(c_longlong, offset))));
}
pub fn io_uring_prep_fallocate(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_mode: c_int, arg_offset: __u64, arg_len: __u64) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var mode = arg_mode;
    _ = &mode;
    var offset = arg_offset;
    _ = &offset;
    var len = arg_len;
    _ = &len;
    io_uring_prep_rw(IORING_OP_FALLOCATE, sqe, fd, null, @as(c_uint, @bitCast(mode)), offset);
    sqe.*.unnamed_1.addr = len;
}
pub fn io_uring_prep_openat(arg_sqe: [*c]struct_io_uring_sqe, arg_dfd: c_int, arg_path: [*c]const u8, arg_flags: c_int, arg_mode: mode_t) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var dfd = arg_dfd;
    _ = &dfd;
    var path = arg_path;
    _ = &path;
    var flags = arg_flags;
    _ = &flags;
    var mode = arg_mode;
    _ = &mode;
    io_uring_prep_rw(IORING_OP_OPENAT, sqe, dfd, @as(?*const anyopaque, @ptrCast(path)), mode, @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.open_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_openat_direct(arg_sqe: [*c]struct_io_uring_sqe, arg_dfd: c_int, arg_path: [*c]const u8, arg_flags: c_int, arg_mode: mode_t, arg_file_index: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var dfd = arg_dfd;
    _ = &dfd;
    var path = arg_path;
    _ = &path;
    var flags = arg_flags;
    _ = &flags;
    var mode = arg_mode;
    _ = &mode;
    var file_index = arg_file_index;
    _ = &file_index;
    io_uring_prep_openat(sqe, dfd, path, flags, mode);
    if (file_index == ~@as(c_uint, 0)) {
        file_index -%= 1;
    }
    __io_uring_set_target_fixed_file(sqe, file_index);
}
pub fn io_uring_prep_open(arg_sqe: [*c]struct_io_uring_sqe, arg_path: [*c]const u8, arg_flags: c_int, arg_mode: mode_t) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var path = arg_path;
    _ = &path;
    var flags = arg_flags;
    _ = &flags;
    var mode = arg_mode;
    _ = &mode;
    io_uring_prep_openat(sqe, -@as(c_int, 100), path, flags, mode);
}
pub fn io_uring_prep_open_direct(arg_sqe: [*c]struct_io_uring_sqe, arg_path: [*c]const u8, arg_flags: c_int, arg_mode: mode_t, arg_file_index: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var path = arg_path;
    _ = &path;
    var flags = arg_flags;
    _ = &flags;
    var mode = arg_mode;
    _ = &mode;
    var file_index = arg_file_index;
    _ = &file_index;
    io_uring_prep_openat_direct(sqe, -@as(c_int, 100), path, flags, mode, file_index);
}
pub fn io_uring_prep_close(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    io_uring_prep_rw(IORING_OP_CLOSE, sqe, fd, null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
}
pub fn io_uring_prep_close_direct(arg_sqe: [*c]struct_io_uring_sqe, arg_file_index: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var file_index = arg_file_index;
    _ = &file_index;
    io_uring_prep_close(sqe, @as(c_int, 0));
    __io_uring_set_target_fixed_file(sqe, file_index);
}
pub fn io_uring_prep_read(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_buf: ?*anyopaque, arg_nbytes: c_uint, arg_offset: __u64) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var buf = arg_buf;
    _ = &buf;
    var nbytes = arg_nbytes;
    _ = &nbytes;
    var offset = arg_offset;
    _ = &offset;
    io_uring_prep_rw(IORING_OP_READ, sqe, fd, buf, nbytes, offset);
}
pub fn io_uring_prep_read_multishot(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_nbytes: c_uint, arg_offset: __u64, arg_buf_group: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var nbytes = arg_nbytes;
    _ = &nbytes;
    var offset = arg_offset;
    _ = &offset;
    var buf_group = arg_buf_group;
    _ = &buf_group;
    io_uring_prep_rw(IORING_OP_READ_MULTISHOT, sqe, fd, null, nbytes, offset);
    sqe.*.unnamed_3.buf_group = @as(__u16, @bitCast(@as(c_short, @truncate(buf_group))));
    sqe.*.flags = @as(__u8, @bitCast(@as(u8, @truncate(@as(c_uint, 1) << @intCast(IOSQE_BUFFER_SELECT_BIT)))));
}
pub fn io_uring_prep_write(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_buf: ?*const anyopaque, arg_nbytes: c_uint, arg_offset: __u64) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var buf = arg_buf;
    _ = &buf;
    var nbytes = arg_nbytes;
    _ = &nbytes;
    var offset = arg_offset;
    _ = &offset;
    io_uring_prep_rw(IORING_OP_WRITE, sqe, fd, buf, nbytes, offset);
}
pub const struct_statx = opaque {};
pub fn io_uring_prep_statx(arg_sqe: [*c]struct_io_uring_sqe, arg_dfd: c_int, arg_path: [*c]const u8, arg_flags: c_int, arg_mask: c_uint, arg_statxbuf: ?*struct_statx) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var dfd = arg_dfd;
    _ = &dfd;
    var path = arg_path;
    _ = &path;
    var flags = arg_flags;
    _ = &flags;
    var mask = arg_mask;
    _ = &mask;
    var statxbuf = arg_statxbuf;
    _ = &statxbuf;
    io_uring_prep_rw(IORING_OP_STATX, sqe, dfd, @as(?*const anyopaque, @ptrCast(path)), mask, @as(__u64, @bitCast(@as(c_ulonglong, @as(c_ulong, @intCast(@intFromPtr(statxbuf)))))));
    sqe.*.unnamed_2.statx_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_fadvise(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_offset: __u64, arg_len: __u32, arg_advice: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var offset = arg_offset;
    _ = &offset;
    var len = arg_len;
    _ = &len;
    var advice = arg_advice;
    _ = &advice;
    io_uring_prep_rw(IORING_OP_FADVISE, sqe, fd, null, len, offset);
    sqe.*.unnamed_2.fadvise_advice = @as(__u32, @bitCast(advice));
}
pub fn io_uring_prep_madvise(arg_sqe: [*c]struct_io_uring_sqe, arg_addr: ?*anyopaque, arg_length: __u32, arg_advice: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var addr = arg_addr;
    _ = &addr;
    var length = arg_length;
    _ = &length;
    var advice = arg_advice;
    _ = &advice;
    io_uring_prep_rw(IORING_OP_MADVISE, sqe, -@as(c_int, 1), addr, length, @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.fadvise_advice = @as(__u32, @bitCast(advice));
}
pub fn io_uring_prep_fadvise64(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_offset: __u64, arg_len: off_t, arg_advice: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var offset = arg_offset;
    _ = &offset;
    var len = arg_len;
    _ = &len;
    var advice = arg_advice;
    _ = &advice;
    io_uring_prep_rw(IORING_OP_FADVISE, sqe, fd, null, @as(c_uint, @bitCast(@as(c_int, 0))), offset);
    sqe.*.unnamed_1.addr = @as(__u64, @bitCast(@as(c_longlong, len)));
    sqe.*.unnamed_2.fadvise_advice = @as(__u32, @bitCast(advice));
}
pub fn io_uring_prep_madvise64(arg_sqe: [*c]struct_io_uring_sqe, arg_addr: ?*anyopaque, arg_length: off_t, arg_advice: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var addr = arg_addr;
    _ = &addr;
    var length = arg_length;
    _ = &length;
    var advice = arg_advice;
    _ = &advice;
    io_uring_prep_rw(IORING_OP_MADVISE, sqe, -@as(c_int, 1), addr, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, length))));
    sqe.*.unnamed_2.fadvise_advice = @as(__u32, @bitCast(advice));
}
pub fn io_uring_prep_send(arg_sqe: [*c]struct_io_uring_sqe, arg_sockfd: c_int, arg_buf: ?*const anyopaque, arg_len: usize, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var sockfd = arg_sockfd;
    _ = &sockfd;
    var buf = arg_buf;
    _ = &buf;
    var len = arg_len;
    _ = &len;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_SEND, sqe, sockfd, buf, @as(__u32, @bitCast(@as(c_uint, @truncate(len)))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.msg_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_send_bundle(arg_sqe: [*c]struct_io_uring_sqe, arg_sockfd: c_int, arg_len: usize, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var sockfd = arg_sockfd;
    _ = &sockfd;
    var len = arg_len;
    _ = &len;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_send(sqe, sockfd, null, len, flags);
    sqe.*.ioprio |= @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 1) << @intCast(4)))));
}
pub fn io_uring_prep_send_set_addr(arg_sqe: [*c]struct_io_uring_sqe, arg_dest_addr: [*c]const struct_sockaddr, arg_addr_len: __u16) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var dest_addr = arg_dest_addr;
    _ = &dest_addr;
    var addr_len = arg_addr_len;
    _ = &addr_len;
    sqe.*.unnamed_0.addr2 = @as(__u64, @bitCast(@as(c_ulonglong, @as(c_ulong, @intCast(@intFromPtr(@as(?*const anyopaque, @ptrCast(dest_addr))))))));
    sqe.*.unnamed_4.unnamed_0.addr_len = addr_len;
}
pub fn io_uring_prep_sendto(arg_sqe: [*c]struct_io_uring_sqe, arg_sockfd: c_int, arg_buf: ?*const anyopaque, arg_len: usize, arg_flags: c_int, arg_addr: [*c]const struct_sockaddr, arg_addrlen: socklen_t) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var sockfd = arg_sockfd;
    _ = &sockfd;
    var buf = arg_buf;
    _ = &buf;
    var len = arg_len;
    _ = &len;
    var flags = arg_flags;
    _ = &flags;
    var addr = arg_addr;
    _ = &addr;
    var addrlen = arg_addrlen;
    _ = &addrlen;
    io_uring_prep_send(sqe, sockfd, buf, len, flags);
    io_uring_prep_send_set_addr(sqe, addr, @as(__u16, @bitCast(@as(c_ushort, @truncate(addrlen)))));
}
pub fn io_uring_prep_send_zc(arg_sqe: [*c]struct_io_uring_sqe, arg_sockfd: c_int, arg_buf: ?*const anyopaque, arg_len: usize, arg_flags: c_int, arg_zc_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var sockfd = arg_sockfd;
    _ = &sockfd;
    var buf = arg_buf;
    _ = &buf;
    var len = arg_len;
    _ = &len;
    var flags = arg_flags;
    _ = &flags;
    var zc_flags = arg_zc_flags;
    _ = &zc_flags;
    io_uring_prep_rw(IORING_OP_SEND_ZC, sqe, sockfd, buf, @as(__u32, @bitCast(@as(c_uint, @truncate(len)))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.msg_flags = @as(__u32, @bitCast(flags));
    sqe.*.ioprio = @as(__u16, @bitCast(@as(c_ushort, @truncate(zc_flags))));
}
pub fn io_uring_prep_send_zc_fixed(arg_sqe: [*c]struct_io_uring_sqe, arg_sockfd: c_int, arg_buf: ?*const anyopaque, arg_len: usize, arg_flags: c_int, arg_zc_flags: c_uint, arg_buf_index: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var sockfd = arg_sockfd;
    _ = &sockfd;
    var buf = arg_buf;
    _ = &buf;
    var len = arg_len;
    _ = &len;
    var flags = arg_flags;
    _ = &flags;
    var zc_flags = arg_zc_flags;
    _ = &zc_flags;
    var buf_index = arg_buf_index;
    _ = &buf_index;
    io_uring_prep_send_zc(sqe, sockfd, buf, len, flags, zc_flags);
    sqe.*.ioprio |= @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 1) << @intCast(2)))));
    sqe.*.unnamed_3.buf_index = @as(__u16, @bitCast(@as(c_ushort, @truncate(buf_index))));
}
pub fn io_uring_prep_sendmsg_zc(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_msg: [*c]const struct_msghdr, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var msg = arg_msg;
    _ = &msg;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_sendmsg(sqe, fd, msg, flags);
    sqe.*.opcode = @as(__u8, @bitCast(@as(i8, @truncate(IORING_OP_SENDMSG_ZC))));
}
pub fn io_uring_prep_sendmsg_zc_fixed(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_msg: [*c]const struct_msghdr, arg_flags: c_uint, arg_buf_index: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var msg = arg_msg;
    _ = &msg;
    var flags = arg_flags;
    _ = &flags;
    var buf_index = arg_buf_index;
    _ = &buf_index;
    io_uring_prep_sendmsg_zc(sqe, fd, msg, flags);
    sqe.*.ioprio |= @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 1) << @intCast(2)))));
    sqe.*.unnamed_3.buf_index = @as(__u16, @bitCast(@as(c_ushort, @truncate(buf_index))));
}
pub fn io_uring_prep_recv(arg_sqe: [*c]struct_io_uring_sqe, arg_sockfd: c_int, arg_buf: ?*anyopaque, arg_len: usize, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var sockfd = arg_sockfd;
    _ = &sockfd;
    var buf = arg_buf;
    _ = &buf;
    var len = arg_len;
    _ = &len;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_RECV, sqe, sockfd, buf, @as(__u32, @bitCast(@as(c_uint, @truncate(len)))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.msg_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_recv_multishot(arg_sqe: [*c]struct_io_uring_sqe, arg_sockfd: c_int, arg_buf: ?*anyopaque, arg_len: usize, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var sockfd = arg_sockfd;
    _ = &sockfd;
    var buf = arg_buf;
    _ = &buf;
    var len = arg_len;
    _ = &len;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_recv(sqe, sockfd, buf, len, flags);
    sqe.*.ioprio |= @as(__u16, @bitCast(@as(c_ushort, @truncate(@as(c_uint, 1) << @intCast(1)))));
}
pub fn io_uring_recvmsg_validate(arg_buf: ?*anyopaque, arg_buf_len: c_int, arg_msgh: [*c]struct_msghdr) callconv(.c) [*c]struct_io_uring_recvmsg_out {
    var buf = arg_buf;
    _ = &buf;
    var buf_len = arg_buf_len;
    _ = &buf_len;
    var msgh = arg_msgh;
    _ = &msgh;
    var header: c_ulong = (msgh.*.msg_controllen +% @as(usize, @bitCast(@as(c_ulong, msgh.*.msg_namelen)))) +% @sizeOf(struct_io_uring_recvmsg_out);
    _ = &header;
    if ((buf_len < @as(c_int, 0)) or (@as(c_ulong, @bitCast(@as(c_long, buf_len))) < header)) return null;
    return @as([*c]struct_io_uring_recvmsg_out, @ptrCast(@alignCast(buf)));
}
pub fn io_uring_recvmsg_name(arg_o: [*c]struct_io_uring_recvmsg_out) callconv(.c) ?*anyopaque {
    var o = arg_o;
    _ = &o;
    return @as(?*anyopaque, @ptrCast(&o[@as(c_uint, @intCast(@as(c_int, 1)))]));
}
pub fn io_uring_recvmsg_cmsg_firsthdr(arg_o: [*c]struct_io_uring_recvmsg_out, arg_msgh: [*c]struct_msghdr) callconv(.c) [*c]struct_cmsghdr {
    var o = arg_o;
    _ = &o;
    var msgh = arg_msgh;
    _ = &msgh;
    if (@as(c_ulong, @bitCast(@as(c_ulong, o.*.controllen))) < @sizeOf(struct_cmsghdr)) return null;
    return @as([*c]struct_cmsghdr, @ptrCast(@alignCast(@as([*c]u8, @ptrCast(@alignCast(io_uring_recvmsg_name(o)))) + msgh.*.msg_namelen)));
}
pub fn io_uring_recvmsg_cmsg_nexthdr(arg_o: [*c]struct_io_uring_recvmsg_out, arg_msgh: [*c]struct_msghdr, arg_cmsg: [*c]struct_cmsghdr) callconv(.c) [*c]struct_cmsghdr {
    var o = arg_o;
    _ = &o;
    var msgh = arg_msgh;
    _ = &msgh;
    var cmsg = arg_cmsg;
    _ = &cmsg;
    var end: [*c]u8 = undefined;
    _ = &end;
    if (cmsg.*.cmsg_len < @sizeOf(struct_cmsghdr)) return null;
    end = @as([*c]u8, @ptrCast(@alignCast(io_uring_recvmsg_cmsg_firsthdr(o, msgh)))) + o.*.controllen;
    cmsg = @as([*c]struct_cmsghdr, @ptrCast(@alignCast(@as([*c]u8, @ptrCast(@alignCast(cmsg))) + (((cmsg.*.cmsg_len +% @sizeOf(usize)) -% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1))))) & @as(usize, @bitCast(~(@sizeOf(usize) -% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1)))))))))));
    if (@as([*c]u8, @ptrCast(@alignCast(cmsg + @as(usize, @bitCast(@as(isize, @intCast(@as(c_int, 1)))))))) > end) return null;
    if ((@as([*c]u8, @ptrCast(@alignCast(cmsg))) + (((cmsg.*.cmsg_len +% @sizeOf(usize)) -% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1))))) & @as(usize, @bitCast(~(@sizeOf(usize) -% @as(c_ulong, @bitCast(@as(c_long, @as(c_int, 1))))))))) > end) return null;
    return cmsg;
}
pub fn io_uring_recvmsg_payload(arg_o: [*c]struct_io_uring_recvmsg_out, arg_msgh: [*c]struct_msghdr) callconv(.c) ?*anyopaque {
    var o = arg_o;
    _ = &o;
    var msgh = arg_msgh;
    _ = &msgh;
    return @as(?*anyopaque, @ptrCast((@as([*c]u8, @ptrCast(@alignCast(io_uring_recvmsg_name(o)))) + msgh.*.msg_namelen) + msgh.*.msg_controllen));
}
pub fn io_uring_recvmsg_payload_length(arg_o: [*c]struct_io_uring_recvmsg_out, arg_buf_len: c_int, arg_msgh: [*c]struct_msghdr) callconv(.c) c_uint {
    var o = arg_o;
    _ = &o;
    var buf_len = arg_buf_len;
    _ = &buf_len;
    var msgh = arg_msgh;
    _ = &msgh;
    var payload_start: c_ulong = undefined;
    _ = &payload_start;
    var payload_end: c_ulong = undefined;
    _ = &payload_end;
    payload_start = @as(c_ulong, @intCast(@intFromPtr(io_uring_recvmsg_payload(o, msgh))));
    payload_end = @as(c_ulong, @intCast(@intFromPtr(o))) +% @as(c_ulong, @bitCast(@as(c_long, buf_len)));
    return @as(c_uint, @bitCast(@as(c_uint, @truncate(payload_end -% payload_start))));
}
pub fn io_uring_prep_openat2(arg_sqe: [*c]struct_io_uring_sqe, arg_dfd: c_int, arg_path: [*c]const u8, arg_how: [*c]struct_open_how) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var dfd = arg_dfd;
    _ = &dfd;
    var path = arg_path;
    _ = &path;
    var how = arg_how;
    _ = &how;
    io_uring_prep_rw(IORING_OP_OPENAT2, sqe, dfd, @as(?*const anyopaque, @ptrCast(path)), @as(c_uint, @bitCast(@as(c_uint, @truncate(@sizeOf(struct_open_how))))), @as(__u64, @bitCast(@as(c_ulonglong, @as(u64, @bitCast(@as(usize, @intCast(@intFromPtr(how)))))))));
}
pub fn io_uring_prep_openat2_direct(arg_sqe: [*c]struct_io_uring_sqe, arg_dfd: c_int, arg_path: [*c]const u8, arg_how: [*c]struct_open_how, arg_file_index: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var dfd = arg_dfd;
    _ = &dfd;
    var path = arg_path;
    _ = &path;
    var how = arg_how;
    _ = &how;
    var file_index = arg_file_index;
    _ = &file_index;
    io_uring_prep_openat2(sqe, dfd, path, how);
    if (file_index == ~@as(c_uint, 0)) {
        file_index -%= 1;
    }
    __io_uring_set_target_fixed_file(sqe, file_index);
}
pub fn io_uring_prep_epoll_ctl(arg_sqe: [*c]struct_io_uring_sqe, arg_epfd: c_int, arg_fd: c_int, arg_op: c_int, arg_ev: ?*struct_epoll_event) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var epfd = arg_epfd;
    _ = &epfd;
    var fd = arg_fd;
    _ = &fd;
    var op = arg_op;
    _ = &op;
    var ev = arg_ev;
    _ = &ev;
    io_uring_prep_rw(IORING_OP_EPOLL_CTL, sqe, epfd, @as(?*const anyopaque, @ptrCast(ev)), @as(__u32, @bitCast(op)), @as(__u64, @bitCast(@as(c_ulonglong, @as(__u32, @bitCast(fd))))));
}
pub fn io_uring_prep_provide_buffers(arg_sqe: [*c]struct_io_uring_sqe, arg_addr: ?*anyopaque, arg_len: c_int, arg_nr: c_int, arg_bgid: c_int, arg_bid: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var addr = arg_addr;
    _ = &addr;
    var len = arg_len;
    _ = &len;
    var nr = arg_nr;
    _ = &nr;
    var bgid = arg_bgid;
    _ = &bgid;
    var bid = arg_bid;
    _ = &bid;
    io_uring_prep_rw(IORING_OP_PROVIDE_BUFFERS, sqe, nr, addr, @as(__u32, @bitCast(len)), @as(__u64, @bitCast(@as(c_longlong, bid))));
    sqe.*.unnamed_3.buf_group = @as(__u16, @bitCast(@as(c_short, @truncate(bgid))));
}
pub fn io_uring_prep_remove_buffers(arg_sqe: [*c]struct_io_uring_sqe, arg_nr: c_int, arg_bgid: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var nr = arg_nr;
    _ = &nr;
    var bgid = arg_bgid;
    _ = &bgid;
    io_uring_prep_rw(IORING_OP_REMOVE_BUFFERS, sqe, nr, null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_3.buf_group = @as(__u16, @bitCast(@as(c_short, @truncate(bgid))));
}
pub fn io_uring_prep_shutdown(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_how: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var how = arg_how;
    _ = &how;
    io_uring_prep_rw(IORING_OP_SHUTDOWN, sqe, fd, null, @as(__u32, @bitCast(how)), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
}
pub fn io_uring_prep_unlinkat(arg_sqe: [*c]struct_io_uring_sqe, arg_dfd: c_int, arg_path: [*c]const u8, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var dfd = arg_dfd;
    _ = &dfd;
    var path = arg_path;
    _ = &path;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_UNLINKAT, sqe, dfd, @as(?*const anyopaque, @ptrCast(path)), @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.unlink_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_unlink(arg_sqe: [*c]struct_io_uring_sqe, arg_path: [*c]const u8, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var path = arg_path;
    _ = &path;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_unlinkat(sqe, -@as(c_int, 100), path, flags);
}
pub fn io_uring_prep_renameat(arg_sqe: [*c]struct_io_uring_sqe, arg_olddfd: c_int, arg_oldpath: [*c]const u8, arg_newdfd: c_int, arg_newpath: [*c]const u8, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var olddfd = arg_olddfd;
    _ = &olddfd;
    var oldpath = arg_oldpath;
    _ = &oldpath;
    var newdfd = arg_newdfd;
    _ = &newdfd;
    var newpath = arg_newpath;
    _ = &newpath;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_RENAMEAT, sqe, olddfd, @as(?*const anyopaque, @ptrCast(oldpath)), @as(__u32, @bitCast(newdfd)), @as(__u64, @bitCast(@as(c_ulonglong, @as(u64, @bitCast(@as(usize, @intCast(@intFromPtr(newpath)))))))));
    sqe.*.unnamed_2.rename_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_rename(arg_sqe: [*c]struct_io_uring_sqe, arg_oldpath: [*c]const u8, arg_newpath: [*c]const u8) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var oldpath = arg_oldpath;
    _ = &oldpath;
    var newpath = arg_newpath;
    _ = &newpath;
    io_uring_prep_renameat(sqe, -@as(c_int, 100), oldpath, -@as(c_int, 100), newpath, @as(c_uint, @bitCast(@as(c_int, 0))));
}
pub fn io_uring_prep_sync_file_range(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_len: c_uint, arg_offset: __u64, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var len = arg_len;
    _ = &len;
    var offset = arg_offset;
    _ = &offset;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_SYNC_FILE_RANGE, sqe, fd, null, len, offset);
    sqe.*.unnamed_2.sync_range_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_mkdirat(arg_sqe: [*c]struct_io_uring_sqe, arg_dfd: c_int, arg_path: [*c]const u8, arg_mode: mode_t) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var dfd = arg_dfd;
    _ = &dfd;
    var path = arg_path;
    _ = &path;
    var mode = arg_mode;
    _ = &mode;
    io_uring_prep_rw(IORING_OP_MKDIRAT, sqe, dfd, @as(?*const anyopaque, @ptrCast(path)), mode, @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
}
pub fn io_uring_prep_mkdir(arg_sqe: [*c]struct_io_uring_sqe, arg_path: [*c]const u8, arg_mode: mode_t) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var path = arg_path;
    _ = &path;
    var mode = arg_mode;
    _ = &mode;
    io_uring_prep_mkdirat(sqe, -@as(c_int, 100), path, mode);
}
pub fn io_uring_prep_symlinkat(arg_sqe: [*c]struct_io_uring_sqe, arg_target: [*c]const u8, arg_newdirfd: c_int, arg_linkpath: [*c]const u8) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var target = arg_target;
    _ = &target;
    var newdirfd = arg_newdirfd;
    _ = &newdirfd;
    var linkpath = arg_linkpath;
    _ = &linkpath;
    io_uring_prep_rw(IORING_OP_SYMLINKAT, sqe, newdirfd, @as(?*const anyopaque, @ptrCast(target)), @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_ulonglong, @as(u64, @bitCast(@as(usize, @intCast(@intFromPtr(linkpath)))))))));
}
pub fn io_uring_prep_symlink(arg_sqe: [*c]struct_io_uring_sqe, arg_target: [*c]const u8, arg_linkpath: [*c]const u8) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var target = arg_target;
    _ = &target;
    var linkpath = arg_linkpath;
    _ = &linkpath;
    io_uring_prep_symlinkat(sqe, target, -@as(c_int, 100), linkpath);
}
pub fn io_uring_prep_linkat(arg_sqe: [*c]struct_io_uring_sqe, arg_olddfd: c_int, arg_oldpath: [*c]const u8, arg_newdfd: c_int, arg_newpath: [*c]const u8, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var olddfd = arg_olddfd;
    _ = &olddfd;
    var oldpath = arg_oldpath;
    _ = &oldpath;
    var newdfd = arg_newdfd;
    _ = &newdfd;
    var newpath = arg_newpath;
    _ = &newpath;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_LINKAT, sqe, olddfd, @as(?*const anyopaque, @ptrCast(oldpath)), @as(__u32, @bitCast(newdfd)), @as(__u64, @bitCast(@as(c_ulonglong, @as(u64, @bitCast(@as(usize, @intCast(@intFromPtr(newpath)))))))));
    sqe.*.unnamed_2.hardlink_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_link(arg_sqe: [*c]struct_io_uring_sqe, arg_oldpath: [*c]const u8, arg_newpath: [*c]const u8, arg_flags: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var oldpath = arg_oldpath;
    _ = &oldpath;
    var newpath = arg_newpath;
    _ = &newpath;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_linkat(sqe, -@as(c_int, 100), oldpath, -@as(c_int, 100), newpath, flags);
}
pub fn io_uring_prep_msg_ring_cqe_flags(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_len: c_uint, arg_data: __u64, arg_flags: c_uint, arg_cqe_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var len = arg_len;
    _ = &len;
    var data = arg_data;
    _ = &data;
    var flags = arg_flags;
    _ = &flags;
    var cqe_flags = arg_cqe_flags;
    _ = &cqe_flags;
    io_uring_prep_rw(IORING_OP_MSG_RING, sqe, fd, null, len, data);
    sqe.*.unnamed_2.msg_ring_flags = (@as(c_uint, 1) << @intCast(1)) | flags;
    sqe.*.unnamed_4.file_index = cqe_flags;
}
pub fn io_uring_prep_msg_ring(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_len: c_uint, arg_data: __u64, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var len = arg_len;
    _ = &len;
    var data = arg_data;
    _ = &data;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_MSG_RING, sqe, fd, null, len, data);
    sqe.*.unnamed_2.msg_ring_flags = flags;
}
pub fn io_uring_prep_msg_ring_fd(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_source_fd: c_int, arg_target_fd: c_int, arg_data: __u64, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var source_fd = arg_source_fd;
    _ = &source_fd;
    var target_fd = arg_target_fd;
    _ = &target_fd;
    var data = arg_data;
    _ = &data;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_MSG_RING, sqe, fd, @as(?*anyopaque, @ptrFromInt(@as(usize, @bitCast(@as(c_long, IORING_MSG_SEND_FD))))), @as(c_uint, @bitCast(@as(c_int, 0))), data);
    sqe.*.unnamed_5.unnamed_0.addr3 = @as(__u64, @bitCast(@as(c_longlong, source_fd)));
    if (@as(c_uint, @bitCast(target_fd)) == ~@as(c_uint, 0)) {
        target_fd -= 1;
    }
    __io_uring_set_target_fixed_file(sqe, @as(c_uint, @bitCast(target_fd)));
    sqe.*.unnamed_2.msg_ring_flags = flags;
}
pub fn io_uring_prep_msg_ring_fd_alloc(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_source_fd: c_int, arg_data: __u64, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var source_fd = arg_source_fd;
    _ = &source_fd;
    var data = arg_data;
    _ = &data;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_msg_ring_fd(sqe, fd, source_fd, @as(c_int, @bitCast(~@as(c_uint, 0))), data, flags);
}
pub fn io_uring_prep_getxattr(arg_sqe: [*c]struct_io_uring_sqe, arg_name: [*c]const u8, arg_value: [*c]u8, arg_path: [*c]const u8, arg_len: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var name = arg_name;
    _ = &name;
    var value = arg_value;
    _ = &value;
    var path = arg_path;
    _ = &path;
    var len = arg_len;
    _ = &len;
    io_uring_prep_rw(IORING_OP_GETXATTR, sqe, @as(c_int, 0), @as(?*const anyopaque, @ptrCast(name)), len, @as(__u64, @bitCast(@as(c_ulonglong, @as(usize, @intCast(@intFromPtr(value)))))));
    sqe.*.unnamed_5.unnamed_0.addr3 = @as(__u64, @bitCast(@as(c_ulonglong, @as(usize, @intCast(@intFromPtr(path))))));
    sqe.*.unnamed_2.xattr_flags = 0;
}
pub fn io_uring_prep_setxattr(arg_sqe: [*c]struct_io_uring_sqe, arg_name: [*c]const u8, arg_value: [*c]const u8, arg_path: [*c]const u8, arg_flags: c_int, arg_len: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var name = arg_name;
    _ = &name;
    var value = arg_value;
    _ = &value;
    var path = arg_path;
    _ = &path;
    var flags = arg_flags;
    _ = &flags;
    var len = arg_len;
    _ = &len;
    io_uring_prep_rw(IORING_OP_SETXATTR, sqe, @as(c_int, 0), @as(?*const anyopaque, @ptrCast(name)), len, @as(__u64, @bitCast(@as(c_ulonglong, @as(usize, @intCast(@intFromPtr(value)))))));
    sqe.*.unnamed_5.unnamed_0.addr3 = @as(__u64, @bitCast(@as(c_ulonglong, @as(usize, @intCast(@intFromPtr(path))))));
    sqe.*.unnamed_2.xattr_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_fgetxattr(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_name: [*c]const u8, arg_value: [*c]u8, arg_len: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var name = arg_name;
    _ = &name;
    var value = arg_value;
    _ = &value;
    var len = arg_len;
    _ = &len;
    io_uring_prep_rw(IORING_OP_FGETXATTR, sqe, fd, @as(?*const anyopaque, @ptrCast(name)), len, @as(__u64, @bitCast(@as(c_ulonglong, @as(usize, @intCast(@intFromPtr(value)))))));
    sqe.*.unnamed_2.xattr_flags = 0;
}
pub fn io_uring_prep_fsetxattr(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_name: [*c]const u8, arg_value: [*c]const u8, arg_flags: c_int, arg_len: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var name = arg_name;
    _ = &name;
    var value = arg_value;
    _ = &value;
    var flags = arg_flags;
    _ = &flags;
    var len = arg_len;
    _ = &len;
    io_uring_prep_rw(IORING_OP_FSETXATTR, sqe, fd, @as(?*const anyopaque, @ptrCast(name)), len, @as(__u64, @bitCast(@as(c_ulonglong, @as(usize, @intCast(@intFromPtr(value)))))));
    sqe.*.unnamed_2.xattr_flags = @as(__u32, @bitCast(flags));
}
pub fn io_uring_prep_socket(arg_sqe: [*c]struct_io_uring_sqe, arg_domain: c_int, arg_type: c_int, arg_protocol: c_int, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var domain = arg_domain;
    _ = &domain;
    var @"type" = arg_type;
    _ = &@"type";
    var protocol = arg_protocol;
    _ = &protocol;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_SOCKET, sqe, domain, null, @as(c_uint, @bitCast(protocol)), @as(__u64, @bitCast(@as(c_longlong, @"type"))));
    sqe.*.unnamed_2.rw_flags = @as(__kernel_rwf_t, @bitCast(flags));
}
pub fn io_uring_prep_socket_direct(arg_sqe: [*c]struct_io_uring_sqe, arg_domain: c_int, arg_type: c_int, arg_protocol: c_int, arg_file_index: c_uint, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var domain = arg_domain;
    _ = &domain;
    var @"type" = arg_type;
    _ = &@"type";
    var protocol = arg_protocol;
    _ = &protocol;
    var file_index = arg_file_index;
    _ = &file_index;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_SOCKET, sqe, domain, null, @as(c_uint, @bitCast(protocol)), @as(__u64, @bitCast(@as(c_longlong, @"type"))));
    sqe.*.unnamed_2.rw_flags = @as(__kernel_rwf_t, @bitCast(flags));
    if (file_index == ~@as(c_uint, 0)) {
        file_index -%= 1;
    }
    __io_uring_set_target_fixed_file(sqe, file_index);
}
pub fn io_uring_prep_socket_direct_alloc(arg_sqe: [*c]struct_io_uring_sqe, arg_domain: c_int, arg_type: c_int, arg_protocol: c_int, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var domain = arg_domain;
    _ = &domain;
    var @"type" = arg_type;
    _ = &@"type";
    var protocol = arg_protocol;
    _ = &protocol;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_SOCKET, sqe, domain, null, @as(c_uint, @bitCast(protocol)), @as(__u64, @bitCast(@as(c_longlong, @"type"))));
    sqe.*.unnamed_2.rw_flags = @as(__kernel_rwf_t, @bitCast(flags));
    __io_uring_set_target_fixed_file(sqe, ~@as(c_uint, 0) -% @as(c_uint, @bitCast(@as(c_int, 1))));
}
pub fn io_uring_prep_cmd_sock(arg_sqe: [*c]struct_io_uring_sqe, arg_cmd_op: c_int, arg_fd: c_int, arg_level: c_int, arg_optname: c_int, arg_optval: ?*anyopaque, arg_optlen: c_int) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var cmd_op = arg_cmd_op;
    _ = &cmd_op;
    var fd = arg_fd;
    _ = &fd;
    var level = arg_level;
    _ = &level;
    var optname = arg_optname;
    _ = &optname;
    var optval = arg_optval;
    _ = &optval;
    var optlen = arg_optlen;
    _ = &optlen;
    io_uring_prep_rw(IORING_OP_URING_CMD, sqe, fd, null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_5.optval = @as(__u64, @bitCast(@as(c_ulonglong, @as(c_ulong, @bitCast(@as(usize, @intCast(@intFromPtr(optval))))))));
    sqe.*.unnamed_1.unnamed_0.optname = @as(__u32, @bitCast(optname));
    sqe.*.unnamed_4.optlen = @as(__u32, @bitCast(optlen));
    sqe.*.unnamed_0.unnamed_0.cmd_op = @as(__u32, @bitCast(cmd_op));
    sqe.*.unnamed_1.unnamed_0.level = @as(__u32, @bitCast(level));
}
pub fn io_uring_prep_waitid(arg_sqe: [*c]struct_io_uring_sqe, arg_idtype: idtype_t, arg_id: id_t, arg_infop: [*c]siginfo_t, arg_options: c_int, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var idtype = arg_idtype;
    _ = &idtype;
    var id = arg_id;
    _ = &id;
    var infop = arg_infop;
    _ = &infop;
    var options = arg_options;
    _ = &options;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_WAITID, sqe, @as(c_int, @bitCast(id)), null, idtype, @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.waitid_flags = flags;
    sqe.*.unnamed_4.file_index = @as(__u32, @bitCast(options));
    sqe.*.unnamed_0.addr2 = @as(__u64, @bitCast(@as(c_ulonglong, @as(c_ulong, @intCast(@intFromPtr(infop))))));
}
pub fn io_uring_prep_futex_wake(arg_sqe: [*c]struct_io_uring_sqe, arg_futex: [*c]u32, arg_val: u64, arg_mask: u64, arg_futex_flags: u32, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var futex = arg_futex;
    _ = &futex;
    var val = arg_val;
    _ = &val;
    var mask = arg_mask;
    _ = &mask;
    var futex_flags = arg_futex_flags;
    _ = &futex_flags;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_FUTEX_WAKE, sqe, @as(c_int, @bitCast(futex_flags)), @as(?*const anyopaque, @ptrCast(futex)), @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_ulonglong, val))));
    sqe.*.unnamed_2.futex_flags = flags;
    sqe.*.unnamed_5.unnamed_0.addr3 = @as(__u64, @bitCast(@as(c_ulonglong, mask)));
}
pub fn io_uring_prep_futex_wait(arg_sqe: [*c]struct_io_uring_sqe, arg_futex: [*c]u32, arg_val: u64, arg_mask: u64, arg_futex_flags: u32, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var futex = arg_futex;
    _ = &futex;
    var val = arg_val;
    _ = &val;
    var mask = arg_mask;
    _ = &mask;
    var futex_flags = arg_futex_flags;
    _ = &futex_flags;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_FUTEX_WAIT, sqe, @as(c_int, @bitCast(futex_flags)), @as(?*const anyopaque, @ptrCast(futex)), @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_ulonglong, val))));
    sqe.*.unnamed_2.futex_flags = flags;
    sqe.*.unnamed_5.unnamed_0.addr3 = @as(__u64, @bitCast(@as(c_ulonglong, mask)));
}
pub const struct_futex_waitv = opaque {};
pub fn io_uring_prep_futex_waitv(arg_sqe: [*c]struct_io_uring_sqe, arg_futex: ?*struct_futex_waitv, arg_nr_futex: u32, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var futex = arg_futex;
    _ = &futex;
    var nr_futex = arg_nr_futex;
    _ = &nr_futex;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_FUTEX_WAITV, sqe, @as(c_int, 0), @as(?*const anyopaque, @ptrCast(futex)), nr_futex, @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_2.futex_flags = flags;
}
pub fn io_uring_prep_fixed_fd_install(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_flags: c_uint) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var flags = arg_flags;
    _ = &flags;
    io_uring_prep_rw(IORING_OP_FIXED_FD_INSTALL, sqe, fd, null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.flags = @as(__u8, @bitCast(@as(u8, @truncate(@as(c_uint, 1) << @intCast(IOSQE_FIXED_FILE_BIT)))));
    sqe.*.unnamed_2.install_fd_flags = flags;
}
pub fn io_uring_prep_cmd_discard(arg_sqe: [*c]struct_io_uring_sqe, arg_fd: c_int, arg_offset: u64, arg_nbytes: u64) callconv(.c) void {
    var sqe = arg_sqe;
    _ = &sqe;
    var fd = arg_fd;
    _ = &fd;
    var offset = arg_offset;
    _ = &offset;
    var nbytes = arg_nbytes;
    _ = &nbytes;
    io_uring_prep_rw(IORING_OP_URING_CMD, sqe, fd, null, @as(c_uint, @bitCast(@as(c_int, 0))), @as(__u64, @bitCast(@as(c_longlong, @as(c_int, 0)))));
    sqe.*.unnamed_0.unnamed_0.cmd_op = (((@as(c_uint, 0) << @intCast(((@as(c_int, 0) + @as(c_int, 8)) + @as(c_int, 8)) + @as(c_int, 14))) | @as(c_uint, @bitCast(@as(c_int, 18) << @intCast(@as(c_int, 0) + @as(c_int, 8))))) | @as(c_uint, @bitCast(@as(c_int, 0) << @intCast(0)))) | @as(c_uint, @bitCast(@as(c_int, 0) << @intCast((@as(c_int, 0) + @as(c_int, 8)) + @as(c_int, 8))));
    sqe.*.unnamed_1.addr = @as(__u64, @bitCast(@as(c_ulonglong, offset)));
    sqe.*.unnamed_5.unnamed_0.addr3 = @as(__u64, @bitCast(@as(c_ulonglong, nbytes)));
}
// /snap/zig/13822/lib/include/stdatomic.h:145:30: warning: TODO implement translation of stmt class AtomicExprClass

// ./src/include/liburing.h:1409:24: warning: unable to translate function, demoted to extern
pub extern fn io_uring_load_sq_head(arg_ring: [*c]const struct_io_uring) callconv(.c) c_uint;
pub fn io_uring_sq_ready(arg_ring: [*c]const struct_io_uring) callconv(.c) c_uint {
    var ring = arg_ring;
    _ = &ring;
    return ring.*.sq.sqe_tail -% io_uring_load_sq_head(ring);
}
pub fn io_uring_sq_space_left(arg_ring: [*c]const struct_io_uring) callconv(.c) c_uint {
    var ring = arg_ring;
    _ = &ring;
    return ring.*.sq.ring_entries -% io_uring_sq_ready(ring);
}
pub fn io_uring_sqe_shift_from_flags(arg_flags: c_uint) callconv(.c) c_uint {
    var flags = arg_flags;
    _ = &flags;
    return @as(c_uint, @intFromBool(!!((flags & (@as(c_uint, 1) << @intCast(10))) != 0)));
}
pub fn io_uring_sqe_shift(arg_ring: [*c]const struct_io_uring) callconv(.c) c_uint {
    var ring = arg_ring;
    _ = &ring;
    return io_uring_sqe_shift_from_flags(ring.*.flags);
}
pub fn io_uring_sqring_wait(arg_ring: [*c]struct_io_uring) callconv(.c) c_int {
    var ring = arg_ring;
    _ = &ring;
    if (!((ring.*.flags & (@as(c_uint, 1) << @intCast(1))) != 0)) return 0;
    if (io_uring_sq_space_left(ring) != 0) return 0;
    return __io_uring_sqring_wait(ring);
}
// /snap/zig/13822/lib/include/stdatomic.h:145:30: warning: TODO implement translation of stmt class AtomicExprClass

// ./src/include/liburing.h:1475:24: warning: unable to translate function, demoted to extern
pub extern fn io_uring_cq_ready(arg_ring: [*c]const struct_io_uring) callconv(.c) c_uint;
// /snap/zig/13822/lib/include/stdatomic.h:145:30: warning: TODO implement translation of stmt class AtomicExprClass

// ./src/include/liburing.h:1484:20: warning: unable to translate function, demoted to extern
pub extern fn io_uring_cq_has_overflow(arg_ring: [*c]const struct_io_uring) callconv(.c) bool;
pub fn io_uring_cq_eventfd_enabled(arg_ring: [*c]const struct_io_uring) callconv(.c) bool {
    var ring = arg_ring;
    _ = &ring;
    if (!(ring.*.cq.kflags != null)) return @as(c_int, 1) != 0;
    return !((ring.*.cq.kflags.* & (@as(c_uint, 1) << @intCast(0))) != 0);
}
// /snap/zig/13822/lib/include/stdatomic.h:142:31: warning: TODO implement translation of stmt class AtomicExprClass

// ./src/include/liburing.h:1504:19: warning: unable to translate function, demoted to extern
pub extern fn io_uring_cq_eventfd_toggle(arg_ring: [*c]struct_io_uring, arg_enabled: bool) callconv(.c) c_int;
pub fn io_uring_wait_cqe_nr(arg_ring: [*c]struct_io_uring, arg_cqe_ptr: [*c][*c]struct_io_uring_cqe, arg_wait_nr: c_uint) callconv(.c) c_int {
    var ring = arg_ring;
    _ = &ring;
    var cqe_ptr = arg_cqe_ptr;
    _ = &cqe_ptr;
    var wait_nr = arg_wait_nr;
    _ = &wait_nr;
    return __io_uring_get_cqe(ring, cqe_ptr, @as(c_uint, @bitCast(@as(c_int, 0))), wait_nr, null);
}
// /snap/zig/13822/lib/include/stdatomic.h:145:30: warning: TODO implement translation of stmt class AtomicExprClass

// ./src/include/liburing.h:1544:19: warning: unable to translate function, demoted to extern
pub extern fn __io_uring_peek_cqe(arg_ring: [*c]struct_io_uring, arg_cqe_ptr: [*c][*c]struct_io_uring_cqe, arg_nr_available: [*c]c_uint) callconv(.c) c_int;
pub fn io_uring_peek_cqe(arg_ring: [*c]struct_io_uring, arg_cqe_ptr: [*c][*c]struct_io_uring_cqe) callconv(.c) c_int {
    var ring = arg_ring;
    _ = &ring;
    var cqe_ptr = arg_cqe_ptr;
    _ = &cqe_ptr;
    if (!(__io_uring_peek_cqe(ring, cqe_ptr, null) != 0) and (cqe_ptr.* != null)) return 0;
    return io_uring_wait_cqe_nr(ring, cqe_ptr, @as(c_uint, @bitCast(@as(c_int, 0))));
}
pub fn io_uring_wait_cqe(arg_ring: [*c]struct_io_uring, arg_cqe_ptr: [*c][*c]struct_io_uring_cqe) callconv(.c) c_int {
    var ring = arg_ring;
    _ = &ring;
    var cqe_ptr = arg_cqe_ptr;
    _ = &cqe_ptr;
    if (!(__io_uring_peek_cqe(ring, cqe_ptr, null) != 0) and (cqe_ptr.* != null)) return 0;
    return io_uring_wait_cqe_nr(ring, cqe_ptr, @as(c_uint, @bitCast(@as(c_int, 1))));
}
pub fn _io_uring_get_sqe(arg_ring: [*c]struct_io_uring) callconv(.c) [*c]struct_io_uring_sqe {
    var ring = arg_ring;
    _ = &ring;
    var sq: [*c]struct_io_uring_sq = &ring.*.sq;
    _ = &sq;
    var head: c_uint = io_uring_load_sq_head(ring);
    _ = &head;
    var tail: c_uint = sq.*.sqe_tail;
    _ = &tail;
    var sqe: [*c]struct_io_uring_sqe = undefined;
    _ = &sqe;
    if ((tail -% head) >= sq.*.ring_entries) return null;
    sqe = &sq.*.sqes[(tail & sq.*.ring_mask) << @intCast(io_uring_sqe_shift(ring))];
    sq.*.sqe_tail = tail +% @as(c_uint, @bitCast(@as(c_int, 1)));
    io_uring_initialize_sqe(sqe);
    return sqe;
}
pub fn io_uring_buf_ring_mask(arg_ring_entries: __u32) callconv(.c) c_int {
    var ring_entries = arg_ring_entries;
    _ = &ring_entries;
    return @as(c_int, @bitCast(ring_entries -% @as(__u32, @bitCast(@as(c_int, 1)))));
}
pub fn io_uring_buf_ring_init(arg_br: [*c]struct_io_uring_buf_ring) callconv(.c) void {
    var br = arg_br;
    _ = &br;
    br.*.unnamed_0.unnamed_0.tail = 0;
}
pub fn io_uring_buf_ring_add(arg_br: [*c]struct_io_uring_buf_ring, arg_addr: ?*anyopaque, arg_len: c_uint, arg_bid: c_ushort, arg_mask: c_int, arg_buf_offset: c_int) callconv(.c) void {
    var br = arg_br;
    _ = &br;
    var addr = arg_addr;
    _ = &addr;
    var len = arg_len;
    _ = &len;
    var bid = arg_bid;
    _ = &bid;
    var mask = arg_mask;
    _ = &mask;
    var buf_offset = arg_buf_offset;
    _ = &buf_offset;
    var buf: [*c]struct_io_uring_buf = &br.*.unnamed_0.bufs()[@as(c_uint, @intCast((@as(c_int, @bitCast(@as(c_uint, br.*.unnamed_0.unnamed_0.tail))) + buf_offset) & mask))];
    _ = &buf;
    buf.*.addr = @as(__u64, @bitCast(@as(c_ulonglong, @as(c_ulong, @bitCast(@as(usize, @intCast(@intFromPtr(addr))))))));
    buf.*.len = len;
    buf.*.bid = bid;
}
// /snap/zig/13822/lib/include/stdatomic.h:142:31: warning: TODO implement translation of stmt class AtomicExprClass

// ./src/include/liburing.h:1664:20: warning: unable to translate function, demoted to extern
pub extern fn io_uring_buf_ring_advance(arg_br: [*c]struct_io_uring_buf_ring, arg_count: c_int) callconv(.c) void;
pub fn __io_uring_buf_ring_cq_advance(arg_ring: [*c]struct_io_uring, arg_br: [*c]struct_io_uring_buf_ring, arg_cq_count: c_int, arg_buf_count: c_int) callconv(.c) void {
    var ring = arg_ring;
    _ = &ring;
    var br = arg_br;
    _ = &br;
    var cq_count = arg_cq_count;
    _ = &cq_count;
    var buf_count = arg_buf_count;
    _ = &buf_count;
    io_uring_buf_ring_advance(br, buf_count);
    io_uring_cq_advance(ring, @as(c_uint, @bitCast(cq_count)));
}
pub fn io_uring_buf_ring_cq_advance(arg_ring: [*c]struct_io_uring, arg_br: [*c]struct_io_uring_buf_ring, arg_count: c_int) callconv(.c) void {
    var ring = arg_ring;
    _ = &ring;
    var br = arg_br;
    _ = &br;
    var count = arg_count;
    _ = &count;
    __io_uring_buf_ring_cq_advance(ring, br, count, count);
}
pub fn io_uring_buf_ring_available(arg_ring: [*c]struct_io_uring, arg_br: [*c]struct_io_uring_buf_ring, arg_bgid: c_ushort) callconv(.c) c_int {
    var ring = arg_ring;
    _ = &ring;
    var br = arg_br;
    _ = &br;
    var bgid = arg_bgid;
    _ = &bgid;
    var head: u16 = undefined;
    _ = &head;
    var ret: c_int = undefined;
    _ = &ret;
    ret = io_uring_buf_ring_head(ring, @as(c_int, @bitCast(@as(c_uint, bgid))), &head);
    if (ret != 0) return ret;
    return @as(c_int, @bitCast(@as(c_uint, @as(u16, @bitCast(@as(c_short, @truncate(@as(c_int, @bitCast(@as(c_uint, br.*.unnamed_0.unnamed_0.tail))) - @as(c_int, @bitCast(@as(c_uint, head))))))))));
}
pub fn io_uring_get_sqe(arg_ring: [*c]struct_io_uring) callconv(.c) [*c]struct_io_uring_sqe {
    var ring = arg_ring;
    _ = &ring;
    return _io_uring_get_sqe(ring);
}
pub extern fn io_uring_mlock_size(entries: c_uint, flags: c_uint) isize;
pub extern fn io_uring_mlock_size_params(entries: c_uint, p: [*c]struct_io_uring_params) isize;
pub extern fn io_uring_major_version() c_int;
pub extern fn io_uring_minor_version() c_int;
pub extern fn io_uring_check_version(major: c_int, minor: c_int) bool;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 19);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 7);
pub const __clang_version__ = "19.1.7 (https://github.com/ziglang/zig-bootstrap 1c3c59435891bc9caf8cd1d3783773369d191c5f)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 19.1.7 (https://github.com/ziglang/zig-bootstrap 1c3c59435891bc9caf8cd1d3783773369d191c5f)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):202:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):224:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):232:9
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):363:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):364:9
pub const __znver4 = @as(c_int, 1);
pub const __znver4__ = @as(c_int, 1);
pub const __tune_znver4__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __VAES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __VPCLMULQDQ__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __GFNI__ = @as(c_int, 1);
pub const __EVEX512__ = @as(c_int, 1);
pub const __AVX512CD__ = @as(c_int, 1);
pub const __AVX512VPOPCNTDQ__ = @as(c_int, 1);
pub const __AVX512VNNI__ = @as(c_int, 1);
pub const __AVX512BF16__ = @as(c_int, 1);
pub const __AVX512DQ__ = @as(c_int, 1);
pub const __AVX512BITALG__ = @as(c_int, 1);
pub const __AVX512BW__ = @as(c_int, 1);
pub const __AVX512VL__ = @as(c_int, 1);
pub const __EVEX256__ = @as(c_int, 1);
pub const __AVX512VBMI__ = @as(c_int, 1);
pub const __AVX512VBMI2__ = @as(c_int, 1);
pub const __AVX512IFMA__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __PKU__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLWB__ = @as(c_int, 1);
pub const __WBNOINVD__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __RDPID__ = @as(c_int, 1);
pub const __RDPRU__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX512F__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const LIB_URING_H = "";
pub const _SYS_SOCKET_H = @as(c_int, 1);
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`");
// /usr/include/features.h:188:9
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC2X = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const __GLIBC_USE_C2X_STRTOL = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_60559_BFP__ = @as(c_long, 201404);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_IEC_60559_COMPLEX__ = @as(c_long, 201404);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub const __GLIBC_MINOR__ = @as(c_int, 39);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:45:10
pub inline fn __glibc_has_builtin(name: anytype) @TypeOf(__has_builtin(name)) {
    _ = &name;
    return __has_builtin(name);
}
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:10
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:79:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:80:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:81:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:82:11
pub const __COLD = @compileError("unable to translate macro: undefined identifier `__cold__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:102:11
pub inline fn __P(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:131:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:132:9
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    _ = &ptr;
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    _ = &ptr;
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    _ = &__o;
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    _ = &__o;
    return __bos(__o);
}
pub const __warnattr = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:216:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:217:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:225:10
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:256:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:263:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:265:11
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token ','");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:268:10
pub inline fn __ASMNAME2(prefix: anytype, cname: anytype) @TypeOf(__STRING(prefix) ++ cname) {
    _ = &prefix;
    _ = &cname;
    return __STRING(prefix) ++ cname;
}
pub const __REDIRECT_FORTIFY = __REDIRECT;
pub const __REDIRECT_FORTIFY_NTH = __REDIRECT_NTH;
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:298:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:309:10
pub const __attribute_alloc_align__ = @compileError("unable to translate macro: undefined identifier `__alloc_align__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:315:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:325:10
pub const __attribute_const__ = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:332:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:338:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__used__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:347:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:348:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:356:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:366:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__format_arg__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:379:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:389:10
pub const __attribute_nonnull__ = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:401:11
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute_nonnull__(params)) {
    _ = &params;
    return __attribute_nonnull__(params);
}
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__returns_nonnull__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:414:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:423:10
pub const __wur = "";
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:441:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__artificial__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:450:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:468:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:469:11
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = @compileError("unable to translate C expr: unexpected token '__restrict'");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:512:10
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:561:10
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    return name ++ proto ++ __THROW;
}
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:638:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:639:10
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:653:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:654:10
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __fortified_attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:699:11
pub const __attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:700:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:701:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:711:10
pub const __attr_dealloc_free = "";
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__returns_twice__`");
// /usr/include/x86_64-linux-gnu/sys/cdefs.h:718:10
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const __iovec_defined = @as(c_int, 1);
pub const __need_size_t = "";
pub const _SIZE_T = "";
pub const __BITS_SOCKET_H = "";
pub const _SYS_TYPES_H = @as(c_int, 1);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token 'typedef'");
// /usr/include/x86_64-linux-gnu/bits/types.h:137:10
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`");
// /usr/include/x86_64-linux-gnu/bits/typesizes.h:73:9
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const __u_char_defined = "";
pub const __ino_t_defined = "";
pub const __dev_t_defined = "";
pub const __gid_t_defined = "";
pub const __mode_t_defined = "";
pub const __nlink_t_defined = "";
pub const __uid_t_defined = "";
pub const __off_t_defined = "";
pub const __pid_t_defined = "";
pub const __id_t_defined = "";
pub const __ssize_t_defined = "";
pub const __daddr_t_defined = "";
pub const __key_t_defined = "";
pub const __clock_t_defined = @as(c_int, 1);
pub const __clockid_t_defined = @as(c_int, 1);
pub const __time_t_defined = @as(c_int, 1);
pub const __timer_t_defined = @as(c_int, 1);
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const __BIT_TYPES_DEFINED__ = @as(c_int, 1);
pub const _ENDIAN_H = @as(c_int, 1);
pub const _BITS_ENDIAN_H = @as(c_int, 1);
pub const __LITTLE_ENDIAN = @as(c_int, 1234);
pub const __BIG_ENDIAN = @as(c_int, 4321);
pub const __PDP_ENDIAN = @as(c_int, 3412);
pub const _BITS_ENDIANNESS_H = @as(c_int, 1);
pub const __BYTE_ORDER = __LITTLE_ENDIAN;
pub const __FLOAT_WORD_ORDER = __BYTE_ORDER;
pub inline fn __LONG_LONG_PAIR(HI: anytype, LO: anytype) @TypeOf(HI) {
    _ = &HI;
    _ = &LO;
    return blk: {
        _ = &LO;
        break :blk HI;
    };
}
pub const LITTLE_ENDIAN = __LITTLE_ENDIAN;
pub const BIG_ENDIAN = __BIG_ENDIAN;
pub const PDP_ENDIAN = __PDP_ENDIAN;
pub const BYTE_ORDER = __BYTE_ORDER;
pub const _BITS_BYTESWAP_H = @as(c_int, 1);
pub inline fn __bswap_constant_16(x: anytype) __uint16_t {
    _ = &x;
    return @import("std").zig.c_translation.cast(__uint16_t, ((x >> @as(c_int, 8)) & @as(c_int, 0xff)) | ((x & @as(c_int, 0xff)) << @as(c_int, 8)));
}
pub inline fn __bswap_constant_32(x: anytype) @TypeOf(((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hex)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hex)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24))) {
    _ = &x;
    return ((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hex)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hex)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24));
}
pub inline fn __bswap_constant_64(x: anytype) @TypeOf(((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56))) {
    _ = &x;
    return ((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56));
}
pub const _BITS_UINTN_IDENTITY_H = @as(c_int, 1);
pub inline fn htobe16(x: anytype) @TypeOf(__bswap_16(x)) {
    _ = &x;
    return __bswap_16(x);
}
pub inline fn htole16(x: anytype) @TypeOf(__uint16_identity(x)) {
    _ = &x;
    return __uint16_identity(x);
}
pub inline fn be16toh(x: anytype) @TypeOf(__bswap_16(x)) {
    _ = &x;
    return __bswap_16(x);
}
pub inline fn le16toh(x: anytype) @TypeOf(__uint16_identity(x)) {
    _ = &x;
    return __uint16_identity(x);
}
pub inline fn htobe32(x: anytype) @TypeOf(__bswap_32(x)) {
    _ = &x;
    return __bswap_32(x);
}
pub inline fn htole32(x: anytype) @TypeOf(__uint32_identity(x)) {
    _ = &x;
    return __uint32_identity(x);
}
pub inline fn be32toh(x: anytype) @TypeOf(__bswap_32(x)) {
    _ = &x;
    return __bswap_32(x);
}
pub inline fn le32toh(x: anytype) @TypeOf(__uint32_identity(x)) {
    _ = &x;
    return __uint32_identity(x);
}
pub inline fn htobe64(x: anytype) @TypeOf(__bswap_64(x)) {
    _ = &x;
    return __bswap_64(x);
}
pub inline fn htole64(x: anytype) @TypeOf(__uint64_identity(x)) {
    _ = &x;
    return __uint64_identity(x);
}
pub inline fn be64toh(x: anytype) @TypeOf(__bswap_64(x)) {
    _ = &x;
    return __bswap_64(x);
}
pub inline fn le64toh(x: anytype) @TypeOf(__uint64_identity(x)) {
    _ = &x;
    return __uint64_identity(x);
}
pub const _SYS_SELECT_H = @as(c_int, 1);
pub const __FD_ZERO = @compileError("unable to translate macro: undefined identifier `__i`");
// /usr/include/x86_64-linux-gnu/bits/select.h:25:9
pub const __FD_SET = @compileError("unable to translate C expr: expected ')' instead got '|='");
// /usr/include/x86_64-linux-gnu/bits/select.h:32:9
pub const __FD_CLR = @compileError("unable to translate C expr: expected ')' instead got '&='");
// /usr/include/x86_64-linux-gnu/bits/select.h:34:9
pub inline fn __FD_ISSET(d: anytype, s: anytype) @TypeOf((__FDS_BITS(s)[@as(usize, @intCast(__FD_ELT(d)))] & __FD_MASK(d)) != @as(c_int, 0)) {
    _ = &d;
    _ = &s;
    return (__FDS_BITS(s)[@as(usize, @intCast(__FD_ELT(d)))] & __FD_MASK(d)) != @as(c_int, 0);
}
pub const __sigset_t_defined = @as(c_int, 1);
pub const ____sigset_t_defined = "";
pub const _SIGSET_NWORDS = @import("std").zig.c_translation.MacroArithmetic.div(@as(c_int, 1024), @as(c_int, 8) * @import("std").zig.c_translation.sizeof(c_ulong));
pub const __timeval_defined = @as(c_int, 1);
pub const _STRUCT_TIMESPEC = @as(c_int, 1);
pub const __suseconds_t_defined = "";
pub const __NFDBITS = @as(c_int, 8) * @import("std").zig.c_translation.cast(c_int, @import("std").zig.c_translation.sizeof(__fd_mask));
pub inline fn __FD_ELT(d: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(d, __NFDBITS)) {
    _ = &d;
    return @import("std").zig.c_translation.MacroArithmetic.div(d, __NFDBITS);
}
pub inline fn __FD_MASK(d: anytype) __fd_mask {
    _ = &d;
    return @import("std").zig.c_translation.cast(__fd_mask, @as(c_ulong, 1) << @import("std").zig.c_translation.MacroArithmetic.rem(d, __NFDBITS));
}
pub inline fn __FDS_BITS(set: anytype) @TypeOf(set.*.__fds_bits) {
    _ = &set;
    return set.*.__fds_bits;
}
pub const FD_SETSIZE = __FD_SETSIZE;
pub const NFDBITS = __NFDBITS;
pub inline fn FD_SET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_SET(fd, fdsetp)) {
    _ = &fd;
    _ = &fdsetp;
    return __FD_SET(fd, fdsetp);
}
pub inline fn FD_CLR(fd: anytype, fdsetp: anytype) @TypeOf(__FD_CLR(fd, fdsetp)) {
    _ = &fd;
    _ = &fdsetp;
    return __FD_CLR(fd, fdsetp);
}
pub inline fn FD_ISSET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_ISSET(fd, fdsetp)) {
    _ = &fd;
    _ = &fdsetp;
    return __FD_ISSET(fd, fdsetp);
}
pub inline fn FD_ZERO(fdsetp: anytype) @TypeOf(__FD_ZERO(fdsetp)) {
    _ = &fdsetp;
    return __FD_ZERO(fdsetp);
}
pub const __blksize_t_defined = "";
pub const __blkcnt_t_defined = "";
pub const __fsblkcnt_t_defined = "";
pub const __fsfilcnt_t_defined = "";
pub const _BITS_PTHREADTYPES_COMMON_H = @as(c_int, 1);
pub const _THREAD_SHARED_TYPES_H = @as(c_int, 1);
pub const _BITS_PTHREADTYPES_ARCH_H = @as(c_int, 1);
pub const __SIZEOF_PTHREAD_MUTEX_T = @as(c_int, 40);
pub const __SIZEOF_PTHREAD_ATTR_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_RWLOCK_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_BARRIER_T = @as(c_int, 32);
pub const __SIZEOF_PTHREAD_MUTEXATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_COND_T = @as(c_int, 48);
pub const __SIZEOF_PTHREAD_CONDATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T = @as(c_int, 8);
pub const __SIZEOF_PTHREAD_BARRIERATTR_T = @as(c_int, 4);
pub const __LOCK_ALIGNMENT = "";
pub const __ONCE_ALIGNMENT = "";
pub const _BITS_ATOMIC_WIDE_COUNTER_H = "";
pub const _THREAD_MUTEX_INTERNAL_H = @as(c_int, 1);
pub const __PTHREAD_MUTEX_HAVE_PREV = @as(c_int, 1);
pub const __PTHREAD_MUTEX_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/x86_64-linux-gnu/bits/struct_mutex.h:56:10
pub const _RWLOCK_INTERNAL_H = "";
pub const __PTHREAD_RWLOCK_ELISION_EXTRA = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/x86_64-linux-gnu/bits/struct_rwlock.h:40:11
pub inline fn __PTHREAD_RWLOCK_INITIALIZER(__flags: anytype) @TypeOf(__flags) {
    _ = &__flags;
    return blk: {
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = &__PTHREAD_RWLOCK_ELISION_EXTRA;
        _ = @as(c_int, 0);
        break :blk __flags;
    };
}
pub const __ONCE_FLAG_INIT = @compileError("unable to translate C expr: unexpected token '{'");
// /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:113:9
pub const __have_pthread_attr_t = @as(c_int, 1);
pub const __socklen_t_defined = "";
pub const PF_UNSPEC = @as(c_int, 0);
pub const PF_LOCAL = @as(c_int, 1);
pub const PF_UNIX = PF_LOCAL;
pub const PF_FILE = PF_LOCAL;
pub const PF_INET = @as(c_int, 2);
pub const PF_AX25 = @as(c_int, 3);
pub const PF_IPX = @as(c_int, 4);
pub const PF_APPLETALK = @as(c_int, 5);
pub const PF_NETROM = @as(c_int, 6);
pub const PF_BRIDGE = @as(c_int, 7);
pub const PF_ATMPVC = @as(c_int, 8);
pub const PF_X25 = @as(c_int, 9);
pub const PF_INET6 = @as(c_int, 10);
pub const PF_ROSE = @as(c_int, 11);
pub const PF_DECnet = @as(c_int, 12);
pub const PF_NETBEUI = @as(c_int, 13);
pub const PF_SECURITY = @as(c_int, 14);
pub const PF_KEY = @as(c_int, 15);
pub const PF_NETLINK = @as(c_int, 16);
pub const PF_ROUTE = PF_NETLINK;
pub const PF_PACKET = @as(c_int, 17);
pub const PF_ASH = @as(c_int, 18);
pub const PF_ECONET = @as(c_int, 19);
pub const PF_ATMSVC = @as(c_int, 20);
pub const PF_RDS = @as(c_int, 21);
pub const PF_SNA = @as(c_int, 22);
pub const PF_IRDA = @as(c_int, 23);
pub const PF_PPPOX = @as(c_int, 24);
pub const PF_WANPIPE = @as(c_int, 25);
pub const PF_LLC = @as(c_int, 26);
pub const PF_IB = @as(c_int, 27);
pub const PF_MPLS = @as(c_int, 28);
pub const PF_CAN = @as(c_int, 29);
pub const PF_TIPC = @as(c_int, 30);
pub const PF_BLUETOOTH = @as(c_int, 31);
pub const PF_IUCV = @as(c_int, 32);
pub const PF_RXRPC = @as(c_int, 33);
pub const PF_ISDN = @as(c_int, 34);
pub const PF_PHONET = @as(c_int, 35);
pub const PF_IEEE802154 = @as(c_int, 36);
pub const PF_CAIF = @as(c_int, 37);
pub const PF_ALG = @as(c_int, 38);
pub const PF_NFC = @as(c_int, 39);
pub const PF_VSOCK = @as(c_int, 40);
pub const PF_KCM = @as(c_int, 41);
pub const PF_QIPCRTR = @as(c_int, 42);
pub const PF_SMC = @as(c_int, 43);
pub const PF_XDP = @as(c_int, 44);
pub const PF_MCTP = @as(c_int, 45);
pub const PF_MAX = @as(c_int, 46);
pub const AF_UNSPEC = PF_UNSPEC;
pub const AF_LOCAL = PF_LOCAL;
pub const AF_UNIX = PF_UNIX;
pub const AF_FILE = PF_FILE;
pub const AF_INET = PF_INET;
pub const AF_AX25 = PF_AX25;
pub const AF_IPX = PF_IPX;
pub const AF_APPLETALK = PF_APPLETALK;
pub const AF_NETROM = PF_NETROM;
pub const AF_BRIDGE = PF_BRIDGE;
pub const AF_ATMPVC = PF_ATMPVC;
pub const AF_X25 = PF_X25;
pub const AF_INET6 = PF_INET6;
pub const AF_ROSE = PF_ROSE;
pub const AF_DECnet = PF_DECnet;
pub const AF_NETBEUI = PF_NETBEUI;
pub const AF_SECURITY = PF_SECURITY;
pub const AF_KEY = PF_KEY;
pub const AF_NETLINK = PF_NETLINK;
pub const AF_ROUTE = PF_ROUTE;
pub const AF_PACKET = PF_PACKET;
pub const AF_ASH = PF_ASH;
pub const AF_ECONET = PF_ECONET;
pub const AF_ATMSVC = PF_ATMSVC;
pub const AF_RDS = PF_RDS;
pub const AF_SNA = PF_SNA;
pub const AF_IRDA = PF_IRDA;
pub const AF_PPPOX = PF_PPPOX;
pub const AF_WANPIPE = PF_WANPIPE;
pub const AF_LLC = PF_LLC;
pub const AF_IB = PF_IB;
pub const AF_MPLS = PF_MPLS;
pub const AF_CAN = PF_CAN;
pub const AF_TIPC = PF_TIPC;
pub const AF_BLUETOOTH = PF_BLUETOOTH;
pub const AF_IUCV = PF_IUCV;
pub const AF_RXRPC = PF_RXRPC;
pub const AF_ISDN = PF_ISDN;
pub const AF_PHONET = PF_PHONET;
pub const AF_IEEE802154 = PF_IEEE802154;
pub const AF_CAIF = PF_CAIF;
pub const AF_ALG = PF_ALG;
pub const AF_NFC = PF_NFC;
pub const AF_VSOCK = PF_VSOCK;
pub const AF_KCM = PF_KCM;
pub const AF_QIPCRTR = PF_QIPCRTR;
pub const AF_SMC = PF_SMC;
pub const AF_XDP = PF_XDP;
pub const AF_MCTP = PF_MCTP;
pub const AF_MAX = PF_MAX;
pub const SOL_RAW = @as(c_int, 255);
pub const SOL_DECNET = @as(c_int, 261);
pub const SOL_X25 = @as(c_int, 262);
pub const SOL_PACKET = @as(c_int, 263);
pub const SOL_ATM = @as(c_int, 264);
pub const SOL_AAL = @as(c_int, 265);
pub const SOL_IRDA = @as(c_int, 266);
pub const SOL_NETBEUI = @as(c_int, 267);
pub const SOL_LLC = @as(c_int, 268);
pub const SOL_DCCP = @as(c_int, 269);
pub const SOL_NETLINK = @as(c_int, 270);
pub const SOL_TIPC = @as(c_int, 271);
pub const SOL_RXRPC = @as(c_int, 272);
pub const SOL_PPPOL2TP = @as(c_int, 273);
pub const SOL_BLUETOOTH = @as(c_int, 274);
pub const SOL_PNPIPE = @as(c_int, 275);
pub const SOL_RDS = @as(c_int, 276);
pub const SOL_IUCV = @as(c_int, 277);
pub const SOL_CAIF = @as(c_int, 278);
pub const SOL_ALG = @as(c_int, 279);
pub const SOL_NFC = @as(c_int, 280);
pub const SOL_KCM = @as(c_int, 281);
pub const SOL_TLS = @as(c_int, 282);
pub const SOL_XDP = @as(c_int, 283);
pub const SOL_MPTCP = @as(c_int, 284);
pub const SOL_MCTP = @as(c_int, 285);
pub const SOL_SMC = @as(c_int, 286);
pub const SOMAXCONN = @as(c_int, 4096);
pub const _BITS_SOCKADDR_H = @as(c_int, 1);
pub const __SOCKADDR_COMMON = @compileError("unable to translate macro: undefined identifier `family`");
// /usr/include/x86_64-linux-gnu/bits/sockaddr.h:34:9
pub const __SOCKADDR_COMMON_SIZE = @import("std").zig.c_translation.sizeof(c_ushort);
pub const _SS_SIZE = @as(c_int, 128);
pub const __ss_aligntype = c_ulong;
pub const _SS_PADSIZE = (_SS_SIZE - __SOCKADDR_COMMON_SIZE) - @import("std").zig.c_translation.sizeof(__ss_aligntype);
pub inline fn CMSG_DATA(cmsg: anytype) @TypeOf(cmsg.*.__cmsg_data) {
    _ = &cmsg;
    return cmsg.*.__cmsg_data;
}
pub inline fn CMSG_NXTHDR(mhdr: anytype, cmsg: anytype) @TypeOf(__cmsg_nxthdr(mhdr, cmsg)) {
    _ = &mhdr;
    _ = &cmsg;
    return __cmsg_nxthdr(mhdr, cmsg);
}
pub inline fn CMSG_FIRSTHDR(mhdr: anytype) @TypeOf(if (@import("std").zig.c_translation.cast(usize, mhdr.*.msg_controllen) >= @import("std").zig.c_translation.sizeof(struct_cmsghdr)) @import("std").zig.c_translation.cast([*c]struct_cmsghdr, mhdr.*.msg_control) else @import("std").zig.c_translation.cast([*c]struct_cmsghdr, @as(c_int, 0))) {
    _ = &mhdr;
    return if (@import("std").zig.c_translation.cast(usize, mhdr.*.msg_controllen) >= @import("std").zig.c_translation.sizeof(struct_cmsghdr)) @import("std").zig.c_translation.cast([*c]struct_cmsghdr, mhdr.*.msg_control) else @import("std").zig.c_translation.cast([*c]struct_cmsghdr, @as(c_int, 0));
}
pub inline fn CMSG_ALIGN(len: anytype) @TypeOf(((len + @import("std").zig.c_translation.sizeof(usize)) - @as(c_int, 1)) & @import("std").zig.c_translation.cast(usize, ~(@import("std").zig.c_translation.sizeof(usize) - @as(c_int, 1)))) {
    _ = &len;
    return ((len + @import("std").zig.c_translation.sizeof(usize)) - @as(c_int, 1)) & @import("std").zig.c_translation.cast(usize, ~(@import("std").zig.c_translation.sizeof(usize) - @as(c_int, 1)));
}
pub inline fn CMSG_SPACE(len: anytype) @TypeOf(CMSG_ALIGN(len) + CMSG_ALIGN(@import("std").zig.c_translation.sizeof(struct_cmsghdr))) {
    _ = &len;
    return CMSG_ALIGN(len) + CMSG_ALIGN(@import("std").zig.c_translation.sizeof(struct_cmsghdr));
}
pub inline fn CMSG_LEN(len: anytype) @TypeOf(CMSG_ALIGN(@import("std").zig.c_translation.sizeof(struct_cmsghdr)) + len) {
    _ = &len;
    return CMSG_ALIGN(@import("std").zig.c_translation.sizeof(struct_cmsghdr)) + len;
}
pub inline fn __CMSG_PADDING(len: anytype) @TypeOf((@import("std").zig.c_translation.sizeof(usize) - (len & (@import("std").zig.c_translation.sizeof(usize) - @as(c_int, 1)))) & (@import("std").zig.c_translation.sizeof(usize) - @as(c_int, 1))) {
    _ = &len;
    return (@import("std").zig.c_translation.sizeof(usize) - (len & (@import("std").zig.c_translation.sizeof(usize) - @as(c_int, 1)))) & (@import("std").zig.c_translation.sizeof(usize) - @as(c_int, 1));
}
pub const __ASM_GENERIC_SOCKET_H = "";
pub const _LINUX_POSIX_TYPES_H = "";
pub const _LINUX_STDDEF_H = "";
pub const __struct_group = @compileError("unable to translate C expr: expected ')' instead got '...'");
// /usr/include/linux/stddef.h:26:9
pub const __DECLARE_FLEX_ARRAY = @compileError("unable to translate macro: undefined identifier `__empty_`");
// /usr/include/linux/stddef.h:47:9
pub const __counted_by = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/linux/stddef.h:55:9
pub const _ASM_X86_POSIX_TYPES_64_H = "";
pub const __ASM_GENERIC_POSIX_TYPES_H = "";
pub const __ASM_X86_BITSPERLONG_H = "";
pub const __BITS_PER_LONG = @as(c_int, 64);
pub const __ASM_GENERIC_BITS_PER_LONG = "";
pub const __ASM_GENERIC_SOCKIOS_H = "";
pub const FIOSETOWN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8901, .hex);
pub const SIOCSPGRP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8902, .hex);
pub const FIOGETOWN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8903, .hex);
pub const SIOCGPGRP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hex);
pub const SIOCATMARK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hex);
pub const SIOCGSTAMP_OLD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8906, .hex);
pub const SIOCGSTAMPNS_OLD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8907, .hex);
pub const SOL_SOCKET = @as(c_int, 1);
pub const SO_DEBUG = @as(c_int, 1);
pub const SO_REUSEADDR = @as(c_int, 2);
pub const SO_TYPE = @as(c_int, 3);
pub const SO_ERROR = @as(c_int, 4);
pub const SO_DONTROUTE = @as(c_int, 5);
pub const SO_BROADCAST = @as(c_int, 6);
pub const SO_SNDBUF = @as(c_int, 7);
pub const SO_RCVBUF = @as(c_int, 8);
pub const SO_SNDBUFFORCE = @as(c_int, 32);
pub const SO_RCVBUFFORCE = @as(c_int, 33);
pub const SO_KEEPALIVE = @as(c_int, 9);
pub const SO_OOBINLINE = @as(c_int, 10);
pub const SO_NO_CHECK = @as(c_int, 11);
pub const SO_PRIORITY = @as(c_int, 12);
pub const SO_LINGER = @as(c_int, 13);
pub const SO_BSDCOMPAT = @as(c_int, 14);
pub const SO_REUSEPORT = @as(c_int, 15);
pub const SO_PASSCRED = @as(c_int, 16);
pub const SO_PEERCRED = @as(c_int, 17);
pub const SO_RCVLOWAT = @as(c_int, 18);
pub const SO_SNDLOWAT = @as(c_int, 19);
pub const SO_RCVTIMEO_OLD = @as(c_int, 20);
pub const SO_SNDTIMEO_OLD = @as(c_int, 21);
pub const SO_SECURITY_AUTHENTICATION = @as(c_int, 22);
pub const SO_SECURITY_ENCRYPTION_TRANSPORT = @as(c_int, 23);
pub const SO_SECURITY_ENCRYPTION_NETWORK = @as(c_int, 24);
pub const SO_BINDTODEVICE = @as(c_int, 25);
pub const SO_ATTACH_FILTER = @as(c_int, 26);
pub const SO_DETACH_FILTER = @as(c_int, 27);
pub const SO_GET_FILTER = SO_ATTACH_FILTER;
pub const SO_PEERNAME = @as(c_int, 28);
pub const SO_ACCEPTCONN = @as(c_int, 30);
pub const SO_PEERSEC = @as(c_int, 31);
pub const SO_PASSSEC = @as(c_int, 34);
pub const SO_MARK = @as(c_int, 36);
pub const SO_PROTOCOL = @as(c_int, 38);
pub const SO_DOMAIN = @as(c_int, 39);
pub const SO_RXQ_OVFL = @as(c_int, 40);
pub const SO_WIFI_STATUS = @as(c_int, 41);
pub const SCM_WIFI_STATUS = SO_WIFI_STATUS;
pub const SO_PEEK_OFF = @as(c_int, 42);
pub const SO_NOFCS = @as(c_int, 43);
pub const SO_LOCK_FILTER = @as(c_int, 44);
pub const SO_SELECT_ERR_QUEUE = @as(c_int, 45);
pub const SO_BUSY_POLL = @as(c_int, 46);
pub const SO_MAX_PACING_RATE = @as(c_int, 47);
pub const SO_BPF_EXTENSIONS = @as(c_int, 48);
pub const SO_INCOMING_CPU = @as(c_int, 49);
pub const SO_ATTACH_BPF = @as(c_int, 50);
pub const SO_DETACH_BPF = SO_DETACH_FILTER;
pub const SO_ATTACH_REUSEPORT_CBPF = @as(c_int, 51);
pub const SO_ATTACH_REUSEPORT_EBPF = @as(c_int, 52);
pub const SO_CNX_ADVICE = @as(c_int, 53);
pub const SCM_TIMESTAMPING_OPT_STATS = @as(c_int, 54);
pub const SO_MEMINFO = @as(c_int, 55);
pub const SO_INCOMING_NAPI_ID = @as(c_int, 56);
pub const SO_COOKIE = @as(c_int, 57);
pub const SCM_TIMESTAMPING_PKTINFO = @as(c_int, 58);
pub const SO_PEERGROUPS = @as(c_int, 59);
pub const SO_ZEROCOPY = @as(c_int, 60);
pub const SO_TXTIME = @as(c_int, 61);
pub const SCM_TXTIME = SO_TXTIME;
pub const SO_BINDTOIFINDEX = @as(c_int, 62);
pub const SO_TIMESTAMP_OLD = @as(c_int, 29);
pub const SO_TIMESTAMPNS_OLD = @as(c_int, 35);
pub const SO_TIMESTAMPING_OLD = @as(c_int, 37);
pub const SO_TIMESTAMP_NEW = @as(c_int, 63);
pub const SO_TIMESTAMPNS_NEW = @as(c_int, 64);
pub const SO_TIMESTAMPING_NEW = @as(c_int, 65);
pub const SO_RCVTIMEO_NEW = @as(c_int, 66);
pub const SO_SNDTIMEO_NEW = @as(c_int, 67);
pub const SO_DETACH_REUSEPORT_BPF = @as(c_int, 68);
pub const SO_PREFER_BUSY_POLL = @as(c_int, 69);
pub const SO_BUSY_POLL_BUDGET = @as(c_int, 70);
pub const SO_NETNS_COOKIE = @as(c_int, 71);
pub const SO_BUF_LOCK = @as(c_int, 72);
pub const SO_RESERVE_MEM = @as(c_int, 73);
pub const SO_TXREHASH = @as(c_int, 74);
pub const SO_RCVMARK = @as(c_int, 75);
pub const SO_PASSPIDFD = @as(c_int, 76);
pub const SO_PEERPIDFD = @as(c_int, 77);
pub const SO_TIMESTAMP = SO_TIMESTAMP_OLD;
pub const SO_TIMESTAMPNS = SO_TIMESTAMPNS_OLD;
pub const SO_TIMESTAMPING = SO_TIMESTAMPING_OLD;
pub const SO_RCVTIMEO = SO_RCVTIMEO_OLD;
pub const SO_SNDTIMEO = SO_SNDTIMEO_OLD;
pub const SCM_TIMESTAMP = SO_TIMESTAMP;
pub const SCM_TIMESTAMPNS = SO_TIMESTAMPNS;
pub const SCM_TIMESTAMPING = SO_TIMESTAMPING;
pub const __osockaddr_defined = @as(c_int, 1);
pub const __SOCKADDR_ARG = @compileError("unable to translate C expr: unexpected token '__restrict'");
// /usr/include/x86_64-linux-gnu/sys/socket.h:58:10
pub const __CONST_SOCKADDR_ARG = @compileError("unable to translate C expr: unexpected token 'const'");
// /usr/include/x86_64-linux-gnu/sys/socket.h:59:10
pub const _SYS_STAT_H = @as(c_int, 1);
pub const _BITS_STAT_H = @as(c_int, 1);
pub const _BITS_STRUCT_STAT_H = @as(c_int, 1);
pub const st_atime = @compileError("unable to translate macro: undefined identifier `st_atim`");
// /usr/include/x86_64-linux-gnu/bits/struct_stat.h:77:11
pub const st_mtime = @compileError("unable to translate macro: undefined identifier `st_mtim`");
// /usr/include/x86_64-linux-gnu/bits/struct_stat.h:78:11
pub const st_ctime = @compileError("unable to translate macro: undefined identifier `st_ctim`");
// /usr/include/x86_64-linux-gnu/bits/struct_stat.h:79:11
pub const _STATBUF_ST_BLKSIZE = "";
pub const _STATBUF_ST_RDEV = "";
pub const _STATBUF_ST_NSEC = "";
pub const __S_IFMT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o170000, .octal);
pub const __S_IFDIR = @as(c_int, 0o040000);
pub const __S_IFCHR = @as(c_int, 0o020000);
pub const __S_IFBLK = @as(c_int, 0o060000);
pub const __S_IFREG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o100000, .octal);
pub const __S_IFIFO = @as(c_int, 0o010000);
pub const __S_IFLNK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o120000, .octal);
pub const __S_IFSOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o140000, .octal);
pub inline fn __S_TYPEISMQ(buf: anytype) @TypeOf(buf.*.st_mode - buf.*.st_mode) {
    _ = &buf;
    return buf.*.st_mode - buf.*.st_mode;
}
pub inline fn __S_TYPEISSEM(buf: anytype) @TypeOf(buf.*.st_mode - buf.*.st_mode) {
    _ = &buf;
    return buf.*.st_mode - buf.*.st_mode;
}
pub inline fn __S_TYPEISSHM(buf: anytype) @TypeOf(buf.*.st_mode - buf.*.st_mode) {
    _ = &buf;
    return buf.*.st_mode - buf.*.st_mode;
}
pub const __S_ISUID = @as(c_int, 0o4000);
pub const __S_ISGID = @as(c_int, 0o2000);
pub const __S_ISVTX = @as(c_int, 0o1000);
pub const __S_IREAD = @as(c_int, 0o400);
pub const __S_IWRITE = @as(c_int, 0o200);
pub const __S_IEXEC = @as(c_int, 0o100);
pub const UTIME_NOW = (@as(c_long, 1) << @as(c_int, 30)) - @as(c_long, 1);
pub const UTIME_OMIT = (@as(c_long, 1) << @as(c_int, 30)) - @as(c_long, 2);
pub const S_IFMT = __S_IFMT;
pub const S_IFDIR = __S_IFDIR;
pub const S_IFCHR = __S_IFCHR;
pub const S_IFBLK = __S_IFBLK;
pub const S_IFREG = __S_IFREG;
pub const S_IFIFO = __S_IFIFO;
pub const S_IFLNK = __S_IFLNK;
pub const S_IFSOCK = __S_IFSOCK;
pub inline fn __S_ISTYPE(mode: anytype, mask: anytype) @TypeOf((mode & __S_IFMT) == mask) {
    _ = &mode;
    _ = &mask;
    return (mode & __S_IFMT) == mask;
}
pub inline fn S_ISDIR(mode: anytype) @TypeOf(__S_ISTYPE(mode, __S_IFDIR)) {
    _ = &mode;
    return __S_ISTYPE(mode, __S_IFDIR);
}
pub inline fn S_ISCHR(mode: anytype) @TypeOf(__S_ISTYPE(mode, __S_IFCHR)) {
    _ = &mode;
    return __S_ISTYPE(mode, __S_IFCHR);
}
pub inline fn S_ISBLK(mode: anytype) @TypeOf(__S_ISTYPE(mode, __S_IFBLK)) {
    _ = &mode;
    return __S_ISTYPE(mode, __S_IFBLK);
}
pub inline fn S_ISREG(mode: anytype) @TypeOf(__S_ISTYPE(mode, __S_IFREG)) {
    _ = &mode;
    return __S_ISTYPE(mode, __S_IFREG);
}
pub inline fn S_ISFIFO(mode: anytype) @TypeOf(__S_ISTYPE(mode, __S_IFIFO)) {
    _ = &mode;
    return __S_ISTYPE(mode, __S_IFIFO);
}
pub inline fn S_ISLNK(mode: anytype) @TypeOf(__S_ISTYPE(mode, __S_IFLNK)) {
    _ = &mode;
    return __S_ISTYPE(mode, __S_IFLNK);
}
pub inline fn S_ISSOCK(mode: anytype) @TypeOf(__S_ISTYPE(mode, __S_IFSOCK)) {
    _ = &mode;
    return __S_ISTYPE(mode, __S_IFSOCK);
}
pub inline fn S_TYPEISMQ(buf: anytype) @TypeOf(__S_TYPEISMQ(buf)) {
    _ = &buf;
    return __S_TYPEISMQ(buf);
}
pub inline fn S_TYPEISSEM(buf: anytype) @TypeOf(__S_TYPEISSEM(buf)) {
    _ = &buf;
    return __S_TYPEISSEM(buf);
}
pub inline fn S_TYPEISSHM(buf: anytype) @TypeOf(__S_TYPEISSHM(buf)) {
    _ = &buf;
    return __S_TYPEISSHM(buf);
}
pub const S_ISUID = __S_ISUID;
pub const S_ISGID = __S_ISGID;
pub const S_ISVTX = __S_ISVTX;
pub const S_IRUSR = __S_IREAD;
pub const S_IWUSR = __S_IWRITE;
pub const S_IXUSR = __S_IEXEC;
pub const S_IRWXU = (__S_IREAD | __S_IWRITE) | __S_IEXEC;
pub const S_IREAD = S_IRUSR;
pub const S_IWRITE = S_IWUSR;
pub const S_IEXEC = S_IXUSR;
pub const S_IRGRP = S_IRUSR >> @as(c_int, 3);
pub const S_IWGRP = S_IWUSR >> @as(c_int, 3);
pub const S_IXGRP = S_IXUSR >> @as(c_int, 3);
pub const S_IRWXG = S_IRWXU >> @as(c_int, 3);
pub const S_IROTH = S_IRGRP >> @as(c_int, 3);
pub const S_IWOTH = S_IWGRP >> @as(c_int, 3);
pub const S_IXOTH = S_IXGRP >> @as(c_int, 3);
pub const S_IRWXO = S_IRWXG >> @as(c_int, 3);
pub const ACCESSPERMS = (S_IRWXU | S_IRWXG) | S_IRWXO;
pub const ALLPERMS = ((((S_ISUID | S_ISGID) | S_ISVTX) | S_IRWXU) | S_IRWXG) | S_IRWXO;
pub const DEFFILEMODE = ((((S_IRUSR | S_IWUSR) | S_IRGRP) | S_IWGRP) | S_IROTH) | S_IWOTH;
pub const S_BLKSIZE = @as(c_int, 512);
pub const _SYS_UIO_H = @as(c_int, 1);
pub const _BITS_UIO_LIM_H = @as(c_int, 1);
pub const __IOV_MAX = @as(c_int, 1024);
pub const UIO_MAXIOV = __IOV_MAX;
pub const _ERRNO_H = @as(c_int, 1);
pub const _BITS_ERRNO_H = @as(c_int, 1);
pub const _ASM_GENERIC_ERRNO_H = "";
pub const _ASM_GENERIC_ERRNO_BASE_H = "";
pub const EPERM = @as(c_int, 1);
pub const ENOENT = @as(c_int, 2);
pub const ESRCH = @as(c_int, 3);
pub const EINTR = @as(c_int, 4);
pub const EIO = @as(c_int, 5);
pub const ENXIO = @as(c_int, 6);
pub const E2BIG = @as(c_int, 7);
pub const ENOEXEC = @as(c_int, 8);
pub const EBADF = @as(c_int, 9);
pub const ECHILD = @as(c_int, 10);
pub const EAGAIN = @as(c_int, 11);
pub const ENOMEM = @as(c_int, 12);
pub const EACCES = @as(c_int, 13);
pub const EFAULT = @as(c_int, 14);
pub const ENOTBLK = @as(c_int, 15);
pub const EBUSY = @as(c_int, 16);
pub const EEXIST = @as(c_int, 17);
pub const EXDEV = @as(c_int, 18);
pub const ENODEV = @as(c_int, 19);
pub const ENOTDIR = @as(c_int, 20);
pub const EISDIR = @as(c_int, 21);
pub const EINVAL = @as(c_int, 22);
pub const ENFILE = @as(c_int, 23);
pub const EMFILE = @as(c_int, 24);
pub const ENOTTY = @as(c_int, 25);
pub const ETXTBSY = @as(c_int, 26);
pub const EFBIG = @as(c_int, 27);
pub const ENOSPC = @as(c_int, 28);
pub const ESPIPE = @as(c_int, 29);
pub const EROFS = @as(c_int, 30);
pub const EMLINK = @as(c_int, 31);
pub const EPIPE = @as(c_int, 32);
pub const EDOM = @as(c_int, 33);
pub const ERANGE = @as(c_int, 34);
pub const EDEADLK = @as(c_int, 35);
pub const ENAMETOOLONG = @as(c_int, 36);
pub const ENOLCK = @as(c_int, 37);
pub const ENOSYS = @as(c_int, 38);
pub const ENOTEMPTY = @as(c_int, 39);
pub const ELOOP = @as(c_int, 40);
pub const EWOULDBLOCK = EAGAIN;
pub const ENOMSG = @as(c_int, 42);
pub const EIDRM = @as(c_int, 43);
pub const ECHRNG = @as(c_int, 44);
pub const EL2NSYNC = @as(c_int, 45);
pub const EL3HLT = @as(c_int, 46);
pub const EL3RST = @as(c_int, 47);
pub const ELNRNG = @as(c_int, 48);
pub const EUNATCH = @as(c_int, 49);
pub const ENOCSI = @as(c_int, 50);
pub const EL2HLT = @as(c_int, 51);
pub const EBADE = @as(c_int, 52);
pub const EBADR = @as(c_int, 53);
pub const EXFULL = @as(c_int, 54);
pub const ENOANO = @as(c_int, 55);
pub const EBADRQC = @as(c_int, 56);
pub const EBADSLT = @as(c_int, 57);
pub const EDEADLOCK = EDEADLK;
pub const EBFONT = @as(c_int, 59);
pub const ENOSTR = @as(c_int, 60);
pub const ENODATA = @as(c_int, 61);
pub const ETIME = @as(c_int, 62);
pub const ENOSR = @as(c_int, 63);
pub const ENONET = @as(c_int, 64);
pub const ENOPKG = @as(c_int, 65);
pub const EREMOTE = @as(c_int, 66);
pub const ENOLINK = @as(c_int, 67);
pub const EADV = @as(c_int, 68);
pub const ESRMNT = @as(c_int, 69);
pub const ECOMM = @as(c_int, 70);
pub const EPROTO = @as(c_int, 71);
pub const EMULTIHOP = @as(c_int, 72);
pub const EDOTDOT = @as(c_int, 73);
pub const EBADMSG = @as(c_int, 74);
pub const EOVERFLOW = @as(c_int, 75);
pub const ENOTUNIQ = @as(c_int, 76);
pub const EBADFD = @as(c_int, 77);
pub const EREMCHG = @as(c_int, 78);
pub const ELIBACC = @as(c_int, 79);
pub const ELIBBAD = @as(c_int, 80);
pub const ELIBSCN = @as(c_int, 81);
pub const ELIBMAX = @as(c_int, 82);
pub const ELIBEXEC = @as(c_int, 83);
pub const EILSEQ = @as(c_int, 84);
pub const ERESTART = @as(c_int, 85);
pub const ESTRPIPE = @as(c_int, 86);
pub const EUSERS = @as(c_int, 87);
pub const ENOTSOCK = @as(c_int, 88);
pub const EDESTADDRREQ = @as(c_int, 89);
pub const EMSGSIZE = @as(c_int, 90);
pub const EPROTOTYPE = @as(c_int, 91);
pub const ENOPROTOOPT = @as(c_int, 92);
pub const EPROTONOSUPPORT = @as(c_int, 93);
pub const ESOCKTNOSUPPORT = @as(c_int, 94);
pub const EOPNOTSUPP = @as(c_int, 95);
pub const EPFNOSUPPORT = @as(c_int, 96);
pub const EAFNOSUPPORT = @as(c_int, 97);
pub const EADDRINUSE = @as(c_int, 98);
pub const EADDRNOTAVAIL = @as(c_int, 99);
pub const ENETDOWN = @as(c_int, 100);
pub const ENETUNREACH = @as(c_int, 101);
pub const ENETRESET = @as(c_int, 102);
pub const ECONNABORTED = @as(c_int, 103);
pub const ECONNRESET = @as(c_int, 104);
pub const ENOBUFS = @as(c_int, 105);
pub const EISCONN = @as(c_int, 106);
pub const ENOTCONN = @as(c_int, 107);
pub const ESHUTDOWN = @as(c_int, 108);
pub const ETOOMANYREFS = @as(c_int, 109);
pub const ETIMEDOUT = @as(c_int, 110);
pub const ECONNREFUSED = @as(c_int, 111);
pub const EHOSTDOWN = @as(c_int, 112);
pub const EHOSTUNREACH = @as(c_int, 113);
pub const EALREADY = @as(c_int, 114);
pub const EINPROGRESS = @as(c_int, 115);
pub const ESTALE = @as(c_int, 116);
pub const EUCLEAN = @as(c_int, 117);
pub const ENOTNAM = @as(c_int, 118);
pub const ENAVAIL = @as(c_int, 119);
pub const EISNAM = @as(c_int, 120);
pub const EREMOTEIO = @as(c_int, 121);
pub const EDQUOT = @as(c_int, 122);
pub const ENOMEDIUM = @as(c_int, 123);
pub const EMEDIUMTYPE = @as(c_int, 124);
pub const ECANCELED = @as(c_int, 125);
pub const ENOKEY = @as(c_int, 126);
pub const EKEYEXPIRED = @as(c_int, 127);
pub const EKEYREVOKED = @as(c_int, 128);
pub const EKEYREJECTED = @as(c_int, 129);
pub const EOWNERDEAD = @as(c_int, 130);
pub const ENOTRECOVERABLE = @as(c_int, 131);
pub const ERFKILL = @as(c_int, 132);
pub const EHWPOISON = @as(c_int, 133);
pub const ENOTSUP = EOPNOTSUPP;
pub const errno = __errno_location().*;
pub const _SIGNAL_H = "";
pub const _BITS_SIGNUM_GENERIC_H = @as(c_int, 1);
pub const SIG_ERR = @import("std").zig.c_translation.cast(__sighandler_t, -@as(c_int, 1));
pub const SIG_DFL = @import("std").zig.c_translation.cast(__sighandler_t, @as(c_int, 0));
pub const SIG_IGN = @import("std").zig.c_translation.cast(__sighandler_t, @as(c_int, 1));
pub const SIGINT = @as(c_int, 2);
pub const SIGILL = @as(c_int, 4);
pub const SIGABRT = @as(c_int, 6);
pub const SIGFPE = @as(c_int, 8);
pub const SIGSEGV = @as(c_int, 11);
pub const SIGTERM = @as(c_int, 15);
pub const SIGHUP = @as(c_int, 1);
pub const SIGQUIT = @as(c_int, 3);
pub const SIGTRAP = @as(c_int, 5);
pub const SIGKILL = @as(c_int, 9);
pub const SIGPIPE = @as(c_int, 13);
pub const SIGALRM = @as(c_int, 14);
pub const SIGIO = SIGPOLL;
pub const SIGIOT = SIGABRT;
pub const SIGCLD = SIGCHLD;
pub const _BITS_SIGNUM_ARCH_H = @as(c_int, 1);
pub const SIGSTKFLT = @as(c_int, 16);
pub const SIGPWR = @as(c_int, 30);
pub const SIGBUS = @as(c_int, 7);
pub const SIGSYS = @as(c_int, 31);
pub const SIGURG = @as(c_int, 23);
pub const SIGSTOP = @as(c_int, 19);
pub const SIGTSTP = @as(c_int, 20);
pub const SIGCONT = @as(c_int, 18);
pub const SIGCHLD = @as(c_int, 17);
pub const SIGTTIN = @as(c_int, 21);
pub const SIGTTOU = @as(c_int, 22);
pub const SIGPOLL = @as(c_int, 29);
pub const SIGXFSZ = @as(c_int, 25);
pub const SIGXCPU = @as(c_int, 24);
pub const SIGVTALRM = @as(c_int, 26);
pub const SIGPROF = @as(c_int, 27);
pub const SIGUSR1 = @as(c_int, 10);
pub const SIGUSR2 = @as(c_int, 12);
pub const SIGWINCH = @as(c_int, 28);
pub const __SIGRTMIN = @as(c_int, 32);
pub const __SIGRTMAX = @as(c_int, 64);
pub const _NSIG = __SIGRTMAX + @as(c_int, 1);
pub const __sig_atomic_t_defined = @as(c_int, 1);
pub const __siginfo_t_defined = @as(c_int, 1);
pub const ____sigval_t_defined = "";
pub const __SI_MAX_SIZE = @as(c_int, 128);
pub const __SI_PAD_SIZE = @import("std").zig.c_translation.MacroArithmetic.div(__SI_MAX_SIZE, @import("std").zig.c_translation.sizeof(c_int)) - @as(c_int, 4);
pub const _BITS_SIGINFO_ARCH_H = @as(c_int, 1);
pub const __SI_ALIGNMENT = "";
pub const __SI_BAND_TYPE = c_long;
pub const __SI_CLOCK_T = __clock_t;
pub const __SI_ERRNO_THEN_CODE = @as(c_int, 1);
pub const __SI_HAVE_SIGSYS = @as(c_int, 1);
pub const __SI_SIGFAULT_ADDL = "";
pub const si_pid = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:128:9
pub const si_uid = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:129:9
pub const si_timerid = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:130:9
pub const si_overrun = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:131:9
pub const si_status = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:132:9
pub const si_utime = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:133:9
pub const si_stime = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:134:9
pub const si_value = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:135:9
pub const si_int = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:136:9
pub const si_ptr = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:137:9
pub const si_addr = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:138:9
pub const si_addr_lsb = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:139:9
pub const si_lower = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:140:9
pub const si_upper = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:141:9
pub const si_pkey = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:142:9
pub const si_band = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:143:9
pub const si_fd = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:144:9
pub const si_call_addr = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:146:10
pub const si_syscall = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:147:10
pub const si_arch = @compileError("unable to translate macro: undefined identifier `_sifields`");
// /usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h:148:10
pub const _BITS_SIGINFO_CONSTS_H = @as(c_int, 1);
pub const __SI_ASYNCIO_AFTER_SIGIO = @as(c_int, 1);
pub const __sigval_t_defined = "";
pub const __sigevent_t_defined = @as(c_int, 1);
pub const __SIGEV_MAX_SIZE = @as(c_int, 64);
pub const __SIGEV_PAD_SIZE = @import("std").zig.c_translation.MacroArithmetic.div(__SIGEV_MAX_SIZE, @import("std").zig.c_translation.sizeof(c_int)) - @as(c_int, 4);
pub const sigev_notify_function = @compileError("unable to translate macro: undefined identifier `_sigev_un`");
// /usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h:45:9
pub const sigev_notify_attributes = @compileError("unable to translate macro: undefined identifier `_sigev_un`");
// /usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h:46:9
pub const _BITS_SIGEVENT_CONSTS_H = @as(c_int, 1);
pub inline fn sigmask(sig: anytype) @TypeOf(__glibc_macro_warning("sigmask is deprecated")(@import("std").zig.c_translation.cast(c_int, @as(c_uint, 1) << (sig - @as(c_int, 1))))) {
    _ = &sig;
    return __glibc_macro_warning("sigmask is deprecated")(@import("std").zig.c_translation.cast(c_int, @as(c_uint, 1) << (sig - @as(c_int, 1))));
}
pub const NSIG = _NSIG;
pub const _BITS_SIGACTION_H = @as(c_int, 1);
pub const sa_handler = @compileError("unable to translate macro: undefined identifier `__sigaction_handler`");
// /usr/include/x86_64-linux-gnu/bits/sigaction.h:39:10
pub const sa_sigaction = @compileError("unable to translate macro: undefined identifier `__sigaction_handler`");
// /usr/include/x86_64-linux-gnu/bits/sigaction.h:40:10
pub const SA_NOCLDSTOP = @as(c_int, 1);
pub const SA_NOCLDWAIT = @as(c_int, 2);
pub const SA_SIGINFO = @as(c_int, 4);
pub const SA_ONSTACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const SA_RESTART = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub const SA_NODEFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const SA_RESETHAND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const SA_INTERRUPT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const SA_NOMASK = SA_NODEFER;
pub const SA_ONESHOT = SA_RESETHAND;
pub const SA_STACK = SA_ONSTACK;
pub const SIG_BLOCK = @as(c_int, 0);
pub const SIG_UNBLOCK = @as(c_int, 1);
pub const SIG_SETMASK = @as(c_int, 2);
pub const _BITS_SIGCONTEXT_H = @as(c_int, 1);
pub const FP_XSTATE_MAGIC1 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x46505853, .hex);
pub const FP_XSTATE_MAGIC2 = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x46505845, .hex);
pub const FP_XSTATE_MAGIC2_SIZE = @import("std").zig.c_translation.sizeof(FP_XSTATE_MAGIC2);
pub const __stack_t_defined = @as(c_int, 1);
pub const _SYS_UCONTEXT_H = @as(c_int, 1);
pub inline fn __ctx(fld: anytype) @TypeOf(fld) {
    _ = &fld;
    return fld;
}
pub const __NGREG = @as(c_int, 23);
pub const NGREG = __NGREG;
pub const _BITS_SIGSTACK_H = @as(c_int, 1);
pub const MINSIGSTKSZ = @as(c_int, 2048);
pub const SIGSTKSZ = @as(c_int, 8192);
pub const _BITS_SS_FLAGS_H = @as(c_int, 1);
pub const __sigstack_defined = @as(c_int, 1);
pub const _BITS_SIGTHREAD_H = @as(c_int, 1);
pub const SIGRTMIN = __libc_current_sigrtmin();
pub const SIGRTMAX = __libc_current_sigrtmax();
pub const __STDBOOL_H = "";
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const __CLANG_INTTYPES_H = "";
pub const _INTTYPES_H = @as(c_int, 1);
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const _BITS_WCHAR_H = @as(c_int, 1);
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - @as(c_int, 1);
pub const _BITS_STDINT_UINTN_H = @as(c_int, 1);
pub const _BITS_STDINT_LEAST_H = @as(c_int, 1);
pub const __intptr_t_defined = "";
pub const __INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_LEAST8_MIN = -@as(c_int, 128);
pub const INT_LEAST16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT_LEAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_LEAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_LEAST8_MAX = @as(c_int, 127);
pub const INT_LEAST16_MAX = @as(c_int, 32767);
pub const INT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_LEAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_LEAST8_MAX = @as(c_int, 255);
pub const UINT_LEAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_FAST8_MIN = -@as(c_int, 128);
pub const INT_FAST16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_FAST8_MAX = @as(c_int, 127);
pub const INT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_FAST8_MAX = @as(c_int, 255);
pub const UINT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTPTR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INTMAX_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const PTRDIFF_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const PTRDIFF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const SIG_ATOMIC_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const SIG_ATOMIC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const ____gwchar_t_defined = @as(c_int, 1);
pub const __PRI64_PREFIX = "l";
pub const __PRIPTR_PREFIX = "l";
pub const PRId8 = "d";
pub const PRId16 = "d";
pub const PRId32 = "d";
pub const PRId64 = __PRI64_PREFIX ++ "d";
pub const PRIdLEAST8 = "d";
pub const PRIdLEAST16 = "d";
pub const PRIdLEAST32 = "d";
pub const PRIdLEAST64 = __PRI64_PREFIX ++ "d";
pub const PRIdFAST8 = "d";
pub const PRIdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST64 = __PRI64_PREFIX ++ "d";
pub const PRIi8 = "i";
pub const PRIi16 = "i";
pub const PRIi32 = "i";
pub const PRIi64 = __PRI64_PREFIX ++ "i";
pub const PRIiLEAST8 = "i";
pub const PRIiLEAST16 = "i";
pub const PRIiLEAST32 = "i";
pub const PRIiLEAST64 = __PRI64_PREFIX ++ "i";
pub const PRIiFAST8 = "i";
pub const PRIiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST64 = __PRI64_PREFIX ++ "i";
pub const PRIo8 = "o";
pub const PRIo16 = "o";
pub const PRIo32 = "o";
pub const PRIo64 = __PRI64_PREFIX ++ "o";
pub const PRIoLEAST8 = "o";
pub const PRIoLEAST16 = "o";
pub const PRIoLEAST32 = "o";
pub const PRIoLEAST64 = __PRI64_PREFIX ++ "o";
pub const PRIoFAST8 = "o";
pub const PRIoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST64 = __PRI64_PREFIX ++ "o";
pub const PRIu8 = "u";
pub const PRIu16 = "u";
pub const PRIu32 = "u";
pub const PRIu64 = __PRI64_PREFIX ++ "u";
pub const PRIuLEAST8 = "u";
pub const PRIuLEAST16 = "u";
pub const PRIuLEAST32 = "u";
pub const PRIuLEAST64 = __PRI64_PREFIX ++ "u";
pub const PRIuFAST8 = "u";
pub const PRIuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST64 = __PRI64_PREFIX ++ "u";
pub const PRIx8 = "x";
pub const PRIx16 = "x";
pub const PRIx32 = "x";
pub const PRIx64 = __PRI64_PREFIX ++ "x";
pub const PRIxLEAST8 = "x";
pub const PRIxLEAST16 = "x";
pub const PRIxLEAST32 = "x";
pub const PRIxLEAST64 = __PRI64_PREFIX ++ "x";
pub const PRIxFAST8 = "x";
pub const PRIxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST64 = __PRI64_PREFIX ++ "x";
pub const PRIX8 = "X";
pub const PRIX16 = "X";
pub const PRIX32 = "X";
pub const PRIX64 = __PRI64_PREFIX ++ "X";
pub const PRIXLEAST8 = "X";
pub const PRIXLEAST16 = "X";
pub const PRIXLEAST32 = "X";
pub const PRIXLEAST64 = __PRI64_PREFIX ++ "X";
pub const PRIXFAST8 = "X";
pub const PRIXFAST16 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST32 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST64 = __PRI64_PREFIX ++ "X";
pub const PRIdMAX = __PRI64_PREFIX ++ "d";
pub const PRIiMAX = __PRI64_PREFIX ++ "i";
pub const PRIoMAX = __PRI64_PREFIX ++ "o";
pub const PRIuMAX = __PRI64_PREFIX ++ "u";
pub const PRIxMAX = __PRI64_PREFIX ++ "x";
pub const PRIXMAX = __PRI64_PREFIX ++ "X";
pub const PRIdPTR = __PRIPTR_PREFIX ++ "d";
pub const PRIiPTR = __PRIPTR_PREFIX ++ "i";
pub const PRIoPTR = __PRIPTR_PREFIX ++ "o";
pub const PRIuPTR = __PRIPTR_PREFIX ++ "u";
pub const PRIxPTR = __PRIPTR_PREFIX ++ "x";
pub const PRIXPTR = __PRIPTR_PREFIX ++ "X";
pub const SCNd8 = "hhd";
pub const SCNd16 = "hd";
pub const SCNd32 = "d";
pub const SCNd64 = __PRI64_PREFIX ++ "d";
pub const SCNdLEAST8 = "hhd";
pub const SCNdLEAST16 = "hd";
pub const SCNdLEAST32 = "d";
pub const SCNdLEAST64 = __PRI64_PREFIX ++ "d";
pub const SCNdFAST8 = "hhd";
pub const SCNdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST64 = __PRI64_PREFIX ++ "d";
pub const SCNi8 = "hhi";
pub const SCNi16 = "hi";
pub const SCNi32 = "i";
pub const SCNi64 = __PRI64_PREFIX ++ "i";
pub const SCNiLEAST8 = "hhi";
pub const SCNiLEAST16 = "hi";
pub const SCNiLEAST32 = "i";
pub const SCNiLEAST64 = __PRI64_PREFIX ++ "i";
pub const SCNiFAST8 = "hhi";
pub const SCNiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST64 = __PRI64_PREFIX ++ "i";
pub const SCNu8 = "hhu";
pub const SCNu16 = "hu";
pub const SCNu32 = "u";
pub const SCNu64 = __PRI64_PREFIX ++ "u";
pub const SCNuLEAST8 = "hhu";
pub const SCNuLEAST16 = "hu";
pub const SCNuLEAST32 = "u";
pub const SCNuLEAST64 = __PRI64_PREFIX ++ "u";
pub const SCNuFAST8 = "hhu";
pub const SCNuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST64 = __PRI64_PREFIX ++ "u";
pub const SCNo8 = "hho";
pub const SCNo16 = "ho";
pub const SCNo32 = "o";
pub const SCNo64 = __PRI64_PREFIX ++ "o";
pub const SCNoLEAST8 = "hho";
pub const SCNoLEAST16 = "ho";
pub const SCNoLEAST32 = "o";
pub const SCNoLEAST64 = __PRI64_PREFIX ++ "o";
pub const SCNoFAST8 = "hho";
pub const SCNoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST64 = __PRI64_PREFIX ++ "o";
pub const SCNx8 = "hhx";
pub const SCNx16 = "hx";
pub const SCNx32 = "x";
pub const SCNx64 = __PRI64_PREFIX ++ "x";
pub const SCNxLEAST8 = "hhx";
pub const SCNxLEAST16 = "hx";
pub const SCNxLEAST32 = "x";
pub const SCNxLEAST64 = __PRI64_PREFIX ++ "x";
pub const SCNxFAST8 = "hhx";
pub const SCNxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST64 = __PRI64_PREFIX ++ "x";
pub const SCNdMAX = __PRI64_PREFIX ++ "d";
pub const SCNiMAX = __PRI64_PREFIX ++ "i";
pub const SCNoMAX = __PRI64_PREFIX ++ "o";
pub const SCNuMAX = __PRI64_PREFIX ++ "u";
pub const SCNxMAX = __PRI64_PREFIX ++ "x";
pub const SCNdPTR = __PRIPTR_PREFIX ++ "d";
pub const SCNiPTR = __PRIPTR_PREFIX ++ "i";
pub const SCNoPTR = __PRIPTR_PREFIX ++ "o";
pub const SCNuPTR = __PRIPTR_PREFIX ++ "u";
pub const SCNxPTR = __PRIPTR_PREFIX ++ "x";
pub const _TIME_H = @as(c_int, 1);
pub const __need_NULL = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const _BITS_TIME_H = @as(c_int, 1);
pub const CLOCKS_PER_SEC = @import("std").zig.c_translation.cast(__clock_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal));
pub const CLOCK_REALTIME = @as(c_int, 0);
pub const CLOCK_MONOTONIC = @as(c_int, 1);
pub const CLOCK_PROCESS_CPUTIME_ID = @as(c_int, 2);
pub const CLOCK_THREAD_CPUTIME_ID = @as(c_int, 3);
pub const CLOCK_MONOTONIC_RAW = @as(c_int, 4);
pub const CLOCK_REALTIME_COARSE = @as(c_int, 5);
pub const CLOCK_MONOTONIC_COARSE = @as(c_int, 6);
pub const CLOCK_BOOTTIME = @as(c_int, 7);
pub const CLOCK_REALTIME_ALARM = @as(c_int, 8);
pub const CLOCK_BOOTTIME_ALARM = @as(c_int, 9);
pub const CLOCK_TAI = @as(c_int, 11);
pub const TIMER_ABSTIME = @as(c_int, 1);
pub const __struct_tm_defined = @as(c_int, 1);
pub const __itimerspec_defined = @as(c_int, 1);
pub const _BITS_TYPES_LOCALE_T_H = @as(c_int, 1);
pub const _BITS_TYPES___LOCALE_T_H = @as(c_int, 1);
pub const TIME_UTC = @as(c_int, 1);
pub inline fn __isleap(year: anytype) @TypeOf((@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 4)) == @as(c_int, 0)) and ((@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 100)) != @as(c_int, 0)) or (@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 400)) == @as(c_int, 0)))) {
    _ = &year;
    return (@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 4)) == @as(c_int, 0)) and ((@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 100)) != @as(c_int, 0)) or (@import("std").zig.c_translation.MacroArithmetic.rem(year, @as(c_int, 400)) == @as(c_int, 0)));
}
pub const _FCNTL_H = @as(c_int, 1);
pub const __O_LARGEFILE = @as(c_int, 0);
pub const F_GETLK64 = @as(c_int, 5);
pub const F_SETLK64 = @as(c_int, 6);
pub const F_SETLKW64 = @as(c_int, 7);
pub const O_ACCMODE = @as(c_int, 0o003);
pub const O_RDONLY = @as(c_int, 0o0);
pub const O_WRONLY = @as(c_int, 0o1);
pub const O_RDWR = @as(c_int, 0o2);
pub const O_CREAT = @as(c_int, 0o100);
pub const O_EXCL = @as(c_int, 0o200);
pub const O_NOCTTY = @as(c_int, 0o400);
pub const O_TRUNC = @as(c_int, 0o1000);
pub const O_APPEND = @as(c_int, 0o2000);
pub const O_NONBLOCK = @as(c_int, 0o4000);
pub const O_NDELAY = O_NONBLOCK;
pub const O_SYNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o4010000, .octal);
pub const O_FSYNC = O_SYNC;
pub const O_ASYNC = @as(c_int, 0o20000);
pub const __O_DIRECTORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o200000, .octal);
pub const __O_NOFOLLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o400000, .octal);
pub const __O_CLOEXEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o2000000, .octal);
pub const __O_DIRECT = @as(c_int, 0o40000);
pub const __O_NOATIME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o1000000, .octal);
pub const __O_PATH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o10000000, .octal);
pub const __O_DSYNC = @as(c_int, 0o10000);
pub const __O_TMPFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o20000000, .octal) | __O_DIRECTORY;
pub const F_GETLK = F_GETLK64;
pub const F_SETLK = F_SETLK64;
pub const F_SETLKW = F_SETLKW64;
pub const O_DIRECTORY = __O_DIRECTORY;
pub const O_NOFOLLOW = __O_NOFOLLOW;
pub const O_CLOEXEC = __O_CLOEXEC;
pub const O_DSYNC = __O_DSYNC;
pub const O_RSYNC = O_SYNC;
pub const F_DUPFD = @as(c_int, 0);
pub const F_GETFD = @as(c_int, 1);
pub const F_SETFD = @as(c_int, 2);
pub const F_GETFL = @as(c_int, 3);
pub const F_SETFL = @as(c_int, 4);
pub const __F_SETOWN = @as(c_int, 8);
pub const __F_GETOWN = @as(c_int, 9);
pub const F_SETOWN = __F_SETOWN;
pub const F_GETOWN = __F_GETOWN;
pub const __F_SETSIG = @as(c_int, 10);
pub const __F_GETSIG = @as(c_int, 11);
pub const __F_SETOWN_EX = @as(c_int, 15);
pub const __F_GETOWN_EX = @as(c_int, 16);
pub const F_DUPFD_CLOEXEC = @as(c_int, 1030);
pub const FD_CLOEXEC = @as(c_int, 1);
pub const F_RDLCK = @as(c_int, 0);
pub const F_WRLCK = @as(c_int, 1);
pub const F_UNLCK = @as(c_int, 2);
pub const F_EXLCK = @as(c_int, 4);
pub const F_SHLCK = @as(c_int, 8);
pub const LOCK_SH = @as(c_int, 1);
pub const LOCK_EX = @as(c_int, 2);
pub const LOCK_NB = @as(c_int, 4);
pub const LOCK_UN = @as(c_int, 8);
pub const FAPPEND = O_APPEND;
pub const FFSYNC = O_FSYNC;
pub const FASYNC = O_ASYNC;
pub const FNONBLOCK = O_NONBLOCK;
pub const FNDELAY = O_NDELAY;
pub const __POSIX_FADV_DONTNEED = @as(c_int, 4);
pub const __POSIX_FADV_NOREUSE = @as(c_int, 5);
pub const POSIX_FADV_NORMAL = @as(c_int, 0);
pub const POSIX_FADV_RANDOM = @as(c_int, 1);
pub const POSIX_FADV_SEQUENTIAL = @as(c_int, 2);
pub const POSIX_FADV_WILLNEED = @as(c_int, 3);
pub const POSIX_FADV_DONTNEED = __POSIX_FADV_DONTNEED;
pub const POSIX_FADV_NOREUSE = __POSIX_FADV_NOREUSE;
pub inline fn __OPEN_NEEDS_MODE(oflag: anytype) @TypeOf(((oflag & O_CREAT) != @as(c_int, 0)) or ((oflag & __O_TMPFILE) == __O_TMPFILE)) {
    _ = &oflag;
    return ((oflag & O_CREAT) != @as(c_int, 0)) or ((oflag & __O_TMPFILE) == __O_TMPFILE);
}
pub const R_OK = @as(c_int, 4);
pub const W_OK = @as(c_int, 2);
pub const X_OK = @as(c_int, 1);
pub const F_OK = @as(c_int, 0);
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const AT_FDCWD = -@as(c_int, 100);
pub const AT_SYMLINK_NOFOLLOW = @as(c_int, 0x100);
pub const AT_REMOVEDIR = @as(c_int, 0x200);
pub const AT_SYMLINK_FOLLOW = @as(c_int, 0x400);
pub const AT_EACCESS = @as(c_int, 0x200);
pub const F_ULOCK = @as(c_int, 0);
pub const F_LOCK = @as(c_int, 1);
pub const F_TLOCK = @as(c_int, 2);
pub const F_TEST = @as(c_int, 3);
pub const _SCHED_H = @as(c_int, 1);
pub const _BITS_SCHED_H = @as(c_int, 1);
pub const SCHED_OTHER = @as(c_int, 0);
pub const SCHED_FIFO = @as(c_int, 1);
pub const SCHED_RR = @as(c_int, 2);
pub const _BITS_TYPES_STRUCT_SCHED_PARAM = @as(c_int, 1);
pub const _BITS_CPU_SET_H = @as(c_int, 1);
pub const __CPU_SETSIZE = @as(c_int, 1024);
pub const __NCPUBITS = @as(c_int, 8) * @import("std").zig.c_translation.sizeof(__cpu_mask);
pub inline fn __CPUELT(cpu: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div(cpu, __NCPUBITS)) {
    _ = &cpu;
    return @import("std").zig.c_translation.MacroArithmetic.div(cpu, __NCPUBITS);
}
pub inline fn __CPUMASK(cpu: anytype) @TypeOf(@import("std").zig.c_translation.cast(__cpu_mask, @as(c_int, 1)) << @import("std").zig.c_translation.MacroArithmetic.rem(cpu, __NCPUBITS)) {
    _ = &cpu;
    return @import("std").zig.c_translation.cast(__cpu_mask, @as(c_int, 1)) << @import("std").zig.c_translation.MacroArithmetic.rem(cpu, __NCPUBITS);
}
pub const __CPU_ZERO_S = @compileError("unable to translate C expr: unexpected token 'do'");
// /usr/include/x86_64-linux-gnu/bits/cpu-set.h:46:10
pub const __CPU_SET_S = @compileError("unable to translate macro: undefined identifier `__cpu`");
// /usr/include/x86_64-linux-gnu/bits/cpu-set.h:58:9
pub const __CPU_CLR_S = @compileError("unable to translate macro: undefined identifier `__cpu`");
// /usr/include/x86_64-linux-gnu/bits/cpu-set.h:65:9
pub const __CPU_ISSET_S = @compileError("unable to translate macro: undefined identifier `__cpu`");
// /usr/include/x86_64-linux-gnu/bits/cpu-set.h:72:9
pub inline fn __CPU_COUNT_S(setsize: anytype, cpusetp: anytype) @TypeOf(__sched_cpucount(setsize, cpusetp)) {
    _ = &setsize;
    _ = &cpusetp;
    return __sched_cpucount(setsize, cpusetp);
}
pub const __CPU_EQUAL_S = @compileError("unable to translate macro: undefined identifier `__builtin_memcmp`");
// /usr/include/x86_64-linux-gnu/bits/cpu-set.h:84:10
pub const __CPU_OP_S = @compileError("unable to translate macro: undefined identifier `__dest`");
// /usr/include/x86_64-linux-gnu/bits/cpu-set.h:99:9
pub inline fn __CPU_ALLOC_SIZE(count: anytype) @TypeOf(@import("std").zig.c_translation.MacroArithmetic.div((count + __NCPUBITS) - @as(c_int, 1), __NCPUBITS) * @import("std").zig.c_translation.sizeof(__cpu_mask)) {
    _ = &count;
    return @import("std").zig.c_translation.MacroArithmetic.div((count + __NCPUBITS) - @as(c_int, 1), __NCPUBITS) * @import("std").zig.c_translation.sizeof(__cpu_mask);
}
pub inline fn __CPU_ALLOC(count: anytype) @TypeOf(__sched_cpualloc(count)) {
    _ = &count;
    return __sched_cpualloc(count);
}
pub inline fn __CPU_FREE(cpuset: anytype) @TypeOf(__sched_cpufree(cpuset)) {
    _ = &cpuset;
    return __sched_cpufree(cpuset);
}
pub const __sched_priority = @compileError("unable to translate macro: undefined identifier `sched_priority`");
// /usr/include/sched.h:48:9
pub const _LINUX_SWAB_H = "";
pub const _LINUX_TYPES_H = "";
pub const _ASM_GENERIC_TYPES_H = "";
pub const _ASM_GENERIC_INT_LL64_H = "";
pub const __bitwise = "";
pub const __bitwise__ = "";
pub const __aligned_u64 = @compileError("unable to translate macro: undefined identifier `aligned`");
// /usr/include/linux/types.h:50:9
pub const __aligned_be64 = @compileError("unable to translate macro: undefined identifier `aligned`");
// /usr/include/linux/types.h:51:9
pub const __aligned_le64 = @compileError("unable to translate macro: undefined identifier `aligned`");
// /usr/include/linux/types.h:52:9
pub const _ASM_X86_SWAB_H = "";
pub inline fn ___constant_swab16(x: anytype) __u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(__u16, ((@import("std").zig.c_translation.cast(__u16, x) & @import("std").zig.c_translation.cast(__u16, @as(c_uint, 0x00ff))) << @as(c_int, 8)) | ((@import("std").zig.c_translation.cast(__u16, x) & @import("std").zig.c_translation.cast(__u16, @as(c_uint, 0xff00))) >> @as(c_int, 8)));
}
pub inline fn ___constant_swab32(x: anytype) __u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(__u32, ((((@import("std").zig.c_translation.cast(__u32, x) & @import("std").zig.c_translation.cast(__u32, @as(c_ulong, 0x000000ff))) << @as(c_int, 24)) | ((@import("std").zig.c_translation.cast(__u32, x) & @import("std").zig.c_translation.cast(__u32, @as(c_ulong, 0x0000ff00))) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__u32, x) & @import("std").zig.c_translation.cast(__u32, @as(c_ulong, 0x00ff0000))) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__u32, x) & @import("std").zig.c_translation.cast(__u32, @as(c_ulong, 0xff000000))) >> @as(c_int, 24)));
}
pub inline fn ___constant_swab64(x: anytype) __u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(__u64, ((((((((@import("std").zig.c_translation.cast(__u64, x) & @import("std").zig.c_translation.cast(__u64, @as(c_ulonglong, 0x00000000000000ff))) << @as(c_int, 56)) | ((@import("std").zig.c_translation.cast(__u64, x) & @import("std").zig.c_translation.cast(__u64, @as(c_ulonglong, 0x000000000000ff00))) << @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(__u64, x) & @import("std").zig.c_translation.cast(__u64, @as(c_ulonglong, 0x0000000000ff0000))) << @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(__u64, x) & @import("std").zig.c_translation.cast(__u64, @as(c_ulonglong, 0x00000000ff000000))) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__u64, x) & @import("std").zig.c_translation.cast(__u64, @as(c_ulonglong, 0x000000ff00000000))) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__u64, x) & @import("std").zig.c_translation.cast(__u64, @as(c_ulonglong, 0x0000ff0000000000))) >> @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(__u64, x) & @import("std").zig.c_translation.cast(__u64, @as(c_ulonglong, 0x00ff000000000000))) >> @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(__u64, x) & @import("std").zig.c_translation.cast(__u64, @as(c_ulonglong, 0xff00000000000000))) >> @as(c_int, 56)));
}
pub inline fn ___constant_swahw32(x: anytype) __u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(__u32, ((@import("std").zig.c_translation.cast(__u32, x) & @import("std").zig.c_translation.cast(__u32, @as(c_ulong, 0x0000ffff))) << @as(c_int, 16)) | ((@import("std").zig.c_translation.cast(__u32, x) & @import("std").zig.c_translation.cast(__u32, @as(c_ulong, 0xffff0000))) >> @as(c_int, 16)));
}
pub inline fn ___constant_swahb32(x: anytype) __u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(__u32, ((@import("std").zig.c_translation.cast(__u32, x) & @import("std").zig.c_translation.cast(__u32, @as(c_ulong, 0x00ff00ff))) << @as(c_int, 8)) | ((@import("std").zig.c_translation.cast(__u32, x) & @import("std").zig.c_translation.cast(__u32, @as(c_ulong, 0xff00ff00))) >> @as(c_int, 8)));
}
pub inline fn __swab16(x: anytype) __u16 {
    _ = &x;
    return @import("std").zig.c_translation.cast(__u16, if (__builtin_constant_p(x)) ___constant_swab16(x) else __fswab16(x));
}
pub inline fn __swab32(x: anytype) __u32 {
    _ = &x;
    return @import("std").zig.c_translation.cast(__u32, if (__builtin_constant_p(x)) ___constant_swab32(x) else __fswab32(x));
}
pub inline fn __swab64(x: anytype) __u64 {
    _ = &x;
    return @import("std").zig.c_translation.cast(__u64, if (__builtin_constant_p(x)) ___constant_swab64(x) else __fswab64(x));
}
pub inline fn __swahw32(x: anytype) @TypeOf(if (__builtin_constant_p(@import("std").zig.c_translation.cast(__u32, x))) ___constant_swahw32(x) else __fswahw32(x)) {
    _ = &x;
    return if (__builtin_constant_p(@import("std").zig.c_translation.cast(__u32, x))) ___constant_swahw32(x) else __fswahw32(x);
}
pub inline fn __swahb32(x: anytype) @TypeOf(if (__builtin_constant_p(@import("std").zig.c_translation.cast(__u32, x))) ___constant_swahb32(x) else __fswahb32(x)) {
    _ = &x;
    return if (__builtin_constant_p(@import("std").zig.c_translation.cast(__u32, x))) ___constant_swahb32(x) else __fswahb32(x);
}
pub const _SYS_WAIT_H = @as(c_int, 1);
pub const WNOHANG = @as(c_int, 1);
pub const WUNTRACED = @as(c_int, 2);
pub const WSTOPPED = @as(c_int, 2);
pub const WEXITED = @as(c_int, 4);
pub const WCONTINUED = @as(c_int, 8);
pub const WNOWAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const __WNOTHREAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const __WALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const __WCLONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub inline fn __WEXITSTATUS(status: anytype) @TypeOf((status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hex)) >> @as(c_int, 8)) {
    _ = &status;
    return (status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hex)) >> @as(c_int, 8);
}
pub inline fn __WTERMSIG(status: anytype) @TypeOf(status & @as(c_int, 0x7f)) {
    _ = &status;
    return status & @as(c_int, 0x7f);
}
pub inline fn __WSTOPSIG(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    _ = &status;
    return __WEXITSTATUS(status);
}
pub inline fn __WIFEXITED(status: anytype) @TypeOf(__WTERMSIG(status) == @as(c_int, 0)) {
    _ = &status;
    return __WTERMSIG(status) == @as(c_int, 0);
}
pub inline fn __WIFSIGNALED(status: anytype) @TypeOf((@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0)) {
    _ = &status;
    return (@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0);
}
pub inline fn __WIFSTOPPED(status: anytype) @TypeOf((status & @as(c_int, 0xff)) == @as(c_int, 0x7f)) {
    _ = &status;
    return (status & @as(c_int, 0xff)) == @as(c_int, 0x7f);
}
pub inline fn __WIFCONTINUED(status: anytype) @TypeOf(status == __W_CONTINUED) {
    _ = &status;
    return status == __W_CONTINUED;
}
pub inline fn __WCOREDUMP(status: anytype) @TypeOf(status & __WCOREFLAG) {
    _ = &status;
    return status & __WCOREFLAG;
}
pub inline fn __W_EXITCODE(ret: anytype, sig: anytype) @TypeOf((ret << @as(c_int, 8)) | sig) {
    _ = &ret;
    _ = &sig;
    return (ret << @as(c_int, 8)) | sig;
}
pub inline fn __W_STOPCODE(sig: anytype) @TypeOf((sig << @as(c_int, 8)) | @as(c_int, 0x7f)) {
    _ = &sig;
    return (sig << @as(c_int, 8)) | @as(c_int, 0x7f);
}
pub const __W_CONTINUED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hex);
pub const __WCOREFLAG = @as(c_int, 0x80);
pub inline fn WEXITSTATUS(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    _ = &status;
    return __WEXITSTATUS(status);
}
pub inline fn WTERMSIG(status: anytype) @TypeOf(__WTERMSIG(status)) {
    _ = &status;
    return __WTERMSIG(status);
}
pub inline fn WSTOPSIG(status: anytype) @TypeOf(__WSTOPSIG(status)) {
    _ = &status;
    return __WSTOPSIG(status);
}
pub inline fn WIFEXITED(status: anytype) @TypeOf(__WIFEXITED(status)) {
    _ = &status;
    return __WIFEXITED(status);
}
pub inline fn WIFSIGNALED(status: anytype) @TypeOf(__WIFSIGNALED(status)) {
    _ = &status;
    return __WIFSIGNALED(status);
}
pub inline fn WIFSTOPPED(status: anytype) @TypeOf(__WIFSTOPPED(status)) {
    _ = &status;
    return __WIFSTOPPED(status);
}
pub inline fn WIFCONTINUED(status: anytype) @TypeOf(__WIFCONTINUED(status)) {
    _ = &status;
    return __WIFCONTINUED(status);
}
pub const WCOREFLAG = __WCOREFLAG;
pub inline fn WCOREDUMP(status: anytype) @TypeOf(__WCOREDUMP(status)) {
    _ = &status;
    return __WCOREDUMP(status);
}
pub inline fn W_EXITCODE(ret: anytype, sig: anytype) @TypeOf(__W_EXITCODE(ret, sig)) {
    _ = &ret;
    _ = &sig;
    return __W_EXITCODE(ret, sig);
}
pub inline fn W_STOPCODE(sig: anytype) @TypeOf(__W_STOPCODE(sig)) {
    _ = &sig;
    return __W_STOPCODE(sig);
}
pub const __idtype_t_defined = "";
pub const WAIT_ANY = -@as(c_int, 1);
pub const WAIT_MYPGRP = @as(c_int, 0);
pub const LIBURING_COMPAT_H = "";
pub const _LINUX_TIME_TYPES_H = "";
pub const UAPI_LINUX_IO_URING_H_SKIP_LINUX_TIME_TYPES_H = @as(c_int, 1);
pub const _LINUX_OPENAT2_H = "";
pub const RESOLVE_NO_XDEV = @as(c_int, 0x01);
pub const RESOLVE_NO_MAGICLINKS = @as(c_int, 0x02);
pub const RESOLVE_NO_SYMLINKS = @as(c_int, 0x04);
pub const RESOLVE_BENEATH = @as(c_int, 0x08);
pub const RESOLVE_IN_ROOT = @as(c_int, 0x10);
pub const RESOLVE_CACHED = @as(c_int, 0x20);
pub const _LINUX_IOCTL_H = "";
pub const _ASM_GENERIC_IOCTL_H = "";
pub const _IOC_NRBITS = @as(c_int, 8);
pub const _IOC_TYPEBITS = @as(c_int, 8);
pub const _IOC_SIZEBITS = @as(c_int, 14);
pub const _IOC_DIRBITS = @as(c_int, 2);
pub const _IOC_NRMASK = (@as(c_int, 1) << _IOC_NRBITS) - @as(c_int, 1);
pub const _IOC_TYPEMASK = (@as(c_int, 1) << _IOC_TYPEBITS) - @as(c_int, 1);
pub const _IOC_SIZEMASK = (@as(c_int, 1) << _IOC_SIZEBITS) - @as(c_int, 1);
pub const _IOC_DIRMASK = (@as(c_int, 1) << _IOC_DIRBITS) - @as(c_int, 1);
pub const _IOC_NRSHIFT = @as(c_int, 0);
pub const _IOC_TYPESHIFT = _IOC_NRSHIFT + _IOC_NRBITS;
pub const _IOC_SIZESHIFT = _IOC_TYPESHIFT + _IOC_TYPEBITS;
pub const _IOC_DIRSHIFT = _IOC_SIZESHIFT + _IOC_SIZEBITS;
pub const _IOC_NONE = @as(c_uint, 0);
pub const _IOC_WRITE = @as(c_uint, 1);
pub const _IOC_READ = @as(c_uint, 2);
pub inline fn _IOC(dir: anytype, @"type": anytype, nr: anytype, size: anytype) @TypeOf((((dir << _IOC_DIRSHIFT) | (@"type" << _IOC_TYPESHIFT)) | (nr << _IOC_NRSHIFT)) | (size << _IOC_SIZESHIFT)) {
    _ = &dir;
    _ = &@"type";
    _ = &nr;
    _ = &size;
    return (((dir << _IOC_DIRSHIFT) | (@"type" << _IOC_TYPESHIFT)) | (nr << _IOC_NRSHIFT)) | (size << _IOC_SIZESHIFT);
}
pub inline fn _IOC_TYPECHECK(t: anytype) @TypeOf(@import("std").zig.c_translation.sizeof(t)) {
    _ = &t;
    return @import("std").zig.c_translation.sizeof(t);
}
pub inline fn _IO(@"type": anytype, nr: anytype) @TypeOf(_IOC(_IOC_NONE, @"type", nr, @as(c_int, 0))) {
    _ = &@"type";
    _ = &nr;
    return _IOC(_IOC_NONE, @"type", nr, @as(c_int, 0));
}
pub inline fn _IOR(@"type": anytype, nr: anytype, size: anytype) @TypeOf(_IOC(_IOC_READ, @"type", nr, _IOC_TYPECHECK(size))) {
    _ = &@"type";
    _ = &nr;
    _ = &size;
    return _IOC(_IOC_READ, @"type", nr, _IOC_TYPECHECK(size));
}
pub inline fn _IOW(@"type": anytype, nr: anytype, size: anytype) @TypeOf(_IOC(_IOC_WRITE, @"type", nr, _IOC_TYPECHECK(size))) {
    _ = &@"type";
    _ = &nr;
    _ = &size;
    return _IOC(_IOC_WRITE, @"type", nr, _IOC_TYPECHECK(size));
}
pub inline fn _IOWR(@"type": anytype, nr: anytype, size: anytype) @TypeOf(_IOC(_IOC_READ | _IOC_WRITE, @"type", nr, _IOC_TYPECHECK(size))) {
    _ = &@"type";
    _ = &nr;
    _ = &size;
    return _IOC(_IOC_READ | _IOC_WRITE, @"type", nr, _IOC_TYPECHECK(size));
}
pub inline fn _IOR_BAD(@"type": anytype, nr: anytype, size: anytype) @TypeOf(_IOC(_IOC_READ, @"type", nr, @import("std").zig.c_translation.sizeof(size))) {
    _ = &@"type";
    _ = &nr;
    _ = &size;
    return _IOC(_IOC_READ, @"type", nr, @import("std").zig.c_translation.sizeof(size));
}
pub inline fn _IOW_BAD(@"type": anytype, nr: anytype, size: anytype) @TypeOf(_IOC(_IOC_WRITE, @"type", nr, @import("std").zig.c_translation.sizeof(size))) {
    _ = &@"type";
    _ = &nr;
    _ = &size;
    return _IOC(_IOC_WRITE, @"type", nr, @import("std").zig.c_translation.sizeof(size));
}
pub inline fn _IOWR_BAD(@"type": anytype, nr: anytype, size: anytype) @TypeOf(_IOC(_IOC_READ | _IOC_WRITE, @"type", nr, @import("std").zig.c_translation.sizeof(size))) {
    _ = &@"type";
    _ = &nr;
    _ = &size;
    return _IOC(_IOC_READ | _IOC_WRITE, @"type", nr, @import("std").zig.c_translation.sizeof(size));
}
pub inline fn _IOC_DIR(nr: anytype) @TypeOf((nr >> _IOC_DIRSHIFT) & _IOC_DIRMASK) {
    _ = &nr;
    return (nr >> _IOC_DIRSHIFT) & _IOC_DIRMASK;
}
pub inline fn _IOC_TYPE(nr: anytype) @TypeOf((nr >> _IOC_TYPESHIFT) & _IOC_TYPEMASK) {
    _ = &nr;
    return (nr >> _IOC_TYPESHIFT) & _IOC_TYPEMASK;
}
pub inline fn _IOC_NR(nr: anytype) @TypeOf((nr >> _IOC_NRSHIFT) & _IOC_NRMASK) {
    _ = &nr;
    return (nr >> _IOC_NRSHIFT) & _IOC_NRMASK;
}
pub inline fn _IOC_SIZE(nr: anytype) @TypeOf((nr >> _IOC_SIZESHIFT) & _IOC_SIZEMASK) {
    _ = &nr;
    return (nr >> _IOC_SIZESHIFT) & _IOC_SIZEMASK;
}
pub const IOC_IN = _IOC_WRITE << _IOC_DIRSHIFT;
pub const IOC_OUT = _IOC_READ << _IOC_DIRSHIFT;
pub const IOC_INOUT = (_IOC_WRITE | _IOC_READ) << _IOC_DIRSHIFT;
pub const IOCSIZE_MASK = _IOC_SIZEMASK << _IOC_SIZESHIFT;
pub const IOCSIZE_SHIFT = _IOC_SIZESHIFT;
pub const BLOCK_URING_CMD_DISCARD = _IO(@as(c_int, 0x12), @as(c_int, 0));
pub const LINUX_IO_URING_H = "";
pub const _LINUX_FS_H = "";
pub const _LINUX_LIMITS_H = "";
pub const NR_OPEN = @as(c_int, 1024);
pub const NGROUPS_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const ARG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 131072, .decimal);
pub const LINK_MAX = @as(c_int, 127);
pub const MAX_CANON = @as(c_int, 255);
pub const MAX_INPUT = @as(c_int, 255);
pub const NAME_MAX = @as(c_int, 255);
pub const PATH_MAX = @as(c_int, 4096);
pub const PIPE_BUF = @as(c_int, 4096);
pub const XATTR_NAME_MAX = @as(c_int, 255);
pub const XATTR_SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const XATTR_LIST_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const RTSIG_MAX = @as(c_int, 32);
pub const _LINUX_FSCRYPT_H = "";
pub const FSCRYPT_POLICY_FLAGS_PAD_4 = @as(c_int, 0x00);
pub const FSCRYPT_POLICY_FLAGS_PAD_8 = @as(c_int, 0x01);
pub const FSCRYPT_POLICY_FLAGS_PAD_16 = @as(c_int, 0x02);
pub const FSCRYPT_POLICY_FLAGS_PAD_32 = @as(c_int, 0x03);
pub const FSCRYPT_POLICY_FLAGS_PAD_MASK = @as(c_int, 0x03);
pub const FSCRYPT_POLICY_FLAG_DIRECT_KEY = @as(c_int, 0x04);
pub const FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64 = @as(c_int, 0x08);
pub const FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32 = @as(c_int, 0x10);
pub const FSCRYPT_MODE_AES_256_XTS = @as(c_int, 1);
pub const FSCRYPT_MODE_AES_256_CTS = @as(c_int, 4);
pub const FSCRYPT_MODE_AES_128_CBC = @as(c_int, 5);
pub const FSCRYPT_MODE_AES_128_CTS = @as(c_int, 6);
pub const FSCRYPT_MODE_SM4_XTS = @as(c_int, 7);
pub const FSCRYPT_MODE_SM4_CTS = @as(c_int, 8);
pub const FSCRYPT_MODE_ADIANTUM = @as(c_int, 9);
pub const FSCRYPT_MODE_AES_256_HCTR2 = @as(c_int, 10);
pub const FSCRYPT_POLICY_V1 = @as(c_int, 0);
pub const FSCRYPT_KEY_DESCRIPTOR_SIZE = @as(c_int, 8);
pub const FSCRYPT_KEY_DESC_PREFIX = "fscrypt:";
pub const FSCRYPT_KEY_DESC_PREFIX_SIZE = @as(c_int, 8);
pub const FSCRYPT_MAX_KEY_SIZE = @as(c_int, 64);
pub const FSCRYPT_POLICY_V2 = @as(c_int, 2);
pub const FSCRYPT_KEY_IDENTIFIER_SIZE = @as(c_int, 16);
pub const FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR = @as(c_int, 1);
pub const FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER = @as(c_int, 2);
pub const FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY = @as(c_int, 0x00000001);
pub const FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS = @as(c_int, 0x00000002);
pub const FSCRYPT_KEY_STATUS_ABSENT = @as(c_int, 1);
pub const FSCRYPT_KEY_STATUS_PRESENT = @as(c_int, 2);
pub const FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED = @as(c_int, 3);
pub const FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF = @as(c_int, 0x00000001);
pub const FS_IOC_SET_ENCRYPTION_POLICY = _IOR('f', @as(c_int, 19), struct_fscrypt_policy_v1);
pub const FS_IOC_GET_ENCRYPTION_PWSALT = _IOW('f', @as(c_int, 20), __u8[@as(usize, @intCast(@as(c_int, 16)))]);
pub const FS_IOC_GET_ENCRYPTION_POLICY = _IOW('f', @as(c_int, 21), struct_fscrypt_policy_v1);
pub const FS_IOC_GET_ENCRYPTION_POLICY_EX = _IOWR('f', @as(c_int, 22), __u8[@as(usize, @intCast(@as(c_int, 9)))]);
pub const FS_IOC_ADD_ENCRYPTION_KEY = _IOWR('f', @as(c_int, 23), struct_fscrypt_add_key_arg);
pub const FS_IOC_REMOVE_ENCRYPTION_KEY = _IOWR('f', @as(c_int, 24), struct_fscrypt_remove_key_arg);
pub const FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS = _IOWR('f', @as(c_int, 25), struct_fscrypt_remove_key_arg);
pub const FS_IOC_GET_ENCRYPTION_KEY_STATUS = _IOWR('f', @as(c_int, 26), struct_fscrypt_get_key_status_arg);
pub const FS_IOC_GET_ENCRYPTION_NONCE = _IOR('f', @as(c_int, 27), __u8[@as(usize, @intCast(@as(c_int, 16)))]);
pub const fscrypt_policy = fscrypt_policy_v1;
pub const FS_KEY_DESCRIPTOR_SIZE = FSCRYPT_KEY_DESCRIPTOR_SIZE;
pub const FS_POLICY_FLAGS_PAD_4 = FSCRYPT_POLICY_FLAGS_PAD_4;
pub const FS_POLICY_FLAGS_PAD_8 = FSCRYPT_POLICY_FLAGS_PAD_8;
pub const FS_POLICY_FLAGS_PAD_16 = FSCRYPT_POLICY_FLAGS_PAD_16;
pub const FS_POLICY_FLAGS_PAD_32 = FSCRYPT_POLICY_FLAGS_PAD_32;
pub const FS_POLICY_FLAGS_PAD_MASK = FSCRYPT_POLICY_FLAGS_PAD_MASK;
pub const FS_POLICY_FLAG_DIRECT_KEY = FSCRYPT_POLICY_FLAG_DIRECT_KEY;
pub const FS_POLICY_FLAGS_VALID = @as(c_int, 0x07);
pub const FS_ENCRYPTION_MODE_INVALID = @as(c_int, 0);
pub const FS_ENCRYPTION_MODE_AES_256_XTS = FSCRYPT_MODE_AES_256_XTS;
pub const FS_ENCRYPTION_MODE_AES_256_GCM = @as(c_int, 2);
pub const FS_ENCRYPTION_MODE_AES_256_CBC = @as(c_int, 3);
pub const FS_ENCRYPTION_MODE_AES_256_CTS = FSCRYPT_MODE_AES_256_CTS;
pub const FS_ENCRYPTION_MODE_AES_128_CBC = FSCRYPT_MODE_AES_128_CBC;
pub const FS_ENCRYPTION_MODE_AES_128_CTS = FSCRYPT_MODE_AES_128_CTS;
pub const FS_ENCRYPTION_MODE_ADIANTUM = FSCRYPT_MODE_ADIANTUM;
pub const FS_KEY_DESC_PREFIX = FSCRYPT_KEY_DESC_PREFIX;
pub const FS_KEY_DESC_PREFIX_SIZE = FSCRYPT_KEY_DESC_PREFIX_SIZE;
pub const FS_MAX_KEY_SIZE = FSCRYPT_MAX_KEY_SIZE;
pub const _LINUX_MOUNT_H = "";
pub const MS_RDONLY = @as(c_int, 1);
pub const MS_NOSUID = @as(c_int, 2);
pub const MS_NODEV = @as(c_int, 4);
pub const MS_NOEXEC = @as(c_int, 8);
pub const MS_SYNCHRONOUS = @as(c_int, 16);
pub const MS_REMOUNT = @as(c_int, 32);
pub const MS_MANDLOCK = @as(c_int, 64);
pub const MS_DIRSYNC = @as(c_int, 128);
pub const MS_NOSYMFOLLOW = @as(c_int, 256);
pub const MS_NOATIME = @as(c_int, 1024);
pub const MS_NODIRATIME = @as(c_int, 2048);
pub const MS_BIND = @as(c_int, 4096);
pub const MS_MOVE = @as(c_int, 8192);
pub const MS_REC = @as(c_int, 16384);
pub const MS_VERBOSE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const MS_SILENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const MS_POSIXACL = @as(c_int, 1) << @as(c_int, 16);
pub const MS_UNBINDABLE = @as(c_int, 1) << @as(c_int, 17);
pub const MS_PRIVATE = @as(c_int, 1) << @as(c_int, 18);
pub const MS_SLAVE = @as(c_int, 1) << @as(c_int, 19);
pub const MS_SHARED = @as(c_int, 1) << @as(c_int, 20);
pub const MS_RELATIME = @as(c_int, 1) << @as(c_int, 21);
pub const MS_KERNMOUNT = @as(c_int, 1) << @as(c_int, 22);
pub const MS_I_VERSION = @as(c_int, 1) << @as(c_int, 23);
pub const MS_STRICTATIME = @as(c_int, 1) << @as(c_int, 24);
pub const MS_LAZYTIME = @as(c_int, 1) << @as(c_int, 25);
pub const MS_SUBMOUNT = @as(c_int, 1) << @as(c_int, 26);
pub const MS_NOREMOTELOCK = @as(c_int, 1) << @as(c_int, 27);
pub const MS_NOSEC = @as(c_int, 1) << @as(c_int, 28);
pub const MS_BORN = @as(c_int, 1) << @as(c_int, 29);
pub const MS_ACTIVE = @as(c_int, 1) << @as(c_int, 30);
pub const MS_NOUSER = @as(c_int, 1) << @as(c_int, 31);
pub const MS_RMT_MASK = (((MS_RDONLY | MS_SYNCHRONOUS) | MS_MANDLOCK) | MS_I_VERSION) | MS_LAZYTIME;
pub const MS_MGC_VAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xC0ED0000, .hex);
pub const MS_MGC_MSK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff0000, .hex);
pub const OPEN_TREE_CLONE = @as(c_int, 1);
pub const OPEN_TREE_CLOEXEC = O_CLOEXEC;
pub const MOVE_MOUNT_F_SYMLINKS = @as(c_int, 0x00000001);
pub const MOVE_MOUNT_F_AUTOMOUNTS = @as(c_int, 0x00000002);
pub const MOVE_MOUNT_F_EMPTY_PATH = @as(c_int, 0x00000004);
pub const MOVE_MOUNT_T_SYMLINKS = @as(c_int, 0x00000010);
pub const MOVE_MOUNT_T_AUTOMOUNTS = @as(c_int, 0x00000020);
pub const MOVE_MOUNT_T_EMPTY_PATH = @as(c_int, 0x00000040);
pub const MOVE_MOUNT_SET_GROUP = @as(c_int, 0x00000100);
pub const MOVE_MOUNT_BENEATH = @as(c_int, 0x00000200);
pub const MOVE_MOUNT__MASK = @as(c_int, 0x00000377);
pub const FSOPEN_CLOEXEC = @as(c_int, 0x00000001);
pub const FSPICK_CLOEXEC = @as(c_int, 0x00000001);
pub const FSPICK_SYMLINK_NOFOLLOW = @as(c_int, 0x00000002);
pub const FSPICK_NO_AUTOMOUNT = @as(c_int, 0x00000004);
pub const FSPICK_EMPTY_PATH = @as(c_int, 0x00000008);
pub const FSMOUNT_CLOEXEC = @as(c_int, 0x00000001);
pub const MOUNT_ATTR_RDONLY = @as(c_int, 0x00000001);
pub const MOUNT_ATTR_NOSUID = @as(c_int, 0x00000002);
pub const MOUNT_ATTR_NODEV = @as(c_int, 0x00000004);
pub const MOUNT_ATTR_NOEXEC = @as(c_int, 0x00000008);
pub const MOUNT_ATTR__ATIME = @as(c_int, 0x00000070);
pub const MOUNT_ATTR_RELATIME = @as(c_int, 0x00000000);
pub const MOUNT_ATTR_NOATIME = @as(c_int, 0x00000010);
pub const MOUNT_ATTR_STRICTATIME = @as(c_int, 0x00000020);
pub const MOUNT_ATTR_NODIRATIME = @as(c_int, 0x00000080);
pub const MOUNT_ATTR_IDMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const MOUNT_ATTR_NOSYMFOLLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const MOUNT_ATTR_SIZE_VER0 = @as(c_int, 32);
pub const MNT_ID_REQ_SIZE_VER0 = @as(c_int, 24);
pub const STATMOUNT_SB_BASIC = @as(c_uint, 0x00000001);
pub const STATMOUNT_MNT_BASIC = @as(c_uint, 0x00000002);
pub const STATMOUNT_PROPAGATE_FROM = @as(c_uint, 0x00000004);
pub const STATMOUNT_MNT_ROOT = @as(c_uint, 0x00000008);
pub const STATMOUNT_MNT_POINT = @as(c_uint, 0x00000010);
pub const STATMOUNT_FS_TYPE = @as(c_uint, 0x00000020);
pub const LSMT_ROOT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffffffffffff, .hex);
pub const INR_OPEN_CUR = @as(c_int, 1024);
pub const INR_OPEN_MAX = @as(c_int, 4096);
pub const BLOCK_SIZE_BITS = @as(c_int, 10);
pub const BLOCK_SIZE = @as(c_int, 1) << BLOCK_SIZE_BITS;
pub const SEEK_DATA = @as(c_int, 3);
pub const SEEK_HOLE = @as(c_int, 4);
pub const SEEK_MAX = SEEK_HOLE;
pub const RENAME_NOREPLACE = @as(c_int, 1) << @as(c_int, 0);
pub const RENAME_EXCHANGE = @as(c_int, 1) << @as(c_int, 1);
pub const RENAME_WHITEOUT = @as(c_int, 1) << @as(c_int, 2);
pub const FILE_DEDUPE_RANGE_SAME = @as(c_int, 0);
pub const FILE_DEDUPE_RANGE_DIFFERS = @as(c_int, 1);
pub const NR_FILE = @as(c_int, 8192);
pub const FS_XFLAG_REALTIME = @as(c_int, 0x00000001);
pub const FS_XFLAG_PREALLOC = @as(c_int, 0x00000002);
pub const FS_XFLAG_IMMUTABLE = @as(c_int, 0x00000008);
pub const FS_XFLAG_APPEND = @as(c_int, 0x00000010);
pub const FS_XFLAG_SYNC = @as(c_int, 0x00000020);
pub const FS_XFLAG_NOATIME = @as(c_int, 0x00000040);
pub const FS_XFLAG_NODUMP = @as(c_int, 0x00000080);
pub const FS_XFLAG_RTINHERIT = @as(c_int, 0x00000100);
pub const FS_XFLAG_PROJINHERIT = @as(c_int, 0x00000200);
pub const FS_XFLAG_NOSYMLINKS = @as(c_int, 0x00000400);
pub const FS_XFLAG_EXTSIZE = @as(c_int, 0x00000800);
pub const FS_XFLAG_EXTSZINHERIT = @as(c_int, 0x00001000);
pub const FS_XFLAG_NODEFRAG = @as(c_int, 0x00002000);
pub const FS_XFLAG_FILESTREAM = @as(c_int, 0x00004000);
pub const FS_XFLAG_DAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const FS_XFLAG_COWEXTSIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const FS_XFLAG_HASATTR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const BLKROSET = _IO(@as(c_int, 0x12), @as(c_int, 93));
pub const BLKROGET = _IO(@as(c_int, 0x12), @as(c_int, 94));
pub const BLKRRPART = _IO(@as(c_int, 0x12), @as(c_int, 95));
pub const BLKGETSIZE = _IO(@as(c_int, 0x12), @as(c_int, 96));
pub const BLKFLSBUF = _IO(@as(c_int, 0x12), @as(c_int, 97));
pub const BLKRASET = _IO(@as(c_int, 0x12), @as(c_int, 98));
pub const BLKRAGET = _IO(@as(c_int, 0x12), @as(c_int, 99));
pub const BLKFRASET = _IO(@as(c_int, 0x12), @as(c_int, 100));
pub const BLKFRAGET = _IO(@as(c_int, 0x12), @as(c_int, 101));
pub const BLKSECTSET = _IO(@as(c_int, 0x12), @as(c_int, 102));
pub const BLKSECTGET = _IO(@as(c_int, 0x12), @as(c_int, 103));
pub const BLKSSZGET = _IO(@as(c_int, 0x12), @as(c_int, 104));
pub const BLKBSZGET = _IOR(@as(c_int, 0x12), @as(c_int, 112), usize);
pub const BLKBSZSET = _IOW(@as(c_int, 0x12), @as(c_int, 113), usize);
pub const BLKGETSIZE64 = _IOR(@as(c_int, 0x12), @as(c_int, 114), usize);
pub const BLKTRACESETUP = @compileError("unable to translate macro: undefined identifier `blk_user_trace_setup`");
// /usr/include/linux/fs.h:170:9
pub const BLKTRACESTART = _IO(@as(c_int, 0x12), @as(c_int, 116));
pub const BLKTRACESTOP = _IO(@as(c_int, 0x12), @as(c_int, 117));
pub const BLKTRACETEARDOWN = _IO(@as(c_int, 0x12), @as(c_int, 118));
pub const BLKDISCARD = _IO(@as(c_int, 0x12), @as(c_int, 119));
pub const BLKIOMIN = _IO(@as(c_int, 0x12), @as(c_int, 120));
pub const BLKIOOPT = _IO(@as(c_int, 0x12), @as(c_int, 121));
pub const BLKALIGNOFF = _IO(@as(c_int, 0x12), @as(c_int, 122));
pub const BLKPBSZGET = _IO(@as(c_int, 0x12), @as(c_int, 123));
pub const BLKDISCARDZEROES = _IO(@as(c_int, 0x12), @as(c_int, 124));
pub const BLKSECDISCARD = _IO(@as(c_int, 0x12), @as(c_int, 125));
pub const BLKROTATIONAL = _IO(@as(c_int, 0x12), @as(c_int, 126));
pub const BLKZEROOUT = _IO(@as(c_int, 0x12), @as(c_int, 127));
pub const BLKGETDISKSEQ = _IOR(@as(c_int, 0x12), @as(c_int, 128), __u64);
pub const BMAP_IOCTL = @as(c_int, 1);
pub const FIBMAP = _IO(@as(c_int, 0x00), @as(c_int, 1));
pub const FIGETBSZ = _IO(@as(c_int, 0x00), @as(c_int, 2));
pub const FIFREEZE = _IOWR('X', @as(c_int, 119), c_int);
pub const FITHAW = _IOWR('X', @as(c_int, 120), c_int);
pub const FITRIM = _IOWR('X', @as(c_int, 121), struct_fstrim_range);
pub const FICLONE = _IOW(@as(c_int, 0x94), @as(c_int, 9), c_int);
pub const FICLONERANGE = _IOW(@as(c_int, 0x94), @as(c_int, 13), struct_file_clone_range);
pub const FIDEDUPERANGE = _IOWR(@as(c_int, 0x94), @as(c_int, 54), struct_file_dedupe_range);
pub const FSLABEL_MAX = @as(c_int, 256);
pub const FS_IOC_GETFLAGS = _IOR('f', @as(c_int, 1), c_long);
pub const FS_IOC_SETFLAGS = _IOW('f', @as(c_int, 2), c_long);
pub const FS_IOC_GETVERSION = _IOR('v', @as(c_int, 1), c_long);
pub const FS_IOC_SETVERSION = _IOW('v', @as(c_int, 2), c_long);
pub const FS_IOC_FIEMAP = @compileError("unable to translate macro: undefined identifier `fiemap`");
// /usr/include/linux/fs.h:205:9
pub const FS_IOC32_GETFLAGS = _IOR('f', @as(c_int, 1), c_int);
pub const FS_IOC32_SETFLAGS = _IOW('f', @as(c_int, 2), c_int);
pub const FS_IOC32_GETVERSION = _IOR('v', @as(c_int, 1), c_int);
pub const FS_IOC32_SETVERSION = _IOW('v', @as(c_int, 2), c_int);
pub const FS_IOC_FSGETXATTR = _IOR('X', @as(c_int, 31), struct_fsxattr);
pub const FS_IOC_FSSETXATTR = _IOW('X', @as(c_int, 32), struct_fsxattr);
pub const FS_IOC_GETFSLABEL = _IOR(@as(c_int, 0x94), @as(c_int, 49), u8[@as(usize, @intCast(FSLABEL_MAX))]);
pub const FS_IOC_SETFSLABEL = _IOW(@as(c_int, 0x94), @as(c_int, 50), u8[@as(usize, @intCast(FSLABEL_MAX))]);
pub const FS_SECRM_FL = @as(c_int, 0x00000001);
pub const FS_UNRM_FL = @as(c_int, 0x00000002);
pub const FS_COMPR_FL = @as(c_int, 0x00000004);
pub const FS_SYNC_FL = @as(c_int, 0x00000008);
pub const FS_IMMUTABLE_FL = @as(c_int, 0x00000010);
pub const FS_APPEND_FL = @as(c_int, 0x00000020);
pub const FS_NODUMP_FL = @as(c_int, 0x00000040);
pub const FS_NOATIME_FL = @as(c_int, 0x00000080);
pub const FS_DIRTY_FL = @as(c_int, 0x00000100);
pub const FS_COMPRBLK_FL = @as(c_int, 0x00000200);
pub const FS_NOCOMP_FL = @as(c_int, 0x00000400);
pub const FS_ENCRYPT_FL = @as(c_int, 0x00000800);
pub const FS_BTREE_FL = @as(c_int, 0x00001000);
pub const FS_INDEX_FL = @as(c_int, 0x00001000);
pub const FS_IMAGIC_FL = @as(c_int, 0x00002000);
pub const FS_JOURNAL_DATA_FL = @as(c_int, 0x00004000);
pub const FS_NOTAIL_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const FS_DIRSYNC_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const FS_TOPDIR_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const FS_HUGE_FILE_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const FS_EXTENT_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const FS_VERITY_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const FS_EA_INODE_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const FS_EOFBLOCKS_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const FS_NOCOW_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const FS_DAX_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const FS_INLINE_DATA_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub const FS_PROJINHERIT_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const FS_CASEFOLD_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const FS_RESERVED_FL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const FS_FL_USER_VISIBLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0003DFFF, .hex);
pub const FS_FL_USER_MODIFIABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000380FF, .hex);
pub const SYNC_FILE_RANGE_WAIT_BEFORE = @as(c_int, 1);
pub const SYNC_FILE_RANGE_WRITE = @as(c_int, 2);
pub const SYNC_FILE_RANGE_WAIT_AFTER = @as(c_int, 4);
pub const SYNC_FILE_RANGE_WRITE_AND_WAIT = (SYNC_FILE_RANGE_WRITE | SYNC_FILE_RANGE_WAIT_BEFORE) | SYNC_FILE_RANGE_WAIT_AFTER;
pub const RWF_HIPRI = @import("std").zig.c_translation.cast(__kernel_rwf_t, @as(c_int, 0x00000001));
pub const RWF_DSYNC = @import("std").zig.c_translation.cast(__kernel_rwf_t, @as(c_int, 0x00000002));
pub const RWF_SYNC = @import("std").zig.c_translation.cast(__kernel_rwf_t, @as(c_int, 0x00000004));
pub const RWF_NOWAIT = @import("std").zig.c_translation.cast(__kernel_rwf_t, @as(c_int, 0x00000008));
pub const RWF_APPEND = @import("std").zig.c_translation.cast(__kernel_rwf_t, @as(c_int, 0x00000010));
pub const RWF_SUPPORTED = (((RWF_HIPRI | RWF_DSYNC) | RWF_SYNC) | RWF_NOWAIT) | RWF_APPEND;
pub const PAGEMAP_SCAN = _IOWR('f', @as(c_int, 16), struct_pm_scan_arg);
pub const PAGE_IS_WPALLOWED = @as(c_int, 1) << @as(c_int, 0);
pub const PAGE_IS_WRITTEN = @as(c_int, 1) << @as(c_int, 1);
pub const PAGE_IS_FILE = @as(c_int, 1) << @as(c_int, 2);
pub const PAGE_IS_PRESENT = @as(c_int, 1) << @as(c_int, 3);
pub const PAGE_IS_SWAPPED = @as(c_int, 1) << @as(c_int, 4);
pub const PAGE_IS_PFNZERO = @as(c_int, 1) << @as(c_int, 5);
pub const PAGE_IS_HUGE = @as(c_int, 1) << @as(c_int, 6);
pub const PAGE_IS_SOFT_DIRTY = @as(c_int, 1) << @as(c_int, 7);
pub const PM_SCAN_WP_MATCHING = @as(c_int, 1) << @as(c_int, 0);
pub const PM_SCAN_CHECK_WPASYNC = @as(c_int, 1) << @as(c_int, 1);
pub const IORING_FILE_INDEX_ALLOC = ~@as(c_uint, 0);
pub const IOSQE_FIXED_FILE = @as(c_uint, 1) << IOSQE_FIXED_FILE_BIT;
pub const IOSQE_IO_DRAIN = @as(c_uint, 1) << IOSQE_IO_DRAIN_BIT;
pub const IOSQE_IO_LINK = @as(c_uint, 1) << IOSQE_IO_LINK_BIT;
pub const IOSQE_IO_HARDLINK = @as(c_uint, 1) << IOSQE_IO_HARDLINK_BIT;
pub const IOSQE_ASYNC = @as(c_uint, 1) << IOSQE_ASYNC_BIT;
pub const IOSQE_BUFFER_SELECT = @as(c_uint, 1) << IOSQE_BUFFER_SELECT_BIT;
pub const IOSQE_CQE_SKIP_SUCCESS = @as(c_uint, 1) << IOSQE_CQE_SKIP_SUCCESS_BIT;
pub const IORING_SETUP_IOPOLL = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_SETUP_SQPOLL = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_SETUP_SQ_AFF = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_SETUP_CQSIZE = @as(c_uint, 1) << @as(c_int, 3);
pub const IORING_SETUP_CLAMP = @as(c_uint, 1) << @as(c_int, 4);
pub const IORING_SETUP_ATTACH_WQ = @as(c_uint, 1) << @as(c_int, 5);
pub const IORING_SETUP_R_DISABLED = @as(c_uint, 1) << @as(c_int, 6);
pub const IORING_SETUP_SUBMIT_ALL = @as(c_uint, 1) << @as(c_int, 7);
pub const IORING_SETUP_COOP_TASKRUN = @as(c_uint, 1) << @as(c_int, 8);
pub const IORING_SETUP_TASKRUN_FLAG = @as(c_uint, 1) << @as(c_int, 9);
pub const IORING_SETUP_SQE128 = @as(c_uint, 1) << @as(c_int, 10);
pub const IORING_SETUP_CQE32 = @as(c_uint, 1) << @as(c_int, 11);
pub const IORING_SETUP_SINGLE_ISSUER = @as(c_uint, 1) << @as(c_int, 12);
pub const IORING_SETUP_DEFER_TASKRUN = @as(c_uint, 1) << @as(c_int, 13);
pub const IORING_SETUP_NO_MMAP = @as(c_uint, 1) << @as(c_int, 14);
pub const IORING_SETUP_REGISTERED_FD_ONLY = @as(c_uint, 1) << @as(c_int, 15);
pub const IORING_SETUP_NO_SQARRAY = @as(c_uint, 1) << @as(c_int, 16);
pub const IORING_SETUP_HYBRID_IOPOLL = @as(c_uint, 1) << @as(c_int, 17);
pub const IORING_URING_CMD_FIXED = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_URING_CMD_MASK = IORING_URING_CMD_FIXED;
pub const IORING_FSYNC_DATASYNC = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_TIMEOUT_ABS = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_TIMEOUT_UPDATE = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_TIMEOUT_BOOTTIME = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_TIMEOUT_REALTIME = @as(c_uint, 1) << @as(c_int, 3);
pub const IORING_LINK_TIMEOUT_UPDATE = @as(c_uint, 1) << @as(c_int, 4);
pub const IORING_TIMEOUT_ETIME_SUCCESS = @as(c_uint, 1) << @as(c_int, 5);
pub const IORING_TIMEOUT_MULTISHOT = @as(c_uint, 1) << @as(c_int, 6);
pub const IORING_TIMEOUT_CLOCK_MASK = IORING_TIMEOUT_BOOTTIME | IORING_TIMEOUT_REALTIME;
pub const IORING_TIMEOUT_UPDATE_MASK = IORING_TIMEOUT_UPDATE | IORING_LINK_TIMEOUT_UPDATE;
pub const SPLICE_F_FD_IN_FIXED = @as(c_uint, 1) << @as(c_int, 31);
pub const IORING_POLL_ADD_MULTI = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_POLL_UPDATE_EVENTS = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_POLL_UPDATE_USER_DATA = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_POLL_ADD_LEVEL = @as(c_uint, 1) << @as(c_int, 3);
pub const IORING_ASYNC_CANCEL_ALL = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_ASYNC_CANCEL_FD = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_ASYNC_CANCEL_ANY = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_ASYNC_CANCEL_FD_FIXED = @as(c_uint, 1) << @as(c_int, 3);
pub const IORING_ASYNC_CANCEL_USERDATA = @as(c_uint, 1) << @as(c_int, 4);
pub const IORING_ASYNC_CANCEL_OP = @as(c_uint, 1) << @as(c_int, 5);
pub const IORING_RECVSEND_POLL_FIRST = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_RECV_MULTISHOT = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_RECVSEND_FIXED_BUF = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_SEND_ZC_REPORT_USAGE = @as(c_uint, 1) << @as(c_int, 3);
pub const IORING_RECVSEND_BUNDLE = @as(c_uint, 1) << @as(c_int, 4);
pub const IORING_NOTIF_USAGE_ZC_COPIED = @as(c_uint, 1) << @as(c_int, 31);
pub const IORING_ACCEPT_MULTISHOT = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_ACCEPT_DONTWAIT = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_ACCEPT_POLL_FIRST = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_MSG_RING_CQE_SKIP = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_MSG_RING_FLAGS_PASS = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_FIXED_FD_NO_CLOEXEC = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_NOP_INJECT_RESULT = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_CQE_F_BUFFER = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_CQE_F_MORE = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_CQE_F_SOCK_NONEMPTY = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_CQE_F_NOTIF = @as(c_uint, 1) << @as(c_int, 3);
pub const IORING_CQE_F_BUF_MORE = @as(c_uint, 1) << @as(c_int, 4);
pub const IORING_CQE_BUFFER_SHIFT = @as(c_int, 16);
pub const IORING_OFF_SQ_RING = @as(c_ulonglong, 0);
pub const IORING_OFF_CQ_RING = @as(c_ulonglong, 0x8000000);
pub const IORING_OFF_SQES = @as(c_ulonglong, 0x10000000);
pub const IORING_OFF_PBUF_RING = @as(c_ulonglong, 0x80000000);
pub const IORING_OFF_PBUF_SHIFT = @as(c_int, 16);
pub const IORING_OFF_MMAP_MASK = @as(c_ulonglong, 0xf8000000);
pub const IORING_SQ_NEED_WAKEUP = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_SQ_CQ_OVERFLOW = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_SQ_TASKRUN = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_CQ_EVENTFD_DISABLED = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_ENTER_GETEVENTS = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_ENTER_SQ_WAKEUP = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_ENTER_SQ_WAIT = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_ENTER_EXT_ARG = @as(c_uint, 1) << @as(c_int, 3);
pub const IORING_ENTER_REGISTERED_RING = @as(c_uint, 1) << @as(c_int, 4);
pub const IORING_ENTER_ABS_TIMER = @as(c_uint, 1) << @as(c_int, 5);
pub const IORING_ENTER_EXT_ARG_REG = @as(c_uint, 1) << @as(c_int, 6);
pub const IORING_FEAT_SINGLE_MMAP = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_FEAT_NODROP = @as(c_uint, 1) << @as(c_int, 1);
pub const IORING_FEAT_SUBMIT_STABLE = @as(c_uint, 1) << @as(c_int, 2);
pub const IORING_FEAT_RW_CUR_POS = @as(c_uint, 1) << @as(c_int, 3);
pub const IORING_FEAT_CUR_PERSONALITY = @as(c_uint, 1) << @as(c_int, 4);
pub const IORING_FEAT_FAST_POLL = @as(c_uint, 1) << @as(c_int, 5);
pub const IORING_FEAT_POLL_32BITS = @as(c_uint, 1) << @as(c_int, 6);
pub const IORING_FEAT_SQPOLL_NONFIXED = @as(c_uint, 1) << @as(c_int, 7);
pub const IORING_FEAT_EXT_ARG = @as(c_uint, 1) << @as(c_int, 8);
pub const IORING_FEAT_NATIVE_WORKERS = @as(c_uint, 1) << @as(c_int, 9);
pub const IORING_FEAT_RSRC_TAGS = @as(c_uint, 1) << @as(c_int, 10);
pub const IORING_FEAT_CQE_SKIP = @as(c_uint, 1) << @as(c_int, 11);
pub const IORING_FEAT_LINKED_FILE = @as(c_uint, 1) << @as(c_int, 12);
pub const IORING_FEAT_REG_REG_RING = @as(c_uint, 1) << @as(c_int, 13);
pub const IORING_FEAT_RECVSEND_BUNDLE = @as(c_uint, 1) << @as(c_int, 14);
pub const IORING_FEAT_MIN_TIMEOUT = @as(c_uint, 1) << @as(c_int, 15);
pub const IORING_FEAT_RW_ATTR = @as(c_uint, 1) << @as(c_int, 16);
pub const IORING_RSRC_REGISTER_SPARSE = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_REGISTER_FILES_SKIP = -@as(c_int, 2);
pub const IO_URING_OP_SUPPORTED = @as(c_uint, 1) << @as(c_int, 0);
pub const IORING_ZCRX_AREA_SHIFT = @as(c_int, 48);
pub const IORING_ZCRX_AREA_MASK = ~((@import("std").zig.c_translation.cast(__u64, @as(c_int, 1)) << IORING_ZCRX_AREA_SHIFT) - @as(c_int, 1));
pub const LIBURING_VERSION_H = "";
pub const IO_URING_VERSION_MAJOR = @as(c_int, 2);
pub const IO_URING_VERSION_MINOR = @as(c_int, 10);
pub const LIBURING_BARRIER_H = "";
pub const __CLANG_STDATOMIC_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_wchar_t = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const __STDDEF_H = "";
pub const _PTRDIFF_T = "";
pub const _WCHAR_T = "";
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /snap/zig/13822/lib/include/__stddef_offsetof.h:16:9
pub const ATOMIC_BOOL_LOCK_FREE = __CLANG_ATOMIC_BOOL_LOCK_FREE;
pub const ATOMIC_CHAR_LOCK_FREE = __CLANG_ATOMIC_CHAR_LOCK_FREE;
pub const ATOMIC_CHAR16_T_LOCK_FREE = __CLANG_ATOMIC_CHAR16_T_LOCK_FREE;
pub const ATOMIC_CHAR32_T_LOCK_FREE = __CLANG_ATOMIC_CHAR32_T_LOCK_FREE;
pub const ATOMIC_WCHAR_T_LOCK_FREE = __CLANG_ATOMIC_WCHAR_T_LOCK_FREE;
pub const ATOMIC_SHORT_LOCK_FREE = __CLANG_ATOMIC_SHORT_LOCK_FREE;
pub const ATOMIC_INT_LOCK_FREE = __CLANG_ATOMIC_INT_LOCK_FREE;
pub const ATOMIC_LONG_LOCK_FREE = __CLANG_ATOMIC_LONG_LOCK_FREE;
pub const ATOMIC_LLONG_LOCK_FREE = __CLANG_ATOMIC_LLONG_LOCK_FREE;
pub const ATOMIC_POINTER_LOCK_FREE = __CLANG_ATOMIC_POINTER_LOCK_FREE;
pub inline fn ATOMIC_VAR_INIT(value: anytype) @TypeOf(value) {
    _ = &value;
    return value;
}
pub const atomic_init = @compileError("unable to translate macro: undefined identifier `__c11_atomic_init`");
// /snap/zig/13822/lib/include/stdatomic.h:64:9
pub inline fn kill_dependency(y: anytype) @TypeOf(y) {
    _ = &y;
    return y;
}
pub const atomic_is_lock_free = @compileError("unable to translate macro: undefined identifier `__c11_atomic_is_lock_free`");
// /snap/zig/13822/lib/include/stdatomic.h:90:9
pub const atomic_store = @compileError("unable to translate macro: undefined identifier `__c11_atomic_store`");
// /snap/zig/13822/lib/include/stdatomic.h:141:9
pub const atomic_store_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_store`");
// /snap/zig/13822/lib/include/stdatomic.h:142:9
pub const atomic_load = @compileError("unable to translate macro: undefined identifier `__c11_atomic_load`");
// /snap/zig/13822/lib/include/stdatomic.h:144:9
pub const atomic_load_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_load`");
// /snap/zig/13822/lib/include/stdatomic.h:145:9
pub const atomic_exchange = @compileError("unable to translate macro: undefined identifier `__c11_atomic_exchange`");
// /snap/zig/13822/lib/include/stdatomic.h:147:9
pub const atomic_exchange_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_exchange`");
// /snap/zig/13822/lib/include/stdatomic.h:148:9
pub const atomic_compare_exchange_strong = @compileError("unable to translate macro: undefined identifier `__c11_atomic_compare_exchange_strong`");
// /snap/zig/13822/lib/include/stdatomic.h:150:9
pub const atomic_compare_exchange_strong_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_compare_exchange_strong`");
// /snap/zig/13822/lib/include/stdatomic.h:151:9
pub const atomic_compare_exchange_weak = @compileError("unable to translate macro: undefined identifier `__c11_atomic_compare_exchange_weak`");
// /snap/zig/13822/lib/include/stdatomic.h:153:9
pub const atomic_compare_exchange_weak_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_compare_exchange_weak`");
// /snap/zig/13822/lib/include/stdatomic.h:154:9
pub const atomic_fetch_add = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_add`");
// /snap/zig/13822/lib/include/stdatomic.h:156:9
pub const atomic_fetch_add_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_add`");
// /snap/zig/13822/lib/include/stdatomic.h:157:9
pub const atomic_fetch_sub = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_sub`");
// /snap/zig/13822/lib/include/stdatomic.h:159:9
pub const atomic_fetch_sub_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_sub`");
// /snap/zig/13822/lib/include/stdatomic.h:160:9
pub const atomic_fetch_or = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_or`");
// /snap/zig/13822/lib/include/stdatomic.h:162:9
pub const atomic_fetch_or_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_or`");
// /snap/zig/13822/lib/include/stdatomic.h:163:9
pub const atomic_fetch_xor = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_xor`");
// /snap/zig/13822/lib/include/stdatomic.h:165:9
pub const atomic_fetch_xor_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_xor`");
// /snap/zig/13822/lib/include/stdatomic.h:166:9
pub const atomic_fetch_and = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_and`");
// /snap/zig/13822/lib/include/stdatomic.h:168:9
pub const atomic_fetch_and_explicit = @compileError("unable to translate macro: undefined identifier `__c11_atomic_fetch_and`");
// /snap/zig/13822/lib/include/stdatomic.h:169:9
pub const ATOMIC_FLAG_INIT = @compileError("unable to translate C expr: unexpected token '{'");
// /snap/zig/13822/lib/include/stdatomic.h:178:9
pub const IO_URING_WRITE_ONCE = @compileError("unable to translate C expr: unexpected token '_Atomic'");
// ./src/include/liburing/barrier.h:63:9
pub const IO_URING_READ_ONCE = @compileError("unable to translate C expr: unexpected token '_Atomic'");
// ./src/include/liburing/barrier.h:66:9
pub const io_uring_smp_store_release = @compileError("unable to translate C expr: unexpected token '_Atomic'");
// ./src/include/liburing/barrier.h:70:9
pub const io_uring_smp_load_acquire = @compileError("unable to translate C expr: unexpected token '_Atomic'");
// ./src/include/liburing/barrier.h:73:9
pub inline fn io_uring_smp_mb() @TypeOf(atomic_thread_fence(memory_order_seq_cst)) {
    return atomic_thread_fence(memory_order_seq_cst);
}
pub inline fn uring_unlikely(cond: anytype) @TypeOf(__builtin_expect(!!(cond != 0), @as(c_int, 0))) {
    _ = &cond;
    return __builtin_expect(!!(cond != 0), @as(c_int, 0));
}
pub inline fn uring_likely(cond: anytype) @TypeOf(__builtin_expect(!!(cond != 0), @as(c_int, 1))) {
    _ = &cond;
    return __builtin_expect(!!(cond != 0), @as(c_int, 1));
}
pub const IOURINGINLINE = @compileError("unable to translate C expr: unexpected token 'static'");
// ./src/include/liburing.h:32:9
pub const __NR_io_uring_setup = @as(c_int, 425);
pub const __NR_io_uring_enter = @as(c_int, 426);
pub const __NR_io_uring_register = @as(c_int, 427);
pub const LIBURING_UDATA_TIMEOUT = @import("std").zig.c_translation.cast(__u64, -@as(c_int, 1));
pub const io_uring_for_each_cqe = @compileError("unable to translate macro: undefined identifier `__ITER__`");
// ./src/include/liburing.h:377:9
pub const LIBURING_HAVE_DATA64 = "";
pub inline fn IO_URING_CHECK_VERSION(major: anytype, minor: anytype) @TypeOf((major > IO_URING_VERSION_MAJOR) or ((major == IO_URING_VERSION_MAJOR) and (minor > IO_URING_VERSION_MINOR))) {
    _ = &major;
    _ = &minor;
    return (major > IO_URING_VERSION_MAJOR) or ((major == IO_URING_VERSION_MAJOR) and (minor > IO_URING_VERSION_MINOR));
}
pub const iovec = struct_iovec;
pub const timeval = struct_timeval;
pub const timespec = struct_timespec;
pub const __pthread_internal_list = struct___pthread_internal_list;
pub const __pthread_internal_slist = struct___pthread_internal_slist;
pub const __pthread_mutex_s = struct___pthread_mutex_s;
pub const __pthread_rwlock_arch_t = struct___pthread_rwlock_arch_t;
pub const __pthread_cond_s = struct___pthread_cond_s;
pub const __socket_type = enum___socket_type;
pub const sockaddr = struct_sockaddr;
pub const sockaddr_storage = struct_sockaddr_storage;
pub const msghdr = struct_msghdr;
pub const cmsghdr = struct_cmsghdr;
pub const linger = struct_linger;
pub const osockaddr = struct_osockaddr;
pub const sigval = union_sigval;
pub const sigevent = struct_sigevent;
pub const _fpx_sw_bytes = struct__fpx_sw_bytes;
pub const _fpreg = struct__fpreg;
pub const _fpxreg = struct__fpxreg;
pub const _xmmreg = struct__xmmreg;
pub const _fpstate = struct__fpstate;
pub const sigcontext = struct_sigcontext;
pub const _xsave_hdr = struct__xsave_hdr;
pub const _ymmh_state = struct__ymmh_state;
pub const _xstate = struct__xstate;
pub const _libc_fpxreg = struct__libc_fpxreg;
pub const _libc_xmmreg = struct__libc_xmmreg;
pub const _libc_fpstate = struct__libc_fpstate;
pub const tm = struct_tm;
pub const itimerspec = struct_itimerspec;
pub const __locale_struct = struct___locale_struct;
pub const flock = struct_flock;
pub const sched_param = struct_sched_param;
pub const rusage = struct_rusage;
pub const __kernel_timespec = struct___kernel_timespec;
pub const __kernel_itimerspec = struct___kernel_itimerspec;
pub const __kernel_old_timeval = struct___kernel_old_timeval;
pub const __kernel_old_timespec = struct___kernel_old_timespec;
pub const __kernel_old_itimerval = struct___kernel_old_itimerval;
pub const __kernel_sock_timeval = struct___kernel_sock_timeval;
pub const open_how = struct_open_how;
pub const fscrypt_policy_v1 = struct_fscrypt_policy_v1;
pub const fscrypt_key = struct_fscrypt_key;
pub const fscrypt_policy_v2 = struct_fscrypt_policy_v2;
pub const fscrypt_get_policy_ex_arg = struct_fscrypt_get_policy_ex_arg;
pub const fscrypt_key_specifier = struct_fscrypt_key_specifier;
pub const fscrypt_provisioning_key_payload = struct_fscrypt_provisioning_key_payload;
pub const fscrypt_add_key_arg = struct_fscrypt_add_key_arg;
pub const fscrypt_remove_key_arg = struct_fscrypt_remove_key_arg;
pub const fscrypt_get_key_status_arg = struct_fscrypt_get_key_status_arg;
pub const fsconfig_command = enum_fsconfig_command;
pub const mount_attr = struct_mount_attr;
pub const statmount = struct_statmount;
pub const mnt_id_req = struct_mnt_id_req;
pub const file_clone_range = struct_file_clone_range;
pub const fstrim_range = struct_fstrim_range;
pub const file_dedupe_range_info = struct_file_dedupe_range_info;
pub const file_dedupe_range = struct_file_dedupe_range;
pub const files_stat_struct = struct_files_stat_struct;
pub const inodes_stat_t = struct_inodes_stat_t;
pub const fsxattr = struct_fsxattr;
pub const page_region = struct_page_region;
pub const pm_scan_arg = struct_pm_scan_arg;
pub const io_uring_sqe = struct_io_uring_sqe;
pub const io_uring_sqe_flags_bit = enum_io_uring_sqe_flags_bit;
pub const io_uring_op = enum_io_uring_op;
pub const io_uring_msg_ring_flags = enum_io_uring_msg_ring_flags;
pub const io_uring_cqe = struct_io_uring_cqe;
pub const io_sqring_offsets = struct_io_sqring_offsets;
pub const io_cqring_offsets = struct_io_cqring_offsets;
pub const io_uring_params = struct_io_uring_params;
pub const io_uring_register_op = enum_io_uring_register_op;
pub const io_wq_type = enum_io_wq_type;
pub const io_uring_files_update = struct_io_uring_files_update;
pub const io_uring_region_desc = struct_io_uring_region_desc;
pub const io_uring_mem_region_reg = struct_io_uring_mem_region_reg;
pub const io_uring_rsrc_register = struct_io_uring_rsrc_register;
pub const io_uring_rsrc_update = struct_io_uring_rsrc_update;
pub const io_uring_rsrc_update2 = struct_io_uring_rsrc_update2;
pub const io_uring_probe_op = struct_io_uring_probe_op;
pub const io_uring_probe = struct_io_uring_probe;
pub const io_uring_restriction = struct_io_uring_restriction;
pub const io_uring_clock_register = struct_io_uring_clock_register;
pub const io_uring_buf = struct_io_uring_buf;
pub const io_uring_buf_ring = struct_io_uring_buf_ring;
pub const io_uring_register_pbuf_ring_flags = enum_io_uring_register_pbuf_ring_flags;
pub const io_uring_buf_reg = struct_io_uring_buf_reg;
pub const io_uring_buf_status = struct_io_uring_buf_status;
pub const io_uring_napi = struct_io_uring_napi;
pub const io_uring_register_restriction_op = enum_io_uring_register_restriction_op;
pub const io_uring_cqwait_reg_arg = struct_io_uring_cqwait_reg_arg;
pub const io_uring_reg_wait = struct_io_uring_reg_wait;
pub const io_uring_getevents_arg = struct_io_uring_getevents_arg;
pub const io_uring_sync_cancel_reg = struct_io_uring_sync_cancel_reg;
pub const io_uring_file_index_range = struct_io_uring_file_index_range;
pub const io_uring_recvmsg_out = struct_io_uring_recvmsg_out;
pub const io_uring_socket_op = enum_io_uring_socket_op;
pub const io_uring_zcrx_rqe = struct_io_uring_zcrx_rqe;
pub const io_uring_zcrx_cqe = struct_io_uring_zcrx_cqe;
pub const io_uring_zcrx_offsets = struct_io_uring_zcrx_offsets;
pub const io_uring_zcrx_area_reg = struct_io_uring_zcrx_area_reg;
pub const io_uring_zcrx_ifq_reg = struct_io_uring_zcrx_ifq_reg;
pub const io_uring_sq = struct_io_uring_sq;
pub const io_uring_cq = struct_io_uring_cq;
pub const io_uring = struct_io_uring;
pub const io_uring_zcrx_rq = struct_io_uring_zcrx_rq;
pub const io_uring_cqe_iter = struct_io_uring_cqe_iter;
pub const epoll_event = struct_epoll_event;
pub const statx = struct_statx;
pub const futex_waitv = struct_futex_waitv;


